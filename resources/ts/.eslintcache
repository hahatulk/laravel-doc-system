[{"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\index.tsx":"1","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\store\\store.js":"2","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\App.tsx":"3","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\DateLocaliser\\DateLocaliser.ts":"4","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\SnackBarUtils\\SnackBarUtils.tsx":"5","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\store\\allReducers.js":"6","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\actions\\actionsAuth.ts":"7","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\AppRouter.tsx":"8","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\reducers\\authReducer.ts":"9","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\reducers\\LkReducer.ts":"10","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\reducers\\adminReducer.ts":"11","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\actions\\actionsLk.ts":"12","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Moderator_list\\Moderators_list.tsx":"13","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Prikaz_list\\Prikaz_list.tsx":"14","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\DxGridLocaleConfig.ts":"15","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\DxCustomFilter.tsx":"16","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalStudentsPrikazLinked\\ModalStudentsPrikazLinked.tsx":"17","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalCreateNewPrikaz\\ModalCreateNewPrikaz.tsx":"18","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\actions\\actionsAdmin.ts":"19","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\Dates.ts":"20","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalStudentsCreatePrikazStudentsSelect\\ModalStudentsCreatePrikazStudentsSelect.tsx":"21","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\Loading\\Loading.tsx":"22","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalPrikazZachislenie\\ModalPrikazZachislenie.tsx":"23","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalOrders\\ModalOrders.tsx":"24","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalUserData\\ModalUserData.tsx":"25","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\EditStudentColumn\\EditStudentColumn.tsx":"26","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\EditPrikazColumn\\EditPrikazColumn.tsx":"27","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\HeaderBar\\HeaderBar.tsx":"28","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalCreateNewModerator\\ModalCreateNewModerator.tsx":"29","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Groups\\Groups.tsx":"30","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Archived_Orders_list\\Archived_Orders_list.tsx":"31","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Orders_list\\Orders_list.tsx":"32","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Archived_Students_list\\Archived_Students_list.tsx":"33","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Students_list\\Students_list.tsx":"34","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalStudentData\\ModalStudentData.tsx":"35","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalOrderPrepare\\ModalOrderPrepareSpravkaObObucheni.tsx":"36","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Student\\Order_docs\\Order_docs.tsx":"37","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\HOC\\requireAuth.tsx":"38","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\HOC\\alreadyAuthed.tsx":"39","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\lk\\lk.tsx":"40","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\auth\\login\\login.tsx":"41","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\HOC\\ProtectedLink.tsx":"42","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\actions\\actionsOrders.ts":"43","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalOrderComment\\ModalOrderComment.tsx":"44","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalPreviewDocument\\ModalPreviewDocument.tsx":"45","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\EditGroupColumn\\EditGroupColumn.tsx":"46","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalStudents\\ModalStudents.tsx":"47","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalGroupCreate\\ModalGroupCreate.tsx":"48","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Student\\Order_docs\\OrderCards.tsx":"49"},{"size":1825,"mtime":1626872248270,"results":"50","hashOfConfig":"51"},{"size":483,"mtime":1626872248286,"results":"52","hashOfConfig":"51"},{"size":1257,"mtime":1626872248221,"results":"53","hashOfConfig":"51"},{"size":511,"mtime":1626872248223,"results":"54","hashOfConfig":"51"},{"size":1350,"mtime":1626872248268,"results":"55","hashOfConfig":"51"},{"size":425,"mtime":1626872248286,"results":"56","hashOfConfig":"51"},{"size":2954,"mtime":1626872248283,"results":"57","hashOfConfig":"51"},{"size":3941,"mtime":1627302085240,"results":"58","hashOfConfig":"51"},{"size":677,"mtime":1626872248285,"results":"59","hashOfConfig":"51"},{"size":2404,"mtime":1627302085257,"results":"60","hashOfConfig":"51"},{"size":8717,"mtime":1627386126549,"results":"61","hashOfConfig":"51"},{"size":2096,"mtime":1626872248283,"results":"62","hashOfConfig":"51"},{"size":10861,"mtime":1626872248274,"results":"63","hashOfConfig":"51"},{"size":12993,"mtime":1626872248277,"results":"64","hashOfConfig":"51"},{"size":295,"mtime":1626872248224,"results":"65","hashOfConfig":"51"},{"size":939,"mtime":1626872248224,"results":"66","hashOfConfig":"51"},{"size":17075,"mtime":1626872248242,"results":"67","hashOfConfig":"51"},{"size":9332,"mtime":1626872248235,"results":"68","hashOfConfig":"51"},{"size":15154,"mtime":1627388950081,"results":"69","hashOfConfig":"51"},{"size":2707,"mtime":1626872248223,"results":"70","hashOfConfig":"51"},{"size":14804,"mtime":1626872248242,"results":"71","hashOfConfig":"51"},{"size":271,"mtime":1626872248232,"results":"72","hashOfConfig":"51"},{"size":7809,"mtime":1626872248239,"results":"73","hashOfConfig":"51"},{"size":14354,"mtime":1626872248238,"results":"74","hashOfConfig":"51"},{"size":8660,"mtime":1626872248243,"results":"75","hashOfConfig":"51"},{"size":12125,"mtime":1626872248226,"results":"76","hashOfConfig":"51"},{"size":9976,"mtime":1626872248225,"results":"77","hashOfConfig":"51"},{"size":8154,"mtime":1627302085279,"results":"78","hashOfConfig":"51"},{"size":4270,"mtime":1626872248234,"results":"79","hashOfConfig":"51"},{"size":14232,"mtime":1626872248273,"results":"80","hashOfConfig":"51"},{"size":17291,"mtime":1626872248271,"results":"81","hashOfConfig":"51"},{"size":18339,"mtime":1626872248275,"results":"82","hashOfConfig":"51"},{"size":15466,"mtime":1626872248272,"results":"83","hashOfConfig":"51"},{"size":16119,"mtime":1626872248277,"results":"84","hashOfConfig":"51"},{"size":10702,"mtime":1626872248240,"results":"85","hashOfConfig":"51"},{"size":14656,"mtime":1626872248237,"results":"86","hashOfConfig":"51"},{"size":1813,"mtime":1626872248279,"results":"87","hashOfConfig":"51"},{"size":968,"mtime":1626872248231,"results":"88","hashOfConfig":"51"},{"size":947,"mtime":1626872248227,"results":"89","hashOfConfig":"51"},{"size":18307,"mtime":1627302085227,"results":"90","hashOfConfig":"51"},{"size":5431,"mtime":1626872248280,"results":"91","hashOfConfig":"51"},{"size":2571,"mtime":1626872248226,"results":"92","hashOfConfig":"51"},{"size":5614,"mtime":1626872248284,"results":"93","hashOfConfig":"51"},{"size":1745,"mtime":1626872248237,"results":"94","hashOfConfig":"51"},{"size":2644,"mtime":1626872248238,"results":"95","hashOfConfig":"51"},{"size":12161,"mtime":1626872248225,"results":"96","hashOfConfig":"51"},{"size":18344,"mtime":1626872248241,"results":"97","hashOfConfig":"51"},{"size":11841,"mtime":1626872248236,"results":"98","hashOfConfig":"51"},{"size":9433,"mtime":1626872248278,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1gaa4vj",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"102"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"102"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"102"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"102"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"102"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"102"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"102"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"102"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"102"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"102"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"102"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"102"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"102"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"102"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"102"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"102"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"102"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"102"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"102"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"102"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"102"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"102"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"102"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"102"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\index.tsx",[],["230","231"],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\store\\store.js",[],["232","233"],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\App.tsx",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\DateLocaliser\\DateLocaliser.ts",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\SnackBarUtils\\SnackBarUtils.tsx",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\store\\allReducers.js",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\actions\\actionsAuth.ts",["234","235"],"import axios, {AxiosResponse} from \"axios\"\nimport {clearUserInfoToRedux} from \"./actionsLk\";\nimport {SnackBarUtils} from \"../../additional_components/SnackBarUtils/SnackBarUtils\";\n//все запросы включают токен\naxios.defaults.withCredentials = true\n\nexport function loginToRedux(r: AxiosResponse): object {\n    return {\n        type: \"LOGIN\",\n        payload: {\n            r\n        }\n    }\n}\n\nexport function login(username: string, password: string, cb: Function = () => {\n}): any {\n    return async (dispatch: any) => {\n        return await axios.post(\n            process.env.REACT_APP_LOGIN + '',\n            {\n                username,\n                password\n            }\n        )\n            .then((res) => {\n                dispatch(loginToRedux(res))\n                cb()\n            })\n            .catch(e => {\n                SnackBarUtils.error('Вы ввели неверный логин или пароль')\n\n                //dispatch(createNotification('error', '', 'Ошибка'))\n                cb()\n            })\n    }\n}\n\nexport function tokenCheckToRedux(r: AxiosResponse): object {\n    return {\n        type: \"TOKEN_CHECK\",\n        payload: {\n            r\n        }\n    }\n}\n\n//опросить сервер на валидность токенов\nexport function tokenCheck(cb?: Function | undefined): any {\n    return async (dispatch: any) => {\n        return await axios.get(\n            process.env.REACT_APP_TOKENCHECK + ''\n        )\n            .then((res) => {\n                dispatch(tokenCheckToRedux(res))\n                if (cb) {\n                    cb(res)\n                }\n            })\n            .catch(async (e: any) => {\n                dispatch(tokenCheckToRedux(e.response))\n                dispatch(clearUserInfoToRedux())\n                // if (cb) {\n                //     cb()\n                // }\n\n                //TODO ВНИМАНИЕ КОСТЫЛЬ !!!\n                //Рестартнуть бекенд на хосте если ответ плохой\n                if (!e.response) {\n                    await axios.get(\n                        process.env.REACT_APP_SERVER_RESTART + ''\n                    )\n                }\n\n\n            })\n    }\n}\n\nexport function logoutToRedux(r: AxiosResponse): object {\n    return {\n        type: \"LOGOUT\",\n        payload: {\n            r\n        }\n    }\n}\n\nexport function logout(cb: Function = () => undefined): any {\n    return async (dispatch: any) => {\n        return await axios.post(process.env.REACT_APP_LOGOUT + '',)\n            .then((res) => {\n                dispatch(logoutToRedux(res))\n                dispatch(clearUserInfoToRedux())\n                cb(res)\n            })\n            .catch(e => {\n                let response = e.response\n                let responseMsg = e.response.data.msg\n                let responseData = e.response.data.data\n\n                cb(response)\n            })\n    }\n}","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\AppRouter.tsx",["236","237","238","239","240","241","242","243"],"import React, {Fragment, useEffect} from 'react'\nimport {Switch, withRouter} from \"react-router-dom\"\nimport {Route} from 'react-router'\nimport \"./App.scss\"\nimport \"./themes.scss\"\nimport 'animate.css/animate.min.css';\n// @ts-ignore\nimport Login from \"./pages/auth/login/login\";\nimport Lk from \"./pages/lk/lk\";\nimport requireAuth from \"./additional_components/HOC/requireAuth\";\nimport alreadyAuthed from \"./additional_components/HOC/alreadyAuthed\";\nimport {connect} from \"react-redux\";\nimport Order_docs from \"./pages/Student/Order_docs/Order_docs\";\nimport {userInfoGet} from \"./redux/actions/actionsLk\";\nimport Students_list from \"./pages/Admin/Students_list/Students_list\";\nimport Archived_Students_list from \"./pages/Admin/Archived_Students_list/Archived_Students_list\";\nimport Orders_list from \"./pages/Admin/Orders_list/Orders_list\";\nimport Archived_Orders_list from \"./pages/Admin/Archived_Orders_list/Archived_Orders_list\";\nimport Groups from \"./pages/Admin/Groups/Groups\";\nimport Prikaz_list from \"./pages/Admin/Prikaz_list/Prikaz_list\";\nimport Moderators_list from \"./pages/Admin/Moderator_list/Moderators_list\";\n\nfunction AppRouter(props: any) {\n\n    useEffect(() => {\n        props.userInfoGet()\n    }, [])\n\n    return (\n        <Fragment>\n            <Switch>\n\n\n                <Route exact path='/' component={\n                    requireAuth(<Lk {...props}/>)\n                }/>\n\n                {\n                    props.role === 'student'\n                        ? (\n                            <>\n                                <Route exact path='/order' component={\n                                    requireAuth(<Order_docs {...props}/>)\n                                }/>\n                            </>\n                        )\n                        : ''\n                }\n\n                {\n                    props.role === 'admin'\n                        ? (\n                            <>\n                                <Route exact path='/students' component={\n                                    requireAuth(<Students_list {...props}/>)\n                                }/>\n\n                                <Route exact path='/students/archived' component={\n                                    requireAuth(<Archived_Students_list {...props}/>)\n                                }/>\n\n                                <Route exact path='/orders' component={\n                                    requireAuth(<Orders_list {...props}/>)\n                                }/>\n\n                                <Route exact path='/orders/archived' component={\n                                    requireAuth(<Archived_Orders_list {...props}/>)\n                                }/>\n\n                                <Route exact path='/groups' component={\n                                    requireAuth(<Groups {...props}/>)\n                                }/>\n\n                                <Route exact path='/prikaz_list' component={\n                                    requireAuth(<Prikaz_list {...props}/>)\n                                }/>\n\n                                <Route exact path='/moderators' component={\n                                    requireAuth(<Moderators_list {...props}/>)\n                                }/>\n                            </>\n                        )\n                        : ''\n                }\n\n                <Route exact path='/login' component={\n                    alreadyAuthed(<Login {...props}/>)\n                }/>\n\n\n            </Switch>\n        </Fragment>\n\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        isAuthenticated: state.Auth.isAuthenticated,\n        role: state.User.role,\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        userInfoGet: (cb?: Function) => {\n            dispatch(userInfoGet(cb))\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(AppRouter))\n","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\reducers\\authReducer.ts",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\reducers\\LkReducer.ts",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\reducers\\adminReducer.ts",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\actions\\actionsLk.ts",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Moderator_list\\Moderators_list.tsx",["244","245","246","247","248"],"import React, {useCallback, useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {deleteModerator, getModeratorsList} from \"../../../redux/actions/actionsAdmin\";\nimport Paper from '@material-ui/core/Paper';\nimport {Column, CustomPaging, Filter, FilteringState, PagingState, Sorting, SortingState, TableColumnWidthInfo,} from '@devexpress/dx-react-grid';\nimport {ColumnChooser, Grid as DxGrid, PagingPanel, Table, TableColumnResizing, TableColumnVisibility, TableFilterRow, TableHeaderRow, Toolbar,} from '@devexpress/dx-react-grid-material-ui';\nimport {Loading} from '../../../additional_components/Loading/Loading';\nimport HeaderBar from '../../../additional_components/HeaderBar/HeaderBar';\nimport {Button, Container, Typography} from \"@material-ui/core\";\nimport './Moderators_list.scss'\nimport _ from \"lodash\";\nimport {getRowId} from '../../../additional_components/EditPrikazColumn/EditPrikazColumn';\nimport {DxCustomFilter} from \"../../../additional_components/DxCustomFilter\";\nimport {filterRowMessages} from \"../../../additional_components/DxGridLocaleConfig\";\nimport StudentUserDataModal from \"../../../additional_components/ModalUserData/ModalUserData\";\nimport ModalCreateNewModerator from \"../../../additional_components/ModalCreateNewModerator/ModalCreateNewModerator\";\n\nfunction Moderators_list(props: any) {\n    const [page, setPage] = useState<number>(0)\n    const [pageSize, setPageSize] = useState<number>(6)\n\n    const [rows, setRows] = useState<any>([])\n    const [rowCount, setRowCount] = useState<number>(0)\n\n    const [columns] = useState<Column[]>([\n        {name: 'userId', title: 'ID пользователя'},\n        {name: 'fio', title: 'ФИО'},\n        {name: 'credentials', title: 'Данные для входа'},\n        {name: 'delete', title: 'Действия'},\n    ])\n    const [columnsWidth] = useState<TableColumnWidthInfo[]>([\n        {columnName: 'userId', width: 200},\n        {columnName: 'fio', width: 300},\n        {columnName: 'credentials', width: 160},\n        {columnName: 'delete', width: 190},\n    ])\n\n    const [defaultHiddenColumnNames] = useState<string[]>([\n        'credentials',\n        'delete',\n    ])\n    const [currentHiddenColumnNames, setCurrentHiddenColumnNames] = useState<string[]>(defaultHiddenColumnNames)\n\n    const [filters, setFilters] = useState<Filter[]>([])\n    const [filtersNeedReset, setFiltersNeedReset] = useState<boolean>(false)\n    const [filteringStateColumnExtensions] = useState([\n        {columnName: 'credentials', filteringEnabled: false},\n        {columnName: 'delete', filteringEnabled: false},\n    ])\n\n    const [sorting, setSorting] = useState<Sorting[]>([])\n    const [sortingStateColumnExtensions] = useState([\n        {columnName: 'credentials', sortingEnabled: false},\n        {columnName: 'delete', sortingEnabled: false},\n    ])\n\n    const [loading, setLoading] = useState<boolean>(true)\n\n    //обновить список студентов\n    function updateList(): void {\n        props.getModeratorsList(\n            pageSize,\n            page * pageSize,\n            page,\n            sorting,\n            filters,\n        )\n    }\n\n    //задержка перед фильтрацией\n    const debouncedSetFilters = useCallback(_.debounce((e) => {\n        setFilters(e)\n    }, 400), [])\n\n    useEffect(() => {\n        updateList()\n\n        // console.log(page * pageSize,( page + 1) * pageSize);\n    }, [page, sorting, filters])\n\n    //обновить статус загрузки листа\n    useEffect(() => {\n        setLoading(props.Admin.moderatorsList.loading)\n    }, [props.Admin.moderatorsList.loading])\n\n    //обновить лист в компоненте\n    useEffect(() => {\n        setRows(props.Admin.moderatorsList.list)\n        setRowCount(props.Admin.moderatorsList.count)\n\n        //сброс страницы на 0 если лист маленький\n        if (props.Admin.moderatorsList.count <= pageSize && filters?.length) {\n            setPage(0)\n            // console.log(props.Admin.studentsList.count, pageSize);\n            // console.log(page);\n        }\n\n    }, [props.Admin.moderatorsList.list])\n\n    //кастомный хендлер сортинга для сброса сортировки на 3-е нажатие\n    const onSortingChange = (newColumnsSort: Array<any>) => {\n        let indexToRemove = -1;\n        newColumnsSort.forEach((column, index) => {\n            let columnToCheck = sorting.filter(\n                (c) => c.columnName === column.columnName\n            );\n\n            if (\n                columnToCheck.length > 0 &&\n                columnToCheck[0].direction !== column.direction &&\n                column.direction === \"asc\"\n            ) {\n                indexToRemove = index;\n            }\n        });\n        if (indexToRemove > -1) newColumnsSort.splice(indexToRemove, 1);\n        setSorting(newColumnsSort);\n    }\n\n    //компаратор для специфичных колонок\n    const Cell = React.memo((cellProps: any) => {\n        const {column, row} = cellProps;\n\n        if (column.name === 'credentials') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <StudentUserDataModal userId={row.userId}/>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'delete') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <Button color={'secondary'}\n                            variant={'contained'}\n                            onClick={() => {\n                                let sure = window.confirm(`Вы уверены что хотите удалить администратора?`)\n\n                                if (sure) {\n                                    props.deleteModerator(row.userId, () => {\n                                        updateList()\n                                    })\n                                }\n                            }}\n                    >\n                        УДАЛИТЬ\n                    </Button>\n                </Table.Cell>\n            )\n        }\n\n        return <Table.Cell {...cellProps} />;\n    })\n\n    return (\n        <div className={'Prikaz_list'}>\n            <HeaderBar/>\n\n            <Container className={'Root-container'}>\n                <Paper className={'Prikaz_list_table'} style={{position: 'relative', minHeight: '459px'}}>\n                    <div className={\"table-description\"}>\n                        <Typography variant={'h6'} className={'table-title'}>\n                            Список администраторов\n                        </Typography>\n                        <Button color={'primary'}\n                                variant={'contained'}\n                                disabled={!filters?.length}\n                                onClick={() => {\n                                    setFiltersNeedReset(true)\n                                }}\n                        >\n                            Сброс фильтров\n                        </Button>\n                        <div className={'table-controls'}>\n\n                            <ModalCreateNewModerator updateList={() => {\n                                updateList()\n                            }}/>\n\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        updateList()\n                                    }}\n                            >\n                                Обновить\n                            </Button>\n                        </div>\n                    </div>\n                    <DxGrid\n                        rows={rows}\n                        columns={columns}\n                        getRowId={getRowId}\n                    >\n                        <Toolbar/>\n                        <FilteringState\n                            columnExtensions={filteringStateColumnExtensions}\n                            onFiltersChange={debouncedSetFilters}\n                        />\n                        <SortingState\n                            sorting={sorting}\n                            onSortingChange={onSortingChange}\n                            columnExtensions={sortingStateColumnExtensions}\n                        />\n                        <PagingState\n                            currentPage={page}\n                            onCurrentPageChange={setPage}\n                            pageSize={pageSize}\n                        />\n                        <CustomPaging\n                            totalCount={rowCount}\n                        />\n                        <Table\n                            cellComponent={Cell}\n                        />\n                        <TableColumnResizing\n                            defaultColumnWidths={columnsWidth}\n                        />\n                        <TableColumnVisibility\n                            defaultHiddenColumnNames={defaultHiddenColumnNames}\n                            onHiddenColumnNamesChange={setCurrentHiddenColumnNames}\n\n                        />\n                        <TableHeaderRow\n                            showSortingControls\n                        />\n                        <TableFilterRow\n                            messages={filterRowMessages}\n                            editorComponent={(p: any) => (\n                                <DxCustomFilter\n                                    filtersNeedReset={filtersNeedReset}\n                                    setFiltersNeedReset={setFiltersNeedReset}\n                                    {...p}/>\n                            )}\n                        />\n                        <PagingPanel/>\n                        <ColumnChooser/>\n\n                    </DxGrid>\n                    {loading && <Loading/>}\n                </Paper>\n            </Container>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        deleteModerator: (\n            userId: number,\n            cb?: Function | undefined,\n        ) => {\n            dispatch(deleteModerator(userId, cb))\n        },\n        getModeratorsList: (\n            limit: string | number,\n            offset: string | number,\n            page: string | number,\n            sort?: Sorting[],\n            filters?: Filter[],\n        ) => {\n            dispatch(getModeratorsList(limit, offset, page, sort, filters))\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(React.memo(Moderators_list)))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Prikaz_list\\Prikaz_list.tsx",["249","250","251","252","253"],"import React, {useCallback, useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {deletePrikaz, editPrikaz, exportStudents, getPrikazList} from \"../../../redux/actions/actionsAdmin\";\nimport Paper from '@material-ui/core/Paper';\nimport {Column, CustomPaging, EditingState, Filter, FilteringState, PagingState, Sorting, SortingState, TableColumnWidthInfo,} from '@devexpress/dx-react-grid';\nimport {\n    ColumnChooser,\n    Grid as DxGrid,\n    PagingPanel,\n    Table,\n    TableColumnResizing,\n    TableColumnVisibility,\n    TableEditColumn,\n    TableFilterRow,\n    TableHeaderRow,\n    Toolbar,\n} from '@devexpress/dx-react-grid-material-ui';\nimport {Loading} from '../../../additional_components/Loading/Loading';\nimport HeaderBar from '../../../additional_components/HeaderBar/HeaderBar';\nimport {Button, Container, Typography} from \"@material-ui/core\";\nimport './Prikaz_list.scss'\nimport _ from \"lodash\";\nimport {getLocalDate} from \"../../../additional_components/Dates\";\nimport {getRowId, Popup, PopupEditing} from '../../../additional_components/EditPrikazColumn/EditPrikazColumn';\nimport ModalStudentsPrikazLinked from \"../../../additional_components/ModalStudentsPrikazLinked/ModalStudentsPrikazLinked\";\nimport ModalCreateNewPrikaz from \"../../../additional_components/ModalCreateNewPrikaz/ModalCreateNewPrikaz\";\nimport {DxCustomFilter} from \"../../../additional_components/DxCustomFilter\";\nimport {editColumnMessages, filterRowMessages} from \"../../../additional_components/DxGridLocaleConfig\";\n\nfunction Prikaz_list(props: any) {\n    const [page, setPage] = useState<number>(0)\n    const [pageSize, setPageSize] = useState<number>(6)\n\n    const [rows, setRows] = useState<any>([])\n    const [rowCount, setRowCount] = useState<number>(0)\n\n    const [columns] = useState<Column[]>([\n        {name: 'id', title: 'ID'},\n        {name: 'N', title: 'Номер'},\n        {name: 'title', title: 'Название'},\n        {name: 'name', title: 'Тип'},\n        {name: 'prikazDate', title: 'Дата создания'},\n        {name: 'linkedStudents', title: 'Связанные студенты'},\n        {name: 'delete', title: 'Действия'},\n    ])\n    const [columnsWidth] = useState<TableColumnWidthInfo[]>([\n        {columnName: 'id', width: 80},\n        {columnName: 'N', width: 100},\n        {columnName: 'title', width: 180},\n        {columnName: 'name', width: 180},\n        {columnName: 'prikazDate', width: 180},\n        {columnName: 'linkedStudents', width: 190},\n        {columnName: 'delete', width: 190},\n    ])\n\n\n    const [defaultHiddenColumnNames] = useState<string[]>([\n        'id',\n        'name',\n        'delete',\n    ])\n    const [currentHiddenColumnNames, setCurrentHiddenColumnNames] = useState<string[]>(defaultHiddenColumnNames)\n\n    const [filters, setFilters] = useState<Filter[]>([])\n    const [filtersNeedReset, setFiltersNeedReset] = useState<boolean>(false)\n    const [filteringStateColumnExtensions] = useState([\n        {columnName: 'linkedStudents', filteringEnabled: false},\n        // {columnName: 'documentRequestsList', filteringEnabled: false},\n    ])\n\n    const [sorting, setSorting] = useState<Sorting[]>([])\n    const [sortingStateColumnExtensions] = useState([\n        {columnName: 'linkedStudents', sortingEnabled: false},\n        // {columnName: 'documentRequestsList', sortingEnabled: false},\n    ])\n\n    const [loading, setLoading] = useState<boolean>(true)\n\n    //обновить список студентов\n    function updateList(): void {\n        props.getPrikazList(\n            pageSize,\n            page * pageSize,\n            page,\n            sorting,\n            filters,\n        )\n    }\n\n    //задержка перед фильтрацией\n    const debouncedSetFilters = useCallback(_.debounce((e) => {\n        setFilters(e)\n    }, 400), [])\n\n    useEffect(() => {\n        updateList()\n\n        // console.log(page * pageSize,( page + 1) * pageSize);\n    }, [page, sorting, filters])\n\n    //обновить статус загрузки листа\n    useEffect(() => {\n        setLoading(props.Admin.prikazList.loading)\n    }, [props.Admin.prikazList.loading])\n\n    //обновить лист в компоненте\n    useEffect(() => {\n        setRows(props.Admin.prikazList.list)\n        setRowCount(props.Admin.prikazList.count)\n\n        //сброс страницы на 0 если лист маленький\n        if (props.Admin.prikazList.count <= pageSize && filters?.length) {\n            setPage(0)\n            // console.log(props.Admin.studentsList.count, pageSize);\n            // console.log(page);\n        }\n\n    }, [props.Admin.prikazList.list])\n\n    //кастомный хендлер сортинга для сброса сортировки на 3-е нажатие\n    const onSortingChange = (newColumnsSort: Array<any>) => {\n        let indexToRemove = -1;\n        newColumnsSort.forEach((column, index) => {\n            let columnToCheck = sorting.filter(\n                (c) => c.columnName === column.columnName\n            );\n\n            if (\n                columnToCheck.length > 0 &&\n                columnToCheck[0].direction !== column.direction &&\n                column.direction === \"asc\"\n            ) {\n                indexToRemove = index;\n            }\n        });\n        if (indexToRemove > -1) newColumnsSort.splice(indexToRemove, 1);\n        setSorting(newColumnsSort);\n    }\n\n    //отправить запрос на изменение данных студента\n    const commitChanges = ({changed}: any) => {\n        // let changedRows;\n        if (changed) {\n            // changedRows = rows.map((row: any) => (changed[row.id] ? {...row, ...changed[row.id]} : row));\n\n            const editedPrikazId: number = parseInt(Object.keys(changed)[0])\n            const editedData: any = changed[editedPrikazId]\n\n            console.log(changed)\n\n            if (editedData) {\n                setLoading(true)\n                props.editPrikaz(editedPrikazId, editedData, () => {\n                    updateList()\n                })\n            }\n        }\n    };\n\n    //компаратор для специфичных колонок\n    const Cell = React.memo((cellProps: any) => {\n        const {column, row} = cellProps;\n\n        if (column.name === 'prikazDate') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.prikazDate)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'linkedStudents') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <ModalStudentsPrikazLinked prikazNumber={row.N}/>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'delete') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <Button color={'secondary'}\n                            variant={'contained'}\n                            onClick={() => {\n                                let sure = window.confirm(`Вы уверены что хотите удалить приказ ${row.title} № ${row.N}?`)\n\n                                if (sure) {\n                                    props.deletePrikaz(row.id, () => {\n                                        updateList()\n                                    })\n                                }\n                            }}\n                    >\n                        УДАЛИТЬ\n                    </Button>\n                </Table.Cell>\n            )\n        }\n\n        return <Table.Cell {...cellProps} />;\n    })\n\n    return (\n        <div className={'Prikaz_list'}>\n            <HeaderBar/>\n\n            <Container className={'Root-container'}>\n                <Paper className={'Prikaz_list_table'} style={{position: 'relative', minHeight: '459px'}}>\n                    <div className={\"table-description\"}>\n                        <Typography variant={'h6'} className={'table-title'}>\n                            Список приказов\n                        </Typography>\n                        <Button color={'primary'}\n                                variant={'contained'}\n                                disabled={!filters?.length}\n                                onClick={() => {\n                                    setFiltersNeedReset(true)\n                                }}\n                        >\n                            Сброс фильтров\n                        </Button>\n                        <div className={'table-controls'}>\n\n                            <ModalCreateNewPrikaz updateList={() => {\n                                updateList()\n                            }}/>\n\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        updateList()\n                                    }}\n                            >\n                                Обновить\n                            </Button>\n                        </div>\n                    </div>\n                    <DxGrid\n                        rows={rows}\n                        columns={columns}\n                        getRowId={getRowId}\n                    >\n                        <Toolbar/>\n                        <FilteringState\n                            columnExtensions={filteringStateColumnExtensions}\n                            onFiltersChange={debouncedSetFilters}\n                        />\n                        <SortingState\n                            sorting={sorting}\n                            onSortingChange={onSortingChange}\n                            columnExtensions={sortingStateColumnExtensions}\n                        />\n                        <PagingState\n                            currentPage={page}\n                            onCurrentPageChange={setPage}\n                            pageSize={pageSize}\n                        />\n                        <CustomPaging\n                            totalCount={rowCount}\n                        />\n                        <EditingState\n                            onCommitChanges={commitChanges}\n                        />\n\n                        <Table\n                            cellComponent={Cell}\n                        />\n                        <TableColumnResizing\n                            defaultColumnWidths={columnsWidth}\n                        />\n                        <TableColumnVisibility\n                            defaultHiddenColumnNames={defaultHiddenColumnNames}\n                            onHiddenColumnNamesChange={setCurrentHiddenColumnNames}\n\n                        />\n                        <TableHeaderRow\n                            showSortingControls\n                        />\n                        <TableEditColumn\n                            showEditCommand\n                            messages={editColumnMessages}\n                        />\n                        <PopupEditing popupComponent={Popup}/>\n                        <TableFilterRow\n                            messages={filterRowMessages}\n                            editorComponent={(p: any) => (\n                                <DxCustomFilter\n                                    filtersNeedReset={filtersNeedReset}\n                                    setFiltersNeedReset={setFiltersNeedReset}\n                                    {...p}/>\n                            )}\n                        />\n                        <PagingPanel/>\n                        <ColumnChooser/>\n\n                    </DxGrid>\n                    {loading && <Loading/>}\n                </Paper>\n            </Container>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        editPrikaz: (prikazNumber: number, values: any, cb: Function) => {\n            dispatch(editPrikaz(prikazNumber, values, cb))\n        },\n        deletePrikaz: (\n            prikazId: number,\n            cb?: Function | undefined,\n        ) => {\n            dispatch(deletePrikaz(prikazId, cb))\n        },\n        exportStudents: (restrictedColumns: any[], filters: any[], type?: string | undefined) => {\n            dispatch(exportStudents(restrictedColumns, filters, type))\n        },\n        getPrikazList: (\n            limit: string | number,\n            offset: string | number,\n            page: string | number,\n            sort?: Sorting[],\n            filters?: Filter[],\n        ) => {\n            dispatch(getPrikazList(limit, offset, page, sort, filters))\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(React.memo(Prikaz_list)))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\DxGridLocaleConfig.ts",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\DxCustomFilter.tsx",["254"],"import React, {useEffect, useState} from \"react\";\nimport {TableFilterRow} from \"@devexpress/dx-react-grid-material-ui\";\n\nexport const DxCustomFilter = React.memo(({onChange, value: valueProp, ...restProps}: any) => {\n    const {filtersNeedReset, setFiltersNeedReset} = restProps\n\n    //удалить доп параметры чтоб ошибок не было\n    const props = restProps\n    delete props.filtersNeedReset\n    delete props.setFiltersNeedReset\n\n    const [value, setValue] = useState(valueProp);\n    const onKeyUp = (e: any) => {\n        onChange(value);\n    };\n\n    useEffect(() => {\n        if (filtersNeedReset) {\n            setValue('')\n            onChange('');\n            setFiltersNeedReset(false)\n        }\n    }, [filtersNeedReset])\n\n    return (\n        <TableFilterRow.Editor\n            {...props}\n            value={value}\n            onChange={setValue}\n            onKeyUp={onKeyUp}\n        />\n    );\n})\n","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalStudentsPrikazLinked\\ModalStudentsPrikazLinked.tsx",["255","256","257","258","259"],"import React, {useCallback, useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {Loading} from '../Loading/Loading';\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, Typography} from \"@material-ui/core\";\nimport {\n    ColumnChooser,\n    Grid as DxGrid,\n    PagingPanel,\n    Table,\n    TableColumnResizing,\n    TableColumnVisibility,\n    TableEditColumn,\n    TableFilterRow,\n    TableHeaderRow,\n    Toolbar\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport {Column, CustomPaging, EditingState, Filter, FilteringState, PagingState, Sorting, SortingState, TableColumnWidthInfo} from \"@devexpress/dx-react-grid\";\nimport {getLocalDate} from \"../Dates\";\nimport axios from \"axios\";\nimport {SnackBarUtils} from \"../SnackBarUtils/SnackBarUtils\";\nimport {getRowId, Popup, PopupEditing} from \"../EditStudentColumn/EditStudentColumn\";\nimport _ from \"lodash\";\nimport StudentUserDataModal from \"../ModalUserData/ModalUserData\";\nimport ModalOrders from \"../ModalOrders/ModalOrders\";\nimport {editStudent, exportStudents, exportStudentsWithCredentials} from \"../../redux/actions/actionsAdmin\";\nimport ModalPrikazZachislenie from \"../ModalPrikazZachislenie/ModalPrikazZachislenie\";\nimport {DxCustomFilter} from \"../DxCustomFilter\";\nimport {editColumnMessages, filterRowMessages} from \"../DxGridLocaleConfig\";\n\n\nfunction ModalStudentsPrikazLinked(props: any) {\n    const [open, setOpen] = useState<boolean>(false)\n\n    const [page, setPage] = useState<number>(0)\n    const [pageSize, setPageSize] = useState<number>(6)\n\n    const [rows, setRows] = useState<any>([])\n    const [rowCount, setRowCount] = useState<number>(0)\n\n    const [columns] = useState<Column[]>([\n        {name: 'userId', title: 'ID аккаунта'},\n        {name: 'kurs', title: 'Курс'},\n        {name: 'groupName', title: 'Группа'},\n        {name: 'formaObuch', title: 'Форма обучения'},\n        {name: 'surname', title: 'Фамилия'},\n        {name: 'name', title: 'Имя'},\n        {name: 'patronymic', title: 'Отчество'},\n        {name: 'gender', title: 'Пол'},\n        {name: 'birthday', title: 'Дата рождения'},\n        {name: 'age', title: 'Возраст'},\n        {name: 'diplomaId', title: 'Номер диплома'},\n        {name: 'startDate', title: 'Начало обучения'},\n        {name: 'finishDate', title: 'Конец обучения'},\n        {name: 'documentRequestsList', title: 'Заказы'},\n        {name: 'userData', title: 'Данные аккаунта'},\n    ])\n    const [columnsWidth] = useState<TableColumnWidthInfo[]>([\n        {columnName: 'userId', width: 160},\n        {columnName: 'kurs', width: 80},\n        {columnName: 'groupName', width: 100},\n        {columnName: 'formaObuch', width: 160},\n        {columnName: 'surname', width: 180},\n        {columnName: 'name', width: 180},\n        {columnName: 'patronymic', width: 180},\n        {columnName: 'gender', width: 100},\n        {columnName: 'birthday', width: 150},\n        {columnName: 'age', width: 150},\n        {columnName: 'diplomaId', width: 160},\n        {columnName: 'startDate', width: 160},\n        {columnName: 'finishDate', width: 160},\n        {columnName: 'documentRequestsList', width: 180},\n        {columnName: 'userData', width: 180},\n    ])\n\n    const [defaultHiddenColumnNames] = useState<string[]>([\n        'userId',\n        'groupName',\n        'formaObuch',\n        'startDate',\n        'finishDate',\n        'userData',\n        'diplomaId',\n        'documentRequestsList',\n    ])\n    const [currentHiddenColumnNames, setCurrentHiddenColumnNames] = useState<string[]>(defaultHiddenColumnNames)\n\n    const [defaultFilters] = useState<Filter[]>([])\n    const [filters, setFilters] = useState<Filter[]>(defaultFilters)\n    const [filtersNeedReset, setFiltersNeedReset] = useState<boolean>(false)\n    const [filteringStateColumnExtensions] = useState([\n        {columnName: 'groupName', filteringEnabled: false},\n        {columnName: 'userData', filteringEnabled: false},\n        {columnName: 'documentRequestsList', filteringEnabled: false},\n    ])\n\n    const [sorting, setSorting] = useState<Sorting[]>([])\n    const [sortingStateColumnExtensions] = useState([\n        {columnName: 'groupName', sortingEnabled: false},\n        {columnName: 'userData', sortingEnabled: false},\n        {columnName: 'documentRequestsList', sortingEnabled: false},\n    ])\n\n    const [loading, setLoading] = useState<boolean>(true)\n\n    function openDialog() {\n        setOpen(true)\n    }\n\n    function closeDialog() {\n        setOpen(false)\n    }\n\n    //обновить список студентов\n    function updateList(): void {\n        setLoading(true)\n\n        axios.post(process.env.REACT_APP_ADMIN_STUDENTS_LINKED_TO_PRIKAZ + ``,\n            {\n                offset: page * pageSize,\n                limit: pageSize,\n                page: page,\n                sort: sorting,\n                filters: filters,\n                ignoreInProgress: true,\n                prikazNumber: props.prikazNumber\n            }\n        )\n            .then((res) => {\n                setRows(res.data.data.students)\n                setRowCount(res.data.data.studentsCount)\n                setLoading(false)\n            })\n            .catch(e => {\n                const res = e.response\n                //check if tokens expired already\n                SnackBarUtils.error('Ошибка загрузки списка')\n\n            })\n    }\n\n    //задержка перед фильтрацией\n    const debouncedSetFilters = useCallback(_.debounce((e) => {\n        setFilters([...e, ...defaultFilters])\n    }, 400), [])\n\n    //получать новый лист при изменении параметров\n    useEffect(() => {\n        if (open) {\n            updateList()\n        }\n\n        // console.log(page * pageSize,( page + 1) * pageSize);\n    }, [page, sorting, filters, open])\n\n    //обновить лист в компоненте\n    useEffect(() => {\n        //сброс страницы на 0 если лист маленький\n        if (rowCount <= pageSize && filters?.length && open) {\n            setPage(0)\n            // console.log(props.Admin.studentsList.count, pageSize);\n            // console.log(page);\n        }\n\n    }, [rows])\n\n    //кастомный хендлер сортинга для сброса сортировки на 3-е нажатие\n    const onSortingChange = (newColumnsSort: Array<any>) => {\n        let indexToRemove = -1;\n        newColumnsSort.forEach((column, index) => {\n            let columnToCheck = sorting.filter(\n                (c) => c.columnName === column.columnName\n            );\n\n            if (\n                columnToCheck.length > 0 &&\n                columnToCheck[0].direction !== column.direction &&\n                column.direction === \"asc\"\n            ) {\n                indexToRemove = index;\n            }\n        });\n        if (indexToRemove > -1) newColumnsSort.splice(indexToRemove, 1);\n        setSorting(newColumnsSort);\n    }\n\n    //отправить запрос на изменение данных студента\n    const commitChanges = ({changed}: any) => {\n        // let changedRows;\n        if (changed) {\n            // changedRows = rows.map((row: any) => (changed[row.id] ? {...row, ...changed[row.id]} : row));\n\n            const editedUserId: number = parseInt(Object.keys(changed)[0])\n            const editedData: any = changed[editedUserId]\n\n            console.log(changed)\n\n            if (editedData) {\n                props.editStudent(editedUserId, editedData, () => {\n                    updateList()\n                })\n            }\n        }\n    };\n\n    //компонент форматирования формы обучения\n    const FormaObuchComponent = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <span\n                >\n                    {row.formaObuch ? 'платная' : 'бюджетная'}\n                 </span>\n            </Table.Cell>\n        )\n    })\n\n    //компонент просмотра инфы о акке студента\n    const StudentLoginData = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <StudentUserDataModal userId={row.userId}/>\n            </Table.Cell>\n        )\n    })\n\n    const DocumentRequestsList = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        const studentName = `${row.surname} ${row.name} ${row.patronymic} `\n\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <ModalOrders studentName={studentName} userId={row.userId}/>\n            </Table.Cell>\n        )\n    })\n\n    //компаратор для специфичных колонок\n    const Cell = React.memo((cellProps: any) => {\n        const {column, row} = cellProps;\n\n        if (column.name === 'birthday') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.birthday)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'startDate') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.startDate)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'finishDate') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.finishDate)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'userData') {\n            return <StudentLoginData {...cellProps} />;\n        }\n\n        if (column.name === 'documentRequestsList') {\n            return <DocumentRequestsList {...cellProps} />;\n        }\n\n        if (column.name === 'formaObuch') {\n            return <FormaObuchComponent {...cellProps} />;\n        }\n\n        return <Table.Cell {...cellProps} />;\n    })\n\n    return (\n        <>\n            <Button color={'primary'}\n                    variant={'contained'}\n                    onClick={() => {\n                        openDialog()\n                    }}\n            >\n                Показать\n            </Button>\n            <Dialog\n                open={open}\n                maxWidth={'lg'}\n                fullWidth={true}\n                onClose={closeDialog}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\" style={{padding: '16px 24px 0 24px'}}>\n                    <div className={\"table-description\"}>\n                        <Typography variant={'h6'}>\n                            Студенты {props.groupName ? `группы ${props.groupName}` : ''}\n                        </Typography>\n                        <div className={'table-controls'}>\n\n                            {\n                                props.groupId !== undefined\n                                    ? <>\n                                        <ModalPrikazZachislenie groupId={props.groupId} groupName={props.groupName}/>\n\n                                        <Button color={'primary'}\n                                                variant={'contained'}\n                                                style={{marginRight: '25px'}}\n                                                onClick={() => {\n                                                    props.exportStudents(currentHiddenColumnNames, filters)\n\n                                                }}\n                                        >\n                                            Экспорт\n                                        </Button>\n\n                                        <Button color={'primary'}\n                                                variant={'contained'}\n                                                style={{marginRight: '25px'}}\n                                                onClick={() => {\n                                                    props.exportStudentsWithCredentials(currentHiddenColumnNames, filters)\n                                                }}\n                                        >\n                                            Экспорт данных для входа\n                                        </Button>\n                                    </>\n                                    : ''\n                            }\n\n\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        updateList()\n                                    }}\n                            >\n                                Обновить\n                            </Button>\n                        </div>\n                    </div>\n                </DialogTitle>\n                <DialogContent style={{padding: '0'}}>\n                    <DxGrid\n                        rows={rows}\n                        columns={columns}\n                        getRowId={getRowId}\n                    >\n                        <Toolbar/>\n                        <FilteringState\n                            columnExtensions={filteringStateColumnExtensions}\n                            onFiltersChange={debouncedSetFilters}\n                        />\n                        <SortingState\n                            sorting={sorting}\n                            onSortingChange={onSortingChange}\n                            columnExtensions={sortingStateColumnExtensions}\n                        />\n                        <PagingState\n                            currentPage={page}\n                            onCurrentPageChange={setPage}\n                            pageSize={pageSize}\n                        />\n                        <CustomPaging\n                            totalCount={rowCount}\n                        />\n                        <EditingState\n                            onCommitChanges={commitChanges}\n                        />\n\n                        <Table\n                            cellComponent={Cell}\n                        />\n                        <TableColumnResizing\n                            defaultColumnWidths={columnsWidth}\n                        />\n                        <TableColumnVisibility\n                            defaultHiddenColumnNames={defaultHiddenColumnNames}\n                            onHiddenColumnNamesChange={setCurrentHiddenColumnNames}\n\n                        />\n                        <TableHeaderRow\n                            showSortingControls\n                        />\n                        <TableEditColumn\n                            showEditCommand\n                            messages={editColumnMessages}\n                        />\n\n                        <PopupEditing popupComponent={Popup}/>\n                        <TableFilterRow\n                            messages={filterRowMessages}\n                            editorComponent={(p: any) => (\n                                <DxCustomFilter\n                                    filtersNeedReset={filtersNeedReset}\n                                    setFiltersNeedReset={setFiltersNeedReset}\n                                    {...p}/>\n                            )}\n                        />\n                        <PagingPanel/>\n                        <ColumnChooser/>\n\n                    </DxGrid>\n                    {loading && <Loading/>}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={closeDialog} color=\"primary\">\n                        Закрыть\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        editStudent: (userId: number, values: any, cb: Function) => {\n            dispatch(editStudent(userId, values, cb))\n        },\n        exportStudentsWithCredentials: (restrictedColumns: any[], filters: any[], type?: string | undefined) => {\n            dispatch(exportStudentsWithCredentials(restrictedColumns, filters, type))\n        },\n        exportStudents: (restrictedColumns: any[], filters: any[], type?: string | undefined) => {\n            dispatch(exportStudents(restrictedColumns, filters, type))\n        },\n\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ModalStudentsPrikazLinked))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalCreateNewPrikaz\\ModalCreateNewPrikaz.tsx",["260"],"import React, {useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, Grid, InputLabel, Select, TextField, Typography} from \"@material-ui/core\";\nimport './ModalCreateNewPrikaz.scss'\nimport {Loading} from \"../Loading/Loading\";\nimport {DatePicker} from \"@material-ui/pickers\";\nimport {downloadImportStudentsTemplate} from \"../../redux/actions/actionsAdmin\";\nimport ModalStudentsCreatePrikazStudentsSelect from \"../ModalStudentsCreatePrikazStudentsSelect/ModalStudentsCreatePrikazStudentsSelect\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {SnackBarUtils} from \"../SnackBarUtils/SnackBarUtils\";\n\nfunction ModalCreateNewPrikaz(props: any) {\n    const [open, setOpen] = useState(false);\n\n    const [prikazNumber, setPrikazNumber] = useState<number | string>('');\n    const [prikazDate, setPrikazDate] = useState<string | Date>(new Date());\n    const [prikazType, setPrikazType] = useState<string>('');\n    const [prikazTypes, setPrikazTypes] = useState<any>([]);\n    const [prikazTypesLoading, setPrikazTypesLoading] = useState<boolean>(true);\n    const [selectedStudentsIds, setSelectedStudentsIds] = useState<number[]>([]);\n\n    const [loading, setLoading] = useState<boolean>(false);\n\n    //получить список приказов\n    useEffect(() => {\n        if (open) {\n            setPrikazTypesLoading(true)\n\n            axios.get(process.env.REACT_APP_ADMIN_PRIKAZ_TYPES + ``)\n                .then((r: AxiosResponse) => {\n                    setPrikazTypes(r.data.data)\n                })\n                .catch((e) => {\n                    SnackBarUtils.error('Ошибка загрузки приказов')\n                })\n                .finally(() => {\n                    setPrikazTypesLoading(false)\n                })\n        } else {\n            setSelectedStudentsIds([])\n        }\n    }, [open])\n\n    useEffect(() => {\n        if (open) {\n            // console.log(selectedStudentsIds)\n        } else {\n\n        }\n    }, [selectedStudentsIds])\n\n    function openDialog(): void {\n        setOpen(true)\n    }\n\n    function closeDialog(): void {\n        setOpen(false)\n    }\n\n    function handleSubmit(): void {\n        setLoading(true)\n        axios.post(process.env.REACT_APP_ADMIN_PRIKAZ_CREATE + ``,\n            {\n                prikazNumber: prikazNumber,\n                prikazDate: prikazDate,\n                prikazType: prikazType,\n                studentsIds: selectedStudentsIds,\n            })\n            .then((r: AxiosResponse) => {\n                SnackBarUtils.success('Приказ создан')\n                props.updateList()\n                setOpen(false)\n            })\n            .catch((e) => {\n                SnackBarUtils.error('Ошибка создания приказа')\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }\n\n    function selectStudents(list: any[]): void {\n        setSelectedStudentsIds(list)\n    }\n\n    return (\n        <>\n            <Button color={'primary'}\n                    variant={'contained'}\n                    style={{marginRight: '25px'}}\n                    onClick={() => {\n                        openDialog()\n                    }}\n            >\n                Создать\n            </Button>\n            <Dialog\n                open={open}\n                maxWidth={'md'}\n                fullWidth={true}\n                onClose={closeDialog}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Создание приказа</DialogTitle>\n                <DialogContent>\n                    <Grid container spacing={2}>\n\n                        <Grid item xs={12} md={6}>\n                            <TextField\n                                margin=\"normal\"\n                                name=\"prikazNumber\"\n                                label=\"Номер приказа\"\n                                type={'number'}\n                                value={prikazNumber}\n                                style={{width: '100%'}}\n                                onChange={(e: any) => {\n                                    const value = e.target.value\n                                    if (!isNaN(parseInt(value)) || value === '') {\n                                        setPrikazNumber(value)\n                                    } else {\n                                        e.preventDefault()\n                                    }\n                                }}\n                            />\n\n                            <DatePicker\n                                margin={'normal'}\n                                label=\"Дата приказа\"\n                                format=\"yyyy-MM-dd\"\n                                value={prikazDate || new Date()}\n                                cancelLabel={'отмена'}\n                                style={{width: '100%'}}\n                                onChange={(e: any) => {\n                                    setPrikazDate(e)\n                                }}\n                            />\n\n\n                        </Grid>\n\n                        <Grid item xs={12} md={6}>\n                            <FormControl margin={'normal'} style={{width: '100%'}}>\n                                <InputLabel>Тип приказа</InputLabel>\n                                <Select\n                                    native\n                                    name={'prikaz'}\n                                    disabled={prikazTypesLoading || !prikazTypes?.length}\n                                    onChange={(e: any) => {\n                                        setPrikazType(e.target.value)\n                                    }}\n                                >\n                                    {\n                                        !prikazTypesLoading\n                                            ?\n                                            prikazTypes?.length\n                                                ? (\n                                                    <>\n                                                        <option aria-label=\"None\" value=\"\"/>\n                                                        {\n                                                            prikazTypes.map((type: any) => {\n                                                                return (\n                                                                    <option key={type.id} value={type.name}>\n                                                                        {type.title}\n                                                                    </option>\n                                                                )\n                                                            })\n                                                        }\n                                                    </>\n                                                )\n\n                                                : <option key={-2} value={-1}>Ошибка загрузки</option>\n                                            : <option key={-1} value={-1}>Загрузка...</option>\n                                    }\n                                </Select>\n                            </FormControl>\n\n                            <TextField\n                                margin=\"normal\"\n                                label=\"Выбрано студентов\"\n                                value={selectedStudentsIds?.length}\n                                style={{width: '100%'}}\n                                disabled={true}\n                            />\n\n\n                            <div>\n\n                                <Typography variant={'body1'} style={{marginBottom: '5px'}}>\n                                    Выберите студентов, относящихся к приказу:\n                                </Typography>\n                                <ModalStudentsCreatePrikazStudentsSelect\n                                    selectStudents={(list: number[]) => {\n                                        selectStudents(list)\n                                    }}\n                                />\n                            </div>\n                        </Grid>\n\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={closeDialog} color=\"primary\">\n                        Отмена\n                    </Button>\n                    <Button onClick={() => {\n                        handleSubmit()\n                    }} color=\"primary\">\n                        Создать\n                    </Button>\n                </DialogActions>\n                {loading && <Loading/>}\n            </Dialog>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {}\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        downloadImportStudentsTemplate: () => {\n            dispatch(downloadImportStudentsTemplate())\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ModalCreateNewPrikaz))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\actions\\actionsAdmin.ts",["261","262","263","264","265"],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\Dates.ts",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalStudentsCreatePrikazStudentsSelect\\ModalStudentsCreatePrikazStudentsSelect.tsx",["266","267","268","269","270","271","272"],"import React, {useCallback, useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {Loading} from '../Loading/Loading';\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, Typography} from \"@material-ui/core\";\nimport {\n    ColumnChooser,\n    Grid as DxGrid,\n    PagingPanel,\n    Table,\n    TableColumnResizing,\n    TableColumnVisibility,\n    TableEditColumn,\n    TableFilterRow,\n    TableHeaderRow,\n    TableSelection,\n    Toolbar\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport {Column, CustomPaging, EditingState, Filter, FilteringState, PagingState, SelectionState, Sorting, SortingState, TableColumnWidthInfo} from \"@devexpress/dx-react-grid\";\nimport {getLocalDate} from \"../Dates\";\nimport axios from \"axios\";\nimport {SnackBarUtils} from \"../SnackBarUtils/SnackBarUtils\";\nimport {getRowId, Popup, PopupEditing} from \"../EditStudentColumn/EditStudentColumn\";\nimport _ from \"lodash\";\nimport {editStudent} from \"../../redux/actions/actionsAdmin\";\nimport {DxCustomFilter} from '../DxCustomFilter';\nimport {editColumnMessages, filterRowMessages} from \"../DxGridLocaleConfig\";\nimport StudentUserDataModal from \"../ModalUserData/ModalUserData\";\n\nfunction ModalStudentsCreatePrikazStudentsSelect(props: any) {\n    const [open, setOpen] = useState<boolean>(false)\n\n    const [page, setPage] = useState<number>(0)\n    const [pageSize, setPageSize] = useState<number>(6)\n\n    const [rows, setRows] = useState<any>([])\n    const [rowCount, setRowCount] = useState<number>(0)\n    const [selection, setSelection] = useState([]);\n\n    const [columns] = useState<Column[]>([\n        {name: 'userId', title: 'ID аккаунта'},\n        {name: 'kurs', title: 'Курс'},\n        {name: 'groupName', title: 'Группа'},\n        {name: 'formaObuch', title: 'Форма обучения'},\n        {name: 'surname', title: 'Фамилия'},\n        {name: 'name', title: 'Имя'},\n        {name: 'patronymic', title: 'Отчество'},\n        {name: 'gender', title: 'Пол'},\n        {name: 'birthday', title: 'Дата рождения'},\n        {name: 'age', title: 'Возраст'},\n        {name: 'diplomaId', title: 'Номер диплома'},\n        {name: 'prikaz', title: 'Зачислен по приказу (№)'},\n        {name: 'prikazDate', title: 'Дата зачисления'},\n        {name: 'startDate', title: 'Начало обучения'},\n        {name: 'finishDate', title: 'Конец обучения'},\n        {name: 'userData', title: 'Данные аккаунта'},\n    ])\n    const [columnsWidth] = useState<TableColumnWidthInfo[]>([\n        {columnName: 'userId', width: 160},\n        {columnName: 'kurs', width: 80},\n        {columnName: 'groupName', width: 100},\n        {columnName: 'formaObuch', width: 160},\n        {columnName: 'surname', width: 180},\n        {columnName: 'name', width: 180},\n        {columnName: 'patronymic', width: 180},\n        {columnName: 'gender', width: 100},\n        {columnName: 'birthday', width: 150},\n        {columnName: 'age', width: 150},\n        {columnName: 'diplomaId', width: 160},\n        {columnName: 'prikaz', width: 160},\n        {columnName: 'prikazDate', width: 160},\n        {columnName: 'startDate', width: 160},\n        {columnName: 'finishDate', width: 160},\n        {columnName: 'userData', width: 180},\n    ])\n\n\n    const [defaultHiddenColumnNames] = useState<string[]>([\n        'userId',\n        'groupName',\n        'formaObuch',\n        'prikaz',\n        'prikazDate',\n        'startDate',\n        'finishDate',\n        'userData',\n        'diplomaId',\n    ])\n    const [currentHiddenColumnNames, setCurrentHiddenColumnNames] = useState<string[]>(defaultHiddenColumnNames)\n\n    const [defaultFilters] = useState<Filter[]>([])\n    const [filters, setFilters] = useState<Filter[]>(defaultFilters)\n    const [filtersNeedReset, setFiltersNeedReset] = useState<boolean>(false)\n    const [filteringStateColumnExtensions] = useState([\n        {columnName: 'groupName', filteringEnabled: false},\n        {columnName: 'userData', filteringEnabled: false},\n    ])\n\n    const [sorting, setSorting] = useState<Sorting[]>([])\n    const [sortingStateColumnExtensions] = useState([\n        {columnName: 'groupName', sortingEnabled: false},\n        {columnName: 'userData', sortingEnabled: false},\n    ])\n\n    const [loading, setLoading] = useState<boolean>(true)\n\n    function openDialog() {\n        setOpen(true)\n    }\n\n    function closeDialog() {\n        setOpen(false)\n    }\n\n    //обновить список студентов\n    function updateList(): void {\n\n        setLoading(true)\n\n        axios.post(process.env.REACT_APP_ADMIN_STUDENTS_LIST_GET + ``,\n            {\n                offset: page * pageSize,\n                limit: pageSize,\n                page: page,\n                sort: sorting,\n                filters: filters,\n                ignoreInProgress: false,\n            }\n        )\n            .then((res) => {\n                setRows(res.data.data.students)\n                setRowCount(res.data.data.studentsCount)\n                setLoading(false)\n            })\n            .catch(e => {\n                const res = e.response\n                //check if tokens expired already\n                SnackBarUtils.error('Ошибка загрузки списка')\n\n            })\n    }\n\n    //задержка перед фильтрацией\n    const debouncedSetFilters = useCallback(_.debounce((e) => {\n        setFilters([...e, ...defaultFilters])\n    }, 400), [])\n\n    //получать новый лист при изменении параметров\n    useEffect(() => {\n        if (open) {\n            updateList()\n        }\n\n        // console.log(page * pageSize,( page + 1) * pageSize);\n    }, [page, sorting, filters, open])\n\n    //обновить лист в компоненте\n    useEffect(() => {\n        //сброс страницы на 0 если лист маленький\n        if (rowCount <= pageSize && filters?.length && open) {\n            setPage(0)\n            // console.log(props.Admin.studentsList.count, pageSize);\n            // console.log(page);\n        }\n\n    }, [rows])\n\n    useEffect(() => {\n        if (open) {\n            props.selectStudents(selection)\n        }\n    }, [selection])\n\n    //кастомный хендлер сортинга для сброса сортировки на 3-е нажатие\n    const onSortingChange = (newColumnsSort: Array<any>) => {\n        let indexToRemove = -1;\n        newColumnsSort.forEach((column, index) => {\n            let columnToCheck = sorting.filter(\n                (c) => c.columnName === column.columnName\n            );\n\n            if (\n                columnToCheck.length > 0 &&\n                columnToCheck[0].direction !== column.direction &&\n                column.direction === \"asc\"\n            ) {\n                indexToRemove = index;\n            }\n        });\n        if (indexToRemove > -1) newColumnsSort.splice(indexToRemove, 1);\n        setSorting(newColumnsSort);\n    }\n\n    //отправить запрос на изменение данных студента\n    const commitChanges = ({changed}: any) => {\n        // let changedRows;\n        if (changed) {\n            // changedRows = rows.map((row: any) => (changed[row.id] ? {...row, ...changed[row.id]} : row));\n\n            const editedUserId: number = parseInt(Object.keys(changed)[0])\n            const editedData: any = changed[editedUserId]\n\n            console.log(changed)\n\n            if (editedData) {\n                props.editStudent(editedUserId, editedData, () => {\n                    updateList()\n                })\n            }\n        }\n    };\n\n    //компонент форматирования формы обучения\n    const FormaObuchComponent = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <span\n                >\n                    {row.formaObuch ? 'платная' : 'бюджетная'}\n                 </span>\n            </Table.Cell>\n        )\n    })\n\n    //компонент просмотра инфы о акке студента\n    const StudentLoginData = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <StudentUserDataModal userId={row.userId}/>\n            </Table.Cell>\n        )\n    })\n\n    //компаратор для специфичных колонок\n    const Cell = React.memo((cellProps: any) => {\n        const {column, row} = cellProps;\n\n        if (column.name === 'birthday') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.birthday)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'startDate') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.startDate)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'finishDate') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.finishDate)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'formaObuch') {\n            return <FormaObuchComponent {...cellProps} />;\n        }\n\n        if (column.name === 'userData') {\n            return <StudentLoginData {...cellProps} />;\n        }\n\n        return <Table.Cell {...cellProps} />;\n    })\n\n    return (\n        <>\n            <Button color={'primary'}\n                    variant={'contained'}\n                    onClick={() => {\n                        openDialog()\n                    }}\n            >\n                Выбрать студентов\n            </Button>\n            <Dialog\n                open={open}\n                maxWidth={'lg'}\n                fullWidth={true}\n                onClose={closeDialog}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\" style={{padding: '16px 24px 0 24px'}}>\n                    <div className={\"table-description\"}>\n                        <Typography variant={'h6'}>\n                            Студенты группы {props.groupName}\n                        </Typography>\n                        <div className={'table-controls'}>\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        updateList()\n                                    }}\n                            >\n                                Обновить\n                            </Button>\n                        </div>\n                    </div>\n                </DialogTitle>\n                <DialogContent style={{padding: '0'}}>\n                    <DxGrid\n                        rows={rows}\n                        columns={columns}\n                        getRowId={getRowId}\n                    >\n                        <Toolbar/>\n                        <FilteringState\n                            columnExtensions={filteringStateColumnExtensions}\n                            onFiltersChange={debouncedSetFilters}\n                        />\n                        <SortingState\n                            sorting={sorting}\n                            onSortingChange={onSortingChange}\n                            columnExtensions={sortingStateColumnExtensions}\n                        />\n                        <PagingState\n                            currentPage={page}\n                            onCurrentPageChange={setPage}\n                            pageSize={pageSize}\n                        />\n                        <CustomPaging\n                            totalCount={rowCount}\n                        />\n                        <EditingState\n                            onCommitChanges={commitChanges}\n                        />\n                        <SelectionState\n                            selection={selection}\n                            // @ts-ignore\n                            onSelectionChange={setSelection}\n                        />\n\n                        <Table\n                            cellComponent={Cell}\n                        />\n                        <TableColumnResizing\n                            defaultColumnWidths={columnsWidth}\n                        />\n                        <TableColumnVisibility\n                            defaultHiddenColumnNames={defaultHiddenColumnNames}\n                            onHiddenColumnNamesChange={setCurrentHiddenColumnNames}\n\n                        />\n                        <TableHeaderRow\n                            showSortingControls\n                        />\n                        <TableEditColumn\n                            showEditCommand\n                            messages={editColumnMessages}\n                        />\n                        <TableSelection/>\n\n                        <PopupEditing popupComponent={Popup}/>\n                        <TableFilterRow\n                            messages={filterRowMessages}\n                            editorComponent={(p: any) => (\n                                <DxCustomFilter\n                                    filtersNeedReset={filtersNeedReset}\n                                    setFiltersNeedReset={setFiltersNeedReset}\n                                    {...p}/>\n                            )}\n                        />\n                        <PagingPanel/>\n                        <ColumnChooser/>\n\n                    </DxGrid>\n                    {loading && <Loading/>}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={closeDialog} color=\"primary\">\n                        Закрыть\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        editStudent: (userId: number, values: any, cb: Function) => {\n            dispatch(editStudent(userId, values, cb))\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ModalStudentsCreatePrikazStudentsSelect))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\Loading\\Loading.tsx",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalPrikazZachislenie\\ModalPrikazZachislenie.tsx",["273"],"import React, {useCallback, useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, TextField} from \"@material-ui/core\";\nimport {useDropzone} from \"react-dropzone\";\nimport './ModalPrikazZachislenie.scss'\nimport {SnackBarUtils} from \"../SnackBarUtils/SnackBarUtils\";\nimport axios from \"axios\";\nimport {Loading} from \"../Loading/Loading\";\nimport {DatePicker} from \"@material-ui/pickers\";\nimport {downloadImportStudentsTemplate} from \"../../redux/actions/actionsAdmin\";\n\nfunction ModalPrikazZachislenie(props: any) {\n    const [open, setOpen] = useState(false);\n\n    const [prikazNumber, setPrikazNumber] = useState<number | string>('');\n    const [group] = useState<number>(props.groupId)\n    const [file, setFile] = useState<any>();\n    const [prikazDate, setPrikazDate] = useState<string | Date>(new Date());\n\n    const [loading, setLoading] = useState<boolean>(false);\n\n    const onDrop = useCallback(acceptedFiles => {\n        // Do something with the files\n        if (acceptedFiles?.length) {\n            SnackBarUtils.info('Файл выбран')\n            setFileName(acceptedFiles[0].name)\n            setFile(acceptedFiles[0])\n        } else {\n            SnackBarUtils.warning('Вы должны выбрать только 1 файл!')\n        }\n    }, [])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({\n        onDrop,\n        accept: '.xls,.xlsx',\n        maxFiles: 1,\n    })\n    const [fileName, setFileName] = useState<string>('');\n\n    useEffect(() => {\n        setPrikazNumber('')\n        setFile(undefined)\n        setPrikazDate(new Date())\n        setFileName('')\n    }, [open])\n\n    function openDialog() {\n        setOpen(true)\n    }\n\n    function closeDialog() {\n        setOpen(false)\n    }\n\n    function handleSubmit() {\n        if (group !== undefined && prikazNumber && file !== undefined) {\n            setLoading(true)\n            const formData = new FormData();\n\n            formData.append('excelFile', file);\n            formData.append('group', group.toString());\n            formData.append('prikazNumber', prikazNumber.toString());\n            formData.append('prikazDate', prikazDate.toString());\n\n            axios.post(process.env.REACT_APP_ADMIN_PRIKAZ_ZACHISLENIE + ``,\n                formData,\n            )\n                .then((res) => {\n                    setLoading(false)\n                    props.updateList()\n                    setOpen(false)\n                    SnackBarUtils.success('Приказ создан!')\n\n                })\n                .catch(e => {\n                    const res = e.response\n                    //check if tokens expired already\n                    SnackBarUtils.error('Ошибка создания приказа. Проверьте соответствия документа шаблону.')\n                    setLoading(false)\n                    setOpen(false)\n                })\n        } else {\n            SnackBarUtils.warning('Заполните все поля')\n        }\n    }\n\n    return (\n        <>\n            <Button color={'primary'}\n                    variant={'contained'}\n                    style={{marginRight: '25px'}}\n                    onClick={() => {\n                        openDialog()\n                    }}\n            >\n                Зачислить\n            </Button>\n            <Dialog\n                open={open}\n                maxWidth={'md'}\n                fullWidth={true}\n                onClose={closeDialog}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Зачисление студентов (создание приказа о зачислении и добавление студентов)</DialogTitle>\n                <Button color={'primary'}\n                        variant={'contained'}\n                        style={{marginRight: '25px'}}\n                        onClick={() => {\n                            props.downloadImportStudentsTemplate()\n                        }}\n                >\n                    Шаблон для зачисления\n                </Button>\n                <DialogContent>\n                    <Grid container spacing={2}>\n\n                        <Grid item xs={12} md={6}>\n                            <TextField\n                                margin=\"normal\"\n                                name=\"prikazNumber\"\n                                label=\"Номер приказа\"\n                                type={'number'}\n                                value={prikazNumber}\n                                style={{width: '100%'}}\n                                onChange={(e: any) => {\n                                    const value = e.target.value\n                                    if (!isNaN(parseInt(value)) || value === '') {\n                                        setPrikazNumber(value)\n                                    } else {\n                                        e.preventDefault()\n                                    }\n                                }}\n                            />\n\n                            <DatePicker\n                                margin={'normal'}\n                                label=\"Дата приказа\"\n                                format=\"yyyy-MM-dd\"\n                                value={prikazDate || new Date()}\n                                cancelLabel={'отмена'}\n                                style={{width: '100%'}}\n                                onChange={(e: any) => {\n                                    setPrikazDate(e)\n                                }}\n                            />\n\n\n                        </Grid>\n\n                        <Grid item xs={12} md={6}>\n                            <TextField\n                                margin=\"normal\"\n                                name=\"fileName\"\n                                label=\"Выбранный файл\"\n                                value={fileName}\n                                disabled={true}\n                                style={{width: '100%'}}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12} md={12}>\n                            <div {...getRootProps()} className={'students-import-zone'}>\n                                <input {...getInputProps()} />\n                                {\n                                    isDragActive ?\n                                        <p>Перетащите сюда файл...</p> :\n                                        <p>Выберите или перетащите сюда Excel документ со студентами</p>\n                                }\n                            </div>\n                        </Grid>\n\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={closeDialog} color=\"primary\">\n                        Отмена\n                    </Button>\n                    <Button onClick={() => {\n                        handleSubmit()\n                    }} color=\"primary\">\n                        Зачислить\n                    </Button>\n                </DialogActions>\n                {loading && <Loading/>}\n            </Dialog>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {}\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        downloadImportStudentsTemplate: () => {\n            dispatch(downloadImportStudentsTemplate())\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ModalPrikazZachislenie))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalOrders\\ModalOrders.tsx",["274","275","276","277","278","279"],"import React, {useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {Loading} from '../Loading/Loading';\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, Typography} from \"@material-ui/core\";\nimport {Grid as DxGrid, PagingPanel, Table, TableColumnResizing, TableHeaderRow} from \"@devexpress/dx-react-grid-material-ui\";\nimport {Column, CustomPaging, Filter, PagingState, Sorting, SortingState, TableColumnWidthInfo} from \"@devexpress/dx-react-grid\";\nimport {getLocalPlainDateTime} from \"../Dates\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {SnackBarUtils} from \"../SnackBarUtils/SnackBarUtils\";\nimport fileDownload from 'js-file-download';\nimport PrepareOrder from \"../ModalOrderPrepare/ModalOrderPrepareSpravkaObObucheni\";\nimport ModalStudentData from \"../ModalStudentData/ModalStudentData\";\n\nfunction ModalOrders(props: any) {\n    const userId = props.userId\n\n    const [open, setOpen] = useState<boolean>(false)\n\n    const [page, setPage] = useState<number>(0)\n    const [pageSize, setPageSize] = useState<number>(6)\n\n    const [rows, setRows] = useState<any>([])\n    const [rowCount, setRowCount] = useState<number>(0)\n\n    const [columns] = useState<Column[]>([\n        {name: 'id', title: 'Номер'},\n        {name: 'title', title: 'Название'},\n        {name: 'status', title: 'Статус'},\n        {name: 'createdAt', title: 'Дата заказа'},\n        {name: 'actions', title: 'Действия'},\n        {name: 'download', title: 'Документ'},\n        {name: 'userData', title: 'Инф. о студенте'},\n    ])\n    const [columnsWidth] = useState<TableColumnWidthInfo[]>([\n        {columnName: 'id', width: 130},\n        {columnName: 'title', width: 220},\n        {columnName: 'status', width: 120},\n        {columnName: 'createdAt', width: 160},\n        {columnName: 'userData', width: 160},\n        {columnName: 'actions', width: 320},\n        {columnName: 'download', width: 220},\n    ])\n    const [defaultHiddenColumnNames] = useState<string[]>([\n        'userId',\n        'surname',\n        'name',\n        'patronymic',\n        'formaObuch',\n    ])\n\n    const [filters, setFilters] = useState<Filter[]>([])\n    const [filteringStateColumnExtensions] = useState([\n        {columnName: 'status', filteringEnabled: false},\n        {columnName: 'userData', filteringEnabled: false},\n    ])\n\n    const [sorting, setSorting] = useState<Sorting[]>([])\n    const [sortingStateColumnExtensions] = useState([\n        {columnName: 'userData', sortingEnabled: false},\n        // {columnName: 'documentRequestsList', sortingEnabled: false},\n    ])\n\n    const [orderListLoading, setOrderListLoading] = useState(true)\n\n    function openDialog() {\n        setOpen(true)\n    }\n\n    function closeDialog() {\n        setOpen(false)\n    }\n\n    function updateList() {\n        setOrderListLoading(true)\n        axios.post(process.env.REACT_APP_ORDERS + ``,\n            {\n                userId: userId,\n                limit: pageSize,\n                offset: page * pageSize,\n                sorting: sorting,\n            })\n            .then((res: AxiosResponse) => {\n                setRows(res.data.data.orders)\n                setRowCount(res.data.data.ordersCount)\n\n                setOrderListLoading(false)\n            })\n            .catch(() => {\n                SnackBarUtils.error('Ошибка загрузки данных студента')\n                // setOpen(false)\n            })\n    }\n\n    //получать новый лист при изменении параметров\n    useEffect(() => {\n        if (open) {\n            updateList()\n        }\n    }, [open, page, pageSize, sorting])\n\n    const Cell = React.memo((cellProps: any) => {\n        const {column, row} = cellProps;\n\n        if (column.name === 'status') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>{\n                        row.status === 0\n                            ? 'Готово'\n                            : row.status === 1 ? 'В обработке' : row.status === -1 ? 'Отклонено' : 'Ошибка'}</span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'createdAt') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalPlainDateTime(row.createdAt)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'download') {\n            return (\n                <Table.Cell {...cellProps}>\n\n                    <PrepareOrder updateList={updateList} row={row}/>\n                    {row.documentPath && row.fullFilled\n                        ? (\n                            <Button color={'default'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        // setIsSubmitting(true)\n                                        axios.get(process.env.REACT_APP_ADMIN_DOWNLOAD + `?orderId=${row.id}`,\n                                            {\n                                                responseType: 'arraybuffer'\n                                            })\n                                            .then((r: AxiosResponse) => {\n                                                fileDownload(r.data, row.id);\n                                            })\n                                            .catch(() => {\n                                                SnackBarUtils.error('Ошибка получения данных')\n                                            })\n                                            .finally(() => {\n                                                // setIsSubmitting(false)\n                                            })\n                                    }}\n                            >\n                                Скачать\n                            </Button>\n                        )\n                        : ''}\n\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'actions') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <Button color={'secondary'}\n                            variant={'contained'}\n                            onClick={async () => {\n                                if (!orderListLoading) {\n                                    setOrderListLoading(true)\n                                    await axios.post(process.env.REACT_APP_ADMIN_ORDERS_UPDATE + ``,\n                                        {\n                                            orderId: row.id,\n                                            status: -1,\n                                        }, {\n                                            responseType: 'arraybuffer'\n                                        })\n                                        .then((r: AxiosResponse) => {\n\n                                        })\n                                        .catch(() => {\n                                            SnackBarUtils.error('Ошибка')\n                                        })\n                                        .finally(() => {\n                                            updateList()\n                                        })\n                                }\n                            }}\n                            disabled={row.status === -1}\n                    >\n                        Отказ\n                    </Button>\n                    <Button color={'default'}\n                            variant={'contained'}\n                            onClick={async () => {\n                                if (!orderListLoading) {\n                                    setOrderListLoading(true)\n                                    await axios.post(process.env.REACT_APP_ADMIN_ORDERS_UPDATE + ``,\n                                        {\n                                            orderId: row.id,\n                                            status: 1,\n                                        }, {\n                                            responseType: 'arraybuffer'\n                                        })\n                                        .then((r: AxiosResponse) => {\n\n                                        })\n                                        .catch(() => {\n                                            SnackBarUtils.error('Ошибка')\n                                        })\n                                        .finally(() => {\n                                            updateList()\n                                        })\n                                }\n                            }}\n                            disabled={row.status === 1}\n                    >\n                        Обработка\n                    </Button>\n                    <Button color={'primary'}\n                            variant={'contained'}\n                            onClick={async () => {\n                                if (!orderListLoading) {\n                                    setOrderListLoading(true)\n                                    await axios.post(process.env.REACT_APP_ADMIN_ORDERS_UPDATE + ``,\n                                        {\n                                            orderId: row.id,\n                                            status: 0,\n                                        }, {\n                                            responseType: 'arraybuffer'\n                                        })\n                                        .then((r: AxiosResponse) => {\n\n                                        })\n                                        .catch(() => {\n                                            SnackBarUtils.error('Ошибка')\n                                        })\n                                        .finally(() => {\n                                            updateList()\n                                        })\n                                }\n                            }}\n                            disabled={row.status === 0}\n                    >\n                        Принять\n                    </Button>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'userData') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <ModalStudentData userId={row.userId}/>\n                </Table.Cell>\n            )\n        }\n\n        return <Table.Cell {...cellProps} />;\n    })\n\n    const onSortingChange = (newColumnsSort: Array<any>) => {\n        let indexToRemove = -1;\n        newColumnsSort.forEach((column, index) => {\n            let columnToCheck = sorting.filter(\n                (c) => c.columnName === column.columnName\n            );\n\n            if (\n                columnToCheck.length > 0 &&\n                columnToCheck[0].direction !== column.direction &&\n                column.direction === \"asc\"\n            ) {\n                indexToRemove = index;\n            }\n        });\n        if (indexToRemove > -1) newColumnsSort.splice(indexToRemove, 1);\n        setSorting(newColumnsSort);\n    }\n\n    return (\n        <>\n            <Button color={'primary'}\n                    variant={'contained'}\n                    onClick={() => {\n                        openDialog()\n                    }}\n            >\n                Показать\n            </Button>\n            <Dialog\n                open={open}\n                maxWidth={'lg'}\n                fullWidth={true}\n                onClose={closeDialog}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">\n                    <div className={\"table-description\"}>\n                        <Typography variant={'h6'}>\n                            Заказы студента {props.studentName}\n                        </Typography>\n                        <div className={'table-controls'}>\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        updateList()\n                                    }}\n                            >\n                                Обновить\n                            </Button>\n                        </div>\n                    </div>\n                </DialogTitle>\n                <DialogContent>\n\n                    <DxGrid\n                        rows={rows}\n                        columns={columns}\n                    >\n                        <SortingState\n                            sorting={sorting}\n                            onSortingChange={onSortingChange}\n                            columnExtensions={sortingStateColumnExtensions}\n                        />\n                        <PagingState\n                            currentPage={page}\n                            onCurrentPageChange={setPage}\n                            pageSize={pageSize}\n                        />\n                        <CustomPaging\n                            totalCount={rowCount}\n                        />\n                        <Table\n                            cellComponent={Cell}\n                        />\n                        <TableColumnResizing\n                            defaultColumnWidths={columnsWidth}\n                        />\n                        <TableHeaderRow\n                            showSortingControls\n                        />\n                        <PagingPanel/>\n                    </DxGrid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={closeDialog} color=\"primary\">\n                        Закрыть\n                    </Button>\n                </DialogActions>\n                {orderListLoading && <Loading/>}\n            </Dialog>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ModalOrders))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalUserData\\ModalUserData.tsx",["280","281"],"import React, {useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {Loading} from '../Loading/Loading';\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, FormGroup, Grid, IconButton, InputAdornment, TextField} from \"@material-ui/core\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {SnackBarUtils} from \"../SnackBarUtils/SnackBarUtils\";\nimport {getLocalPlainDateTime} from \"../Dates\";\nimport {Visibility, VisibilityOff} from '@material-ui/icons';\n\nfunction ModalUserData(props: any) {\n    const [open, setOpen] = useState(false);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [originalUsername, setOriginalUsername] = useState('');\n    const [username, setUsername] = useState('Загрузка...');\n    const [password, setPassword] = useState('Загрузка...');\n    const [passwordVisible, setPasswordVisible] = useState(false);\n    const [lastLogin, setLastLogin] = useState('Загрузка...');\n    const [status, setStatus] = useState(-1);\n    const [loading, setLoading] = useState(true);\n\n    function openDialog() {\n        setOpen(true)\n    }\n\n    function closeDialog() {\n        if (!isSubmitting) {\n            setOpen(false)\n        }\n    }\n\n    function handleSubmit(username: any, password: any, status: any) {\n        setLoading(true)\n        axios.post(process.env.REACT_APP_ADMIN_STUDENT_EDIT_CREDENTIALS + ``,\n            {\n                original_username: originalUsername,\n                username: username,\n                password: password,\n                status: status,\n            })\n            .then((res: AxiosResponse) => {\n                SnackBarUtils.success('Данные обновлены')\n\n                setLoading(false)\n                setOpen(false)\n            })\n            .catch(() => {\n                SnackBarUtils.error('Ошибка обновления данных студента')\n                setOpen(false)\n            })\n    }\n\n    useEffect(() => {\n        if (open) {\n            setLoading(true)\n\n            axios.get(process.env.REACT_APP_ADMIN_STUDENT_CREDENTIALS + `?userId=${props.userId}`)\n                .then((res: AxiosResponse) => {\n                    const _username: string = res.data.data.username\n                    const _password: string = res.data.data.password\n                    const _status: string = res.data.data.status\n                    const _lastLogin: string = res.data.data.lastLogin\n\n                    setUsername(_username)\n                    setOriginalUsername(_username)\n                    setPassword(_password)\n                    setStatus(parseInt(_status))\n                    setLastLogin(_lastLogin)\n\n                    setLoading(false)\n                })\n                .catch(() => {\n                    SnackBarUtils.error('Ошибка загрузки данных студента')\n                    setOpen(false)\n                })\n        }\n    }, [open])\n\n    return (\n        <>\n            <Button color={'primary'}\n                    variant={'contained'}\n                    onClick={() => {\n                        openDialog()\n                    }}\n            >\n                Показать\n            </Button>\n            <Dialog\n                open={open}\n                maxWidth={'sm'}\n                fullWidth={true}\n                onClose={closeDialog}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <form onSubmit={(e: any) => {\n                    e.preventDefault()\n                    handleSubmit(\n                        username,\n                        password,\n                        status\n                    )\n                }}>\n                    <DialogTitle id=\"form-dialog-title\">Данные входа</DialogTitle>\n                    <DialogContent>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} md={6}>\n                                <FormGroup>\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"username\"\n                                        label=\"Логин\"\n                                        value={username}\n                                        onChange={(e) => {\n                                            setUsername(e.target.value)\n                                        }}\n                                    />\n\n                                    {/*<FormControl margin={'normal'}>*/}\n                                    {/*    <InputLabel>Статус</InputLabel>*/}\n                                    {/*    <Select*/}\n                                    {/*        native*/}\n                                    {/*        name={'status'}*/}\n                                    {/*        value={status}*/}\n                                    {/*        onChange={(e: any) => {*/}\n                                    {/*            setStatus(parseInt(e.target.value))*/}\n                                    {/*        }}*/}\n                                    {/*    >*/}\n                                    {/*        <option value={0}>Активен</option>*/}\n                                    {/*        <option value={1}>Заблокирован</option>*/}\n                                    {/*        <option value={2}>Приостановлен</option>*/}\n                                    {/*    </Select>*/}\n                                    {/*</FormControl>*/}\n                                </FormGroup>\n                            </Grid>\n\n                            <Grid item xs={12} md={6}>\n                                <FormGroup>\n\n                                    <TextField\n                                        margin=\"normal\"\n                                        label=\"Пароль\"\n                                        name=\"password\"\n                                        type={passwordVisible ? 'text' : 'password'}\n                                        value={password}\n                                        onChange={(e) => {\n                                            setPassword(e.target.value)\n                                        }}\n                                        InputProps={{\n                                            endAdornment: (\n                                                <InputAdornment position=\"end\">\n                                                    <IconButton\n                                                        aria-label=\"toggle password visibility\"\n                                                        onClick={() => {\n                                                            setPasswordVisible(!passwordVisible)\n                                                        }}\n                                                    >\n                                                        {passwordVisible ? <Visibility/> : <VisibilityOff/>}\n                                                    </IconButton>\n                                                </InputAdornment>\n                                            )\n                                        }}\n                                    />\n\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"lastLogin\"\n                                        label=\"Последний вход\"\n                                        value={lastLogin && lastLogin !== 'Загрузка...' ? getLocalPlainDateTime(lastLogin) : '-'}\n                                    />\n                                </FormGroup>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={closeDialog} color=\"primary\">\n                            Отмена\n                        </Button>\n                        <Button type={'submit'} color=\"primary\">\n                            Сохранить\n                        </Button>\n                    </DialogActions>\n                </form>\n                {loading && <Loading/>}\n            </Dialog>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ModalUserData))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\EditStudentColumn\\EditStudentColumn.tsx",["282","283"],"//ctrl+c ctrl+v material-ui.com editing rows\nimport React, {useEffect, useState} from \"react\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {SnackBarUtils} from \"../SnackBarUtils/SnackBarUtils\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, FormGroup, Grid, InputLabel, Select, TextField} from \"@material-ui/core\";\nimport {Plugin, Template, TemplateConnector, TemplatePlaceholder} from \"@devexpress/dx-react-core\";\nimport {DatePicker} from \"@material-ui/pickers\";\nimport {getLocalDate} from \"../Dates\";\n\nexport const getRowId = (row: any) => row.userId\nexport const Popup = React.memo(({\n                                     row,\n                                     onChange,\n                                     onApplyChanges,\n                                     onCancelChanges,\n                                     open,\n                                 }: any) => {\n    const [student, setStudent] = useState<string>('')\n    const [groups, setGroups] = useState<any>([])\n    const [groupsLoading, setGroupsLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        if (open) {\n            setGroups([])\n            setGroupsLoading(true)\n            setStudent(`${row.surname} ${row.name} ${row.patronymic}`)\n\n            axios.get(process.env.REACT_APP_ADMIN_STUDENT_EDIT_GETALL_GROUPS + ``)\n                .then((res: AxiosResponse) => {\n                    const _groups: Array<any> = res.data.data\n                    setGroups(_groups)\n                    setGroupsLoading(false)\n                })\n                .catch(() => {\n                    SnackBarUtils.error('Ошибка загрузки списка групп')\n                    setGroups(false)\n                    setGroupsLoading(false)\n                })\n        }\n    }, [open])\n\n    return (\n        <Dialog\n            open={open}\n            fullWidth={true}\n            maxWidth={'md'}\n            onClose={onCancelChanges}\n            aria-labelledby=\"form-dialog-title\"\n        >\n            <DialogTitle id=\"form-dialog-title\">Редактирование студента {student}</DialogTitle>\n            <DialogContent>\n                <Grid container spacing={3}>\n\n                    <Grid item xs={12} md={6}>\n                        <FormGroup>\n\n                            <TextField\n                                margin=\"normal\"\n                                name=\"surname\"\n                                label=\"Фамилия\"\n                                value={row.surname || ''}\n                                onChange={onChange}\n                            />\n\n                            <TextField\n                                margin=\"normal\"\n                                name=\"name\"\n                                label=\"Имя\"\n                                value={row.name || ''}\n                                onChange={onChange}\n                            />\n\n                            <TextField\n                                margin=\"normal\"\n                                name=\"patronymic\"\n                                label=\"Отчество\"\n                                value={row.patronymic || ''}\n                                onChange={onChange}\n                            />\n\n                            <FormControl margin={'normal'}>\n                                <InputLabel>Пол</InputLabel>\n                                <Select\n                                    native\n                                    name={'gender'}\n                                    defaultValue={row.gender}\n                                    onChange={onChange}\n                                >\n                                    <option value={'мужской'}>Мужской</option>\n                                    <option value={'женский'}>Женский</option>\n                                </Select>\n                            </FormControl>\n\n                        </FormGroup>\n                    </Grid>\n\n                    <Grid item xs={12} md={6}>\n                        <FormGroup>\n\n                            <FormControl margin={'normal'}>\n                                <InputLabel>Форма обучения</InputLabel>\n                                <Select\n                                    native\n                                    name={'formaObuch'}\n                                    defaultValue={row.formaObuch}\n                                    onChange={onChange}\n                                >\n                                    <option value={0}>Бюджетная</option>\n                                    <option value={1}>Платная</option>\n                                </Select>\n                            </FormControl>\n\n                            <FormControl margin={'normal'}>\n                                <InputLabel>Группа</InputLabel>\n                                <Select\n                                    native\n                                    name={'group'}\n                                    value={row.group}\n                                    disabled={groupsLoading || !groups?.length}\n                                    onChange={onChange}\n                                >\n                                    {\n                                        !groupsLoading\n                                            ?\n                                            groups?.length\n                                                ? (\n                                                    <>\n                                                        {\n                                                            [1, 2, 3, 4].map((kurs) => {\n                                                                return <optgroup key={kurs} label={`${kurs} курс`}>\n                                                                    {\n                                                                        groups.map((el: any, i: number, arr: Array<any>) => {\n                                                                            if (kurs === el.kurs) {\n                                                                                return (\n                                                                                    <option key={el.id} value={el.id}>{el.groupName}</option>\n                                                                                )\n                                                                            } else {\n\n                                                                            }\n                                                                        })\n                                                                    }\n                                                                </optgroup>\n                                                            })\n                                                        }\n                                                    </>\n                                                )\n\n                                                : <option key={-2} value={-1}>Ошибка загрузки</option>\n                                            : <option key={-1} value={-1}>Загрузка...</option>\n                                    }\n                                </Select>\n                            </FormControl>\n\n\n                            <DatePicker\n                                margin={'normal'}\n                                label=\"Дата рождения\"\n                                format=\"yyyy-MM-dd\"\n                                value={row.birthday}\n                                cancelLabel={'отмена'}\n                                onChange={(e: any) => {\n                                    onChange({\n                                        target: {\n                                            name: 'birthday',\n                                            value: getLocalDate(e),\n                                        }\n                                    })\n                                }}\n                            />\n\n                            <TextField\n                                margin=\"normal\"\n                                name=\"diplomaId\"\n                                label=\"Номер диплома\"\n                                value={row.diplomaId || ''}\n                                disabled={row.kurs !== 4}\n                                onChange={onChange}\n                            />\n                        </FormGroup>\n                    </Grid>\n\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onCancelChanges} color=\"primary\">\n                    Отмена\n                </Button>\n                <Button onClick={onApplyChanges} color=\"primary\">\n                    Сохранить\n                </Button>\n            </DialogActions>\n        </Dialog>)\n})\n\nexport const PopupEditing = React.memo(({popupComponent: Popup}: any) => (\n    <Plugin>\n        <Template name=\"popupEditing\">\n            <TemplateConnector>\n                {(\n                    {\n                        rows,\n                        getRowId,\n                        addedRows,\n                        editingRowIds,\n                        createRowChange,\n                        rowChanges,\n                    },\n                    {\n                        changeRow, changeAddedRow, commitChangedRows, commitAddedRows,\n                        stopEditRows, cancelAddedRows, cancelChangedRows,\n                    },\n                ) => {\n                    const isNew = addedRows.length > 0;\n                    let editedRow: any;\n                    let rowId: any;\n                    if (isNew) {\n                        rowId = 0;\n                        editedRow = addedRows[rowId];\n                    } else {\n                        [rowId] = editingRowIds;\n                        const targetRow = rows.filter((row: any) => getRowId(row) === rowId)[0];\n                        editedRow = {...targetRow, ...rowChanges[rowId]};\n                    }\n\n                    const processValueChange = ({target: {name, value}}: any) => {\n                        const changeArgs = {\n                            rowId,\n                            change: createRowChange(editedRow, value, name),\n                        };\n                        if (isNew) {\n                            changeAddedRow(changeArgs);\n                        } else {\n                            changeRow(changeArgs);\n                        }\n                    };\n                    const rowIds = isNew ? [0] : editingRowIds;\n                    const applyChanges = () => {\n                        if (isNew) {\n                            commitAddedRows({rowIds});\n                        } else {\n                            stopEditRows({rowIds});\n                            commitChangedRows({rowIds});\n                        }\n                    };\n                    const cancelChanges = () => {\n                        if (isNew) {\n                            cancelAddedRows({rowIds});\n                        } else {\n                            stopEditRows({rowIds});\n                            cancelChangedRows({rowIds});\n                        }\n                    };\n\n                    const open = editingRowIds.length > 0 || isNew;\n\n                    return (\n                        <Popup\n                            open={open}\n                            row={editedRow}\n                            onChange={processValueChange}\n                            onApplyChanges={applyChanges}\n                            onCancelChanges={cancelChanges}\n                        />\n                    );\n                }}\n            </TemplateConnector>\n        </Template>\n        <Template name=\"root\">\n            <TemplatePlaceholder/>\n            <TemplatePlaceholder name=\"popupEditing\"/>\n        </Template>\n    </Plugin>\n))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\EditPrikazColumn\\EditPrikazColumn.tsx",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\HeaderBar\\HeaderBar.tsx",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalCreateNewModerator\\ModalCreateNewModerator.tsx",["284"],"import React, {useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, TextField} from \"@material-ui/core\";\nimport './ModalCreateNewModerator.scss'\nimport {Loading} from \"../Loading/Loading\";\nimport {downloadImportStudentsTemplate} from \"../../redux/actions/actionsAdmin\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {SnackBarUtils} from \"../SnackBarUtils/SnackBarUtils\";\n\nfunction ModalCreateNewModerator(props: any) {\n    const [open, setOpen] = useState(false);\n\n    const [fio, setFio] = useState<string>('');\n    const [password, setPassword] = useState<string>('');\n\n    const [loading, setLoading] = useState<boolean>(false);\n\n    //получить список приказов\n    useEffect(() => {\n        if (open) {\n\n        } else {\n\n        }\n    }, [open])\n\n    useEffect(() => {\n        if (open) {\n\n        } else {\n\n        }\n    }, [])\n\n    function openDialog(): void {\n        setOpen(true)\n    }\n\n    function closeDialog(): void {\n        setOpen(false)\n    }\n\n    function handleSubmit(): void {\n        setLoading(true)\n        axios.post(process.env.REACT_APP_ADMIN_MODERATORS_CREATE + ``,\n            {\n                fio: fio,\n                password: password,\n            })\n            .then((r: AxiosResponse) => {\n                SnackBarUtils.success('Администратор создан')\n                props.updateList()\n                setOpen(false)\n            })\n            .catch((e) => {\n                SnackBarUtils.error('Ошибка создания администратора')\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }\n\n    return (\n        <>\n            <Button color={'primary'}\n                    variant={'contained'}\n                    style={{marginRight: '25px'}}\n                    onClick={() => {\n                        openDialog()\n                    }}\n            >\n                Создать\n            </Button>\n            <Dialog\n                open={open}\n                maxWidth={'md'}\n                fullWidth={true}\n                onClose={closeDialog}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Добавление администратора</DialogTitle>\n                <DialogContent>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} md={12}>\n                            <TextField\n                                margin=\"normal\"\n                                label=\"ФИО\"\n                                value={fio}\n                                style={{width: '100%'}}\n                                onChange={(e) => {\n                                    setFio(e.target.value)\n                                }}\n                            />\n\n                            <TextField\n                                margin=\"normal\"\n                                label=\"Пароль\"\n                                value={password}\n                                style={{width: '100%'}}\n                                onChange={(e) => {\n                                    setPassword(e.target.value)\n                                }}/>\n                        </Grid>\n\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={closeDialog} color=\"primary\">\n                        Отмена\n                    </Button>\n                    <Button onClick={() => {\n                        handleSubmit()\n                    }} color=\"primary\">\n                        Создать\n                    </Button>\n                </DialogActions>\n                {loading && <Loading/>}\n            </Dialog>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {}\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        downloadImportStudentsTemplate: () => {\n            dispatch(downloadImportStudentsTemplate())\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ModalCreateNewModerator))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Groups\\Groups.tsx",["285","286","287","288","289"],"import React, {useCallback, useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {deleteGroup, editGroup, getGroupsList} from \"../../../redux/actions/actionsAdmin\";\nimport Paper from '@material-ui/core/Paper';\nimport {Column, CustomPaging, EditingState, Filter, FilteringState, PagingState, Sorting, SortingState, TableColumnWidthInfo,} from '@devexpress/dx-react-grid';\nimport {\n    ColumnChooser,\n    Grid as DxGrid,\n    PagingPanel,\n    Table,\n    TableColumnResizing,\n    TableColumnVisibility,\n    TableEditColumn,\n    TableFilterRow,\n    TableHeaderRow,\n    Toolbar,\n} from '@devexpress/dx-react-grid-material-ui';\nimport {Loading} from '../../../additional_components/Loading/Loading';\nimport HeaderBar from '../../../additional_components/HeaderBar/HeaderBar';\nimport {Button, Container, Typography} from \"@material-ui/core\";\nimport './Groups.scss'\nimport {getRowId, Popup, PopupEditing} from '../../../additional_components/EditGroupColumn/EditGroupColumn';\nimport _ from \"lodash\";\nimport {getLocalDate} from \"../../../additional_components/Dates\";\nimport ModalGroupCreate from \"../../../additional_components/ModalGroupCreate/ModalGroupCreate\";\nimport ModalStudents from \"../../../additional_components/ModalStudents/ModalStudents\";\nimport {DxCustomFilter} from '../../../additional_components/DxCustomFilter';\nimport {editColumnMessages, filterRowMessages} from \"../../../additional_components/DxGridLocaleConfig\";\n\nfunction Groups(props: any) {\n    const [page, setPage] = useState<number>(0)\n    const [pageSize, setPageSize] = useState<number>(7)\n\n    const [rows, setRows] = useState<any>([])\n    const [rowCount, setRowCount] = useState<number>(0)\n\n    const [columns] = useState<Column[]>([\n        {name: 'id', title: 'ID'},\n        {name: 'kurs', title: 'Курс'},\n        {name: 'inProgress', title: 'Статус'},\n        {name: 'groupName', title: 'Группа'},\n        {name: 'groupType', title: 'Очная/заочная'},\n        {name: 'facultet', title: 'Отделение'},\n        {name: 'studentsList', title: 'Студенты'},\n        {name: 'startDate', title: 'Дата создания'},\n        {name: 'finishDate', title: 'Дата выпуска'},\n        {name: 'delete', title: 'УДАЛЕНИЕ ГРУППЫ'},\n    ])\n    const [columnsWidth] = useState<TableColumnWidthInfo[]>([\n        {columnName: 'id', width: 80},\n        {columnName: 'inProgress', width: 100},\n        {columnName: 'kurs', width: 80},\n        {columnName: 'groupName', width: 100},\n        {columnName: 'groupType', width: 120},\n        {columnName: 'facultet', width: 160},\n        {columnName: 'studentsList', width: 160},\n        {columnName: 'startDate', width: 160},\n        {columnName: 'finishDate', width: 160},\n        {columnName: 'delete', width: 180},\n    ])\n\n    const [defaultHiddenColumnNames] = useState<string[]>([\n        'id',\n        'delete',\n    ])\n    const [currentHiddenColumnNames, setCurrentHiddenColumnNames] = useState<string[]>(defaultHiddenColumnNames)\n\n    const [filters, setFilters] = useState<Filter[]>([])\n    const [filtersNeedReset, setFiltersNeedReset] = useState<boolean>(false)\n    const [filteringStateColumnExtensions] = useState([\n        {columnName: 'studentsList', filteringEnabled: false},\n        {columnName: 'delete', filteringEnabled: false},\n    ])\n\n    const [sorting, setSorting] = useState<Sorting[]>([])\n    const [sortingStateColumnExtensions] = useState([\n        {columnName: 'studentsList', sortingEnabled: false},\n        {columnName: 'delete', sortingEnabled: false},\n    ])\n\n    const [loading, setLoading] = useState<boolean>(true)\n\n    //обновить список студентов\n    function updateList(): void {\n        props.getGroupsList(\n            pageSize,\n            page * pageSize,\n            page,\n            sorting,\n            filters,\n        )\n    }\n\n    //задержка перед фильтрацией\n    const debouncedSetFilters = useCallback(_.debounce((e) => {\n        setFilters(e)\n    }, 400), [])\n\n    //получать новый лист при изменении параметров\n    useEffect(() => {\n        updateList()\n        // console.log(page * pageSize,( page + 1) * pageSize);\n    }, [page, sorting, filters])\n\n    //обновить статус загрузки листа\n    useEffect(() => {\n        setLoading(props.Admin.groupsList.loading)\n\n    }, [props.Admin.groupsList.loading])\n\n    //обновить лист в компоненте\n    useEffect(() => {\n        setRows(props.Admin.groupsList.list)\n        setRowCount(props.Admin.groupsList.count)\n\n        //сброс страницы на 0 если лист маленький\n        if (props.Admin.groupsList.count <= pageSize && filters?.length) {\n            setPage(0)\n            // console.log(props.Admin.studentsList.count, pageSize);\n            // console.log(page);\n        }\n    }, [props.Admin.groupsList.list])\n\n    //кастомный хендлер сортинга для сброса сортировки на 3-е нажатие\n    const onSortingChange = (newColumnsSort: Array<any>) => {\n        let indexToRemove = -1;\n        newColumnsSort.forEach((column, index) => {\n            let columnToCheck = sorting.filter(\n                (c) => c.columnName === column.columnName\n            );\n\n            if (\n                columnToCheck.length > 0 &&\n                columnToCheck[0].direction !== column.direction &&\n                column.direction === \"asc\"\n            ) {\n                indexToRemove = index;\n            }\n        });\n        if (indexToRemove > -1) newColumnsSort.splice(indexToRemove, 1);\n        setSorting(newColumnsSort);\n    }\n\n    //отправить запрос на изменение данных студента\n    const commitChanges = ({changed}: any) => {\n        // let changedRows;\n        if (changed) {\n            // changedRows = rows.map((row: any) => (changed[row.id] ? {...row, ...changed[row.id]} : row));\n\n            const editedUserId: number = parseInt(Object.keys(changed)[0])\n            const editedData: any = changed[editedUserId]\n\n            console.log(changed)\n\n            if (editedData) {\n                setLoading(true)\n                props.editGroup(editedUserId, editedData, () => {\n                    updateList()\n                })\n            }\n        }\n    };\n\n    //компаратор для специфичных колонок\n    const Cell = React.memo((cellProps: any) => {\n        const {column, row} = cellProps;\n\n        if (column.name === 'inProgress') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {row.inProgress === 1 ? 'Учится' : row.inProgress === 0 ? 'Выпущена' : ''}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'startDate') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.startDate)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'finishDate') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.finishDate)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'groupType') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {row.groupType === 0 ? 'очная' : 'заочная'}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'delete') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <Button color={'secondary'}\n                            variant={'contained'}\n                            onClick={() => {\n                                let sure = window.confirm(`Вы уверены что хотите удалить группу ${row.groupName}?`)\n\n                                if (sure) {\n                                    props.deleteGroup(row.id, () => {\n                                        updateList()\n                                    })\n                                }\n                            }}\n                    >\n                        Удалить группу\n                    </Button>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'studentsList') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <ModalStudents archived={!row.inProgress}\n                                   ignoreInProgress={!row.inProgress}\n                                   groupId={row.id}\n                                   groupName={row.groupName}\n                    />\n                </Table.Cell>\n            )\n        }\n\n        return <Table.Cell {...cellProps} />;\n    })\n\n    return (\n        <div className={'Groups_list'}>\n            <HeaderBar/>\n\n            <Container className={'Root-container'}>\n                <Paper className={'Groups_list_table'} style={{position: 'relative', minHeight: '459px'}}>\n                    <div className={\"table-description\"}>\n                        <Typography variant={'h6'} className={'table-title'}>\n                            Список групп\n                        </Typography>\n                        <Button color={'primary'}\n                                variant={'contained'}\n                                disabled={!filters?.length}\n                                onClick={() => {\n                                    setFiltersNeedReset(true)\n                                }}\n                        >\n                            Сброс фильтров\n                        </Button>\n                        <div className={'table-controls'}>\n\n                            <ModalGroupCreate updateList={() => {\n                                updateList()\n                            }}/>\n\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        updateList()\n                                    }}\n                            >\n                                Обновить\n                            </Button>\n\n                        </div>\n                    </div>\n                    <DxGrid\n                        rows={rows}\n                        columns={columns}\n                        getRowId={getRowId}\n                    >\n                        <Toolbar/>\n                        <FilteringState\n                            columnExtensions={filteringStateColumnExtensions}\n                            onFiltersChange={debouncedSetFilters}\n                        />\n                        <SortingState\n                            sorting={sorting}\n                            onSortingChange={onSortingChange}\n                            columnExtensions={sortingStateColumnExtensions}\n                        />\n                        <PagingState\n                            currentPage={page}\n                            onCurrentPageChange={setPage}\n                            pageSize={pageSize}\n                        />\n                        <CustomPaging\n                            totalCount={rowCount}\n                        />\n                        <EditingState\n                            onCommitChanges={commitChanges}\n                        />\n\n                        <Table\n                            cellComponent={Cell}\n                        />\n                        <TableColumnResizing\n                            defaultColumnWidths={columnsWidth}\n                        />\n                        <TableColumnVisibility\n                            defaultHiddenColumnNames={defaultHiddenColumnNames}\n                            onHiddenColumnNamesChange={setCurrentHiddenColumnNames}\n\n                        />\n                        <TableHeaderRow\n                            showSortingControls\n                        />\n                        <TableEditColumn\n                            showEditCommand\n                            messages={editColumnMessages}\n                        />\n                        <PopupEditing popupComponent={Popup}/>\n                        <TableFilterRow\n                            messages={filterRowMessages}\n                            editorComponent={(p: any) => (\n                                <DxCustomFilter\n                                    filtersNeedReset={filtersNeedReset}\n                                    setFiltersNeedReset={setFiltersNeedReset}\n                                    {...p}/>\n                            )}\n                        />\n                        <PagingPanel/>\n                        <ColumnChooser/>\n\n                    </DxGrid>\n                    {loading && <Loading/>}\n                </Paper>\n            </Container>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        editGroup: (\n            groupId: number,\n            values: any,\n            cb?: Function | undefined,\n        ) => {\n            dispatch(editGroup(groupId, values, cb))\n        },\n        deleteGroup: (\n            groupId: number,\n            cb?: Function | undefined,\n        ) => {\n            dispatch(deleteGroup(groupId, cb))\n        },\n        getGroupsList: (\n            limit: string | number,\n            offset: string | number,\n            page: string | number,\n            sort?: Sorting[],\n            filters?: Filter[],\n        ) => {\n            dispatch(getGroupsList(limit, offset, page, sort, filters))\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(React.memo(Groups)))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Archived_Orders_list\\Archived_Orders_list.tsx",["290","291","292","293"],"import React, {useCallback, useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {getArchivedOrdersList} from \"../../../redux/actions/actionsOrders\";\nimport {editStudent} from \"../../../redux/actions/actionsAdmin\";\nimport Paper from '@material-ui/core/Paper';\nimport {Column, CustomPaging, Filter, FilteringState, PagingState, Sorting, SortingState, TableColumnWidthInfo,} from '@devexpress/dx-react-grid';\nimport {ColumnChooser, Grid as DxGrid, PagingPanel, Table, TableColumnResizing, TableColumnVisibility, TableFilterRow, TableHeaderRow, Toolbar,} from '@devexpress/dx-react-grid-material-ui';\nimport {Loading} from '../../../additional_components/Loading/Loading';\nimport HeaderBar from '../../../additional_components/HeaderBar/HeaderBar';\nimport {Button, Container, Typography} from \"@material-ui/core\";\nimport './Archived_Orders_list.scss'\nimport {getLocalPlainDateTime} from \"../../../additional_components/Dates\";\nimport _ from \"lodash\";\nimport PrepareOrder from \"../../../additional_components/ModalOrderPrepare/ModalOrderPrepareSpravkaObObucheni\";\nimport axios, {AxiosResponse} from \"axios\";\nimport fileDownload from \"js-file-download\";\nimport {SnackBarUtils} from \"../../../additional_components/SnackBarUtils/SnackBarUtils\";\nimport ModalStudentData from \"../../../additional_components/ModalStudentData/ModalStudentData\";\nimport {DxCustomFilter} from \"../../../additional_components/DxCustomFilter\";\nimport {filterRowMessages} from \"../../../additional_components/DxGridLocaleConfig\";\n\nfunction Archived_Orders_list(props: any) {\n    const [page, setPage] = useState<number>(0)\n    const [pageSize, setPageSize] = useState<number>(6)\n\n    const [rows, setRows] = useState<any>([])\n    const [rowCount, setRowCount] = useState<number>(0)\n\n    const [columns] = useState<Column[]>([\n        {name: 'id', title: 'Номер'},\n        {name: 'title', title: 'Название'},\n        {name: 'status', title: 'Статус'},\n        {name: 'createdAt', title: 'Дата заказа'},\n        {name: 'fullFilledAt', title: 'Дата завершения'},\n        {name: 'actions', title: 'Действия'},\n        {name: 'download', title: 'Документ'},\n        {name: 'userData', title: 'Инф. о студенте'},\n    ])\n    const [columnsWidth] = useState<TableColumnWidthInfo[]>([\n        {columnName: 'id', width: 130},\n        {columnName: 'title', width: 220},\n        {columnName: 'status', width: 120},\n        {columnName: 'createdAt', width: 160},\n        {columnName: 'fullFilledAt', width: 160},\n        {columnName: 'userData', width: 160},\n        {columnName: 'actions', width: 320},\n        {columnName: 'download', width: 220},\n    ])\n    const [defaultHiddenColumnNames] = useState<string[]>([\n        'userId',\n        'surname',\n        'name',\n        'patronymic',\n        'formaObuch',\n    ])\n\n    const [filtersNeedReset, setFiltersNeedReset] = useState<boolean>(false)\n    const [filteringStateColumnExtensions] = useState([\n        {columnName: 'status', filteringEnabled: false},\n        {columnName: 'userData', filteringEnabled: false},\n    ])\n\n    const [sortingStateColumnExtensions] = useState([\n        {columnName: 'userData', sortingEnabled: false},\n        // {columnName: 'documentRequestsList', sortingEnabled: false},\n    ])\n\n    const [filters, setFilters] = useState<Filter[]>([])\n    const [sorting, setSorting] = useState<Sorting[]>([])\n\n    const [loading, setLoading] = useState<boolean>(true)\n\n    //обновить список студентов\n    function updateList(): void {\n        props.getArchivedOrdersList(\n            pageSize,\n            page * pageSize,\n            page,\n            sorting,\n            filters,\n        )\n    }\n\n    //задержка перед фильтрацией\n    const debouncedSetFilters = useCallback(_.debounce((e) => {\n        setFilters(e)\n    }, 400), [])\n\n    //получать новый лист при изменении параметров\n    useEffect(() => {\n        //todo сделать задержку перед поиском\n        updateList()\n        // console.log(page * pageSize,( page + 1) * pageSize);\n    }, [page, sorting, filters])\n\n    //обновить статус загрузки листа\n    useEffect(() => {\n        setLoading(props.Admin.archivedOrdersList.loading)\n    }, [props.Admin.archivedOrdersList.loading])\n\n    //обновить лист в компоненте\n    useEffect(() => {\n        setRows(props.Admin.archivedOrdersList.list)\n        setRowCount(props.Admin.archivedOrdersList.count)\n\n        //сброс страницы на 0 если лист маленький\n        if (props.Admin.archivedOrdersList.count <= pageSize && filters?.length) {\n            setPage(0)\n            // console.log(props.Admin.studentsList.count, pageSize);\n            // console.log(page);\n        }\n\n    }, [props.Admin.archivedOrdersList.list])\n\n    //кастомный хендлер сортинга для сброса сортировки на 3-е нажатие\n    const onSortingChange = (newColumnsSort: Array<any>) => {\n        let indexToRemove = -1;\n        newColumnsSort.forEach((column, index) => {\n            let columnToCheck = sorting.filter(\n                (c) => c.columnName === column.columnName\n            );\n\n            if (\n                columnToCheck.length > 0 &&\n                columnToCheck[0].direction !== column.direction &&\n                column.direction === \"asc\"\n            ) {\n                indexToRemove = index;\n            }\n        });\n        if (indexToRemove > -1) newColumnsSort.splice(indexToRemove, 1);\n        setSorting(newColumnsSort);\n    }\n\n    //компаратор для специфичных колонок\n    const Cell = React.memo((cellProps: any) => {\n        const {column, row} = cellProps;\n\n        if (column.name === 'status') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>{\n                        row.status === 0\n                            ? 'Готово'\n                            : row.status === 1 ? 'В обработке' : row.status === -1 ? 'Отклонено' : 'Ошибка'}</span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'createdAt') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalPlainDateTime(row.createdAt)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'fullFilledAt') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalPlainDateTime(row.fullFilledAt)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'download') {\n            return (\n                <Table.Cell {...cellProps}>\n\n                    <PrepareOrder updateList={updateList} row={row}/>\n                    {row.documentPath && row.fullFilled\n                        ? (\n                            <Button color={'default'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        // setIsSubmitting(true)\n                                        axios.get(process.env.REACT_APP_ADMIN_DOWNLOAD + `?orderId=${row.id}`,\n                                            {\n                                                responseType: 'arraybuffer'\n                                            })\n                                            .then((r: AxiosResponse) => {\n                                                fileDownload(r.data, row.documentPath);\n                                            })\n                                            .catch(() => {\n                                                SnackBarUtils.error('Ошибка получения данных')\n                                            })\n                                            .finally(() => {\n                                                // setIsSubmitting(false)\n                                            })\n                                    }}\n                            >\n                                Скачать\n                            </Button>\n                        )\n                        : ''}\n\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'actions') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <Button color={'secondary'}\n                            variant={'contained'}\n                            onClick={async () => {\n                                if (!loading) {\n                                    setLoading(true)\n                                    await axios.post(process.env.REACT_APP_ADMIN_ORDERS_UPDATE + ``,\n                                        {\n                                            orderId: row.id,\n                                            status: -1,\n                                        }, {\n                                            responseType: 'arraybuffer'\n                                        })\n                                        .then((r: AxiosResponse) => {\n\n                                        })\n                                        .catch(() => {\n                                            SnackBarUtils.error('Ошибка')\n                                        })\n                                        .finally(() => {\n                                            updateList()\n                                        })\n                                }\n                            }}\n                            disabled={row.status === -1}\n                    >\n                        Отказ\n                    </Button>\n                    <Button color={'default'}\n                            variant={'contained'}\n                            onClick={async () => {\n                                if (!loading) {\n                                    setLoading(true)\n                                    await axios.post(process.env.REACT_APP_ADMIN_ORDERS_UPDATE + ``,\n                                        {\n                                            orderId: row.id,\n                                            status: 1,\n                                        }, {\n                                            responseType: 'arraybuffer'\n                                        })\n                                        .then((r: AxiosResponse) => {\n\n                                        })\n                                        .catch(() => {\n                                            SnackBarUtils.error('Ошибка')\n                                        })\n                                        .finally(() => {\n                                            updateList()\n                                        })\n                                }\n                            }}\n                            disabled={row.status === 1}\n                    >\n                        Обработка\n                    </Button>\n                    <Button color={'primary'}\n                            variant={'contained'}\n                            onClick={async () => {\n                                if (!loading) {\n                                    setLoading(true)\n                                    await axios.post(process.env.REACT_APP_ADMIN_ORDERS_UPDATE + ``,\n                                        {\n                                            orderId: row.id,\n                                            status: 0,\n                                        }, {\n                                            responseType: 'arraybuffer'\n                                        })\n                                        .then((r: AxiosResponse) => {\n\n                                        })\n                                        .catch(() => {\n                                            SnackBarUtils.error('Ошибка')\n                                        })\n                                        .finally(() => {\n                                            updateList()\n                                        })\n                                }\n                            }}\n                            disabled={row.status === 0}\n                    >\n                        Принять\n                    </Button>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'userData') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <ModalStudentData userId={row.userId}/>\n                </Table.Cell>\n            )\n        }\n\n        return <Table.Cell {...cellProps} />;\n    })\n\n    return (\n        <div className={'Archived_Orders_list'}>\n            <HeaderBar/>\n\n            <Container className={'Root-container'}>\n                <Paper className={'Archived_Orders_list_table'} style={{position: 'relative', minHeight: '459px'}}>\n                    <div className={\"table-description\"}>\n                        <Typography variant={'h6'} className={'table-title'}>\n                            Список заказов (архив)\n                        </Typography>\n                        <Button color={'primary'}\n                                variant={'contained'}\n                                disabled={!filters?.length}\n                                onClick={() => {\n                                    setFiltersNeedReset(true)\n                                }}\n                        >\n                            Сброс фильтров\n                        </Button>\n                        <div className={'table-controls'}>\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        updateList()\n                                    }}\n                            >\n                                Обновить\n                            </Button>\n                        </div>\n                    </div>\n                    <DxGrid\n                        rows={rows}\n                        columns={columns}\n                    >\n\n                        <Toolbar/>\n                        <FilteringState\n                            columnExtensions={filteringStateColumnExtensions}\n                            onFiltersChange={debouncedSetFilters}\n                        />\n                        <SortingState\n                            sorting={sorting}\n                            onSortingChange={onSortingChange}\n                            columnExtensions={sortingStateColumnExtensions}\n                        />\n                        <PagingState\n                            currentPage={page}\n                            onCurrentPageChange={setPage}\n                            pageSize={pageSize}\n                        />\n                        <CustomPaging\n                            totalCount={rowCount}\n                        />\n                        <Table\n                            cellComponent={Cell}\n                        />\n                        <TableColumnResizing\n                            defaultColumnWidths={columnsWidth}\n                        />\n                        <TableColumnVisibility\n                            defaultHiddenColumnNames={defaultHiddenColumnNames}\n                        />\n                        <TableHeaderRow\n                            showSortingControls\n                        />\n                        <TableFilterRow\n                            messages={filterRowMessages}\n                            editorComponent={(p: any) => (\n                                <DxCustomFilter\n                                    filtersNeedReset={filtersNeedReset}\n                                    setFiltersNeedReset={setFiltersNeedReset}\n                                    {...p}/>\n                            )}\n                        />\n                        <PagingPanel/>\n                        <ColumnChooser/>\n\n                    </DxGrid>\n                    {loading && <Loading/>}\n                </Paper>\n            </Container>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        editStudent: (userId: number, values: any, cb: Function) => {\n            dispatch(editStudent(userId, values, cb))\n        },\n        getArchivedOrdersList: (\n            limit: string | number,\n            offset: string | number,\n            page: string | number,\n            sort?: Sorting[],\n            filters?: Filter[],\n        ) => {\n            dispatch(getArchivedOrdersList(limit, offset, page, sort, filters))\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Archived_Orders_list))\n","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Orders_list\\Orders_list.tsx",["294","295","296","297"],"import React, {useCallback, useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {getArchivedOrdersList, getOrdersList} from \"../../../redux/actions/actionsOrders\";\nimport {editStudent} from \"../../../redux/actions/actionsAdmin\";\nimport Paper from '@material-ui/core/Paper';\nimport {Column, CustomPaging, Filter, FilteringState, PagingState, Sorting, SortingState, TableColumnWidthInfo,} from '@devexpress/dx-react-grid';\nimport {ColumnChooser, Grid as DxGrid, PagingPanel, Table, TableColumnResizing, TableColumnVisibility, TableFilterRow, TableHeaderRow, Toolbar,} from '@devexpress/dx-react-grid-material-ui';\nimport {Loading} from '../../../additional_components/Loading/Loading';\nimport HeaderBar from '../../../additional_components/HeaderBar/HeaderBar';\nimport {Button, Container, Typography} from \"@material-ui/core\";\nimport './Orders_list.scss'\nimport Link from \"../../../additional_components/HOC/ProtectedLink\";\nimport {getLocalPlainDateTime} from \"../../../additional_components/Dates\";\nimport _ from \"lodash\";\nimport axios, {AxiosResponse} from \"axios\";\nimport fileDownload from \"js-file-download\";\nimport {SnackBarUtils} from \"../../../additional_components/SnackBarUtils/SnackBarUtils\";\nimport PrepareOrder from \"../../../additional_components/ModalOrderPrepare/ModalOrderPrepareSpravkaObObucheni\";\nimport ModalStudentData from '../../../additional_components/ModalStudentData/ModalStudentData';\nimport ModalOrderComment from \"../../../additional_components/ModalOrderComment/ModalOrderComment\";\nimport {DxCustomFilter} from \"../../../additional_components/DxCustomFilter\";\nimport {filterRowMessages} from \"../../../additional_components/DxGridLocaleConfig\";\n\nfunction Orders_list(props: any) {\n    const [page, setPage] = useState<number>(0)\n    const [pageSize, setPageSize] = useState<number>(6)\n\n    const [rows, setRows] = useState<any>([])\n    const [rowCount, setRowCount] = useState<number>(0)\n\n    const [columns] = useState<Column[]>([\n        {name: 'id', title: 'Номер'},\n        {name: 'title', title: 'Название'},\n        {name: 'comment', title: 'Примечание'},\n        {name: 'status', title: 'Статус'},\n        {name: 'createdAt', title: 'Дата заказа'},\n        {name: 'actions', title: 'Действия'},\n        {name: 'download', title: 'Документ'},\n        {name: 'userData', title: 'Инф. о студенте'},\n    ])\n    const [columnsWidth] = useState<TableColumnWidthInfo[]>([\n        {columnName: 'id', width: 110},\n        {columnName: 'comment', width: 135},\n        {columnName: 'title', width: 220},\n        {columnName: 'status', width: 120},\n        {columnName: 'createdAt', width: 160},\n        {columnName: 'userData', width: 160},\n        {columnName: 'actions', width: 320},\n        {columnName: 'download', width: 220},\n    ])\n    const [defaultHiddenColumnNames] = useState<string[]>([\n        'userId',\n        'surname',\n        'name',\n        'patronymic',\n        'formaObuch',\n    ])\n\n    const [filters, setFilters] = useState<Filter[]>([])\n    const [filtersNeedReset, setFiltersNeedReset] = useState<boolean>(false)\n    const [filteringStateColumnExtensions] = useState([\n        {columnName: 'status', filteringEnabled: false},\n        {columnName: 'userData', filteringEnabled: false},\n        {columnName: 'comment', filteringEnabled: false},\n        {columnName: 'actions', filteringEnabled: false},\n        {columnName: 'download', filteringEnabled: false},\n    ])\n\n    const [sorting, setSorting] = useState<Sorting[]>([])\n    const [sortingStateColumnExtensions] = useState([\n        {columnName: 'userData', sortingEnabled: false},\n        {columnName: 'comment', sortingEnabled: false},\n        {columnName: 'actions', sortingEnabled: false},\n        {columnName: 'download', sortingEnabled: false},\n    ])\n\n    const [loading, setLoading] = useState<boolean>(true)\n\n    //обновить список студентов\n    function updateList(): void {\n        props.getOrdersList(\n            pageSize,\n            page * pageSize,\n            page,\n            sorting,\n            filters,\n        )\n\n    }\n\n    //задержка перед фильтрацией\n    const debouncedSetFilters = useCallback(_.debounce((e) => {\n        setFilters(e)\n    }, 400), [])\n\n    //получать новый лист при изменении параметров\n    useEffect(() => {\n        updateList()\n        // console.log(page * pageSize,( page + 1) * pageSize);\n    }, [page, sorting, filters])\n\n    //обновить статус загрузки листа\n    useEffect(() => {\n        setLoading(props.Admin.ordersList.loading)\n    }, [props.Admin.ordersList.loading])\n\n    //обновить лист в компоненте\n    useEffect(() => {\n        setRows(props.Admin.ordersList.list)\n        setRowCount(props.Admin.ordersList.count)\n\n        //сброс страницы на 0 если лист маленький\n        if (props.Admin.ordersList.count <= pageSize && filters?.length) {\n            setPage(0)\n            // console.log(props.Admin.studentsList.count, pageSize);\n            // console.log(page);\n        }\n\n    }, [props.Admin.ordersList.list])\n\n    //кастомный хендлер сортинга для сброса сортировки на 3-е нажатие\n    const onSortingChange = (newColumnsSort: Array<any>) => {\n        let indexToRemove = -1;\n        newColumnsSort.forEach((column, index) => {\n            let columnToCheck = sorting.filter(\n                (c) => c.columnName === column.columnName\n            );\n\n            if (\n                columnToCheck.length > 0 &&\n                columnToCheck[0].direction !== column.direction &&\n                column.direction === \"asc\"\n            ) {\n                indexToRemove = index;\n            }\n        });\n        if (indexToRemove > -1) newColumnsSort.splice(indexToRemove, 1);\n        setSorting(newColumnsSort);\n    }\n\n    //компаратор для специфичных колонок\n    const Cell = React.memo((cellProps: any) => {\n        const {column, row} = cellProps;\n\n        if (column.name === 'status') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>{\n                        row.status === 0\n                            ? 'Готово'\n                            : row.status === 1 ? 'В обработке' : row.status === -1 ? 'Отклонено' : 'Ошибка'}</span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'comment' && row.comment) {\n            return (\n                <Table.Cell {...cellProps}>\n                    <ModalOrderComment comment={row.comment.toString()}/>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'createdAt') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalPlainDateTime(row.createdAt)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'download') {\n            return (\n                <Table.Cell {...cellProps}>\n\n                    <PrepareOrder updateList={updateList} row={row}/>\n                    {row.documentPath && row.fullFilled\n                        ? (\n                            <Button color={'default'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        // setIsSubmitting(true)\n                                        axios.get(process.env.REACT_APP_ADMIN_DOWNLOAD + `?orderId=${row.id}`,\n                                            {\n                                                responseType: 'arraybuffer'\n                                            })\n                                            .then((r: AxiosResponse) => {\n                                                fileDownload(r.data, row.documentPath);\n                                            })\n                                            .catch(() => {\n                                                SnackBarUtils.error('Ошибка получения данных')\n                                            })\n                                            .finally(() => {\n                                                // setIsSubmitting(false)\n                                            })\n                                    }}\n                            >\n                                Скачать\n                            </Button>\n                        )\n                        : ''}\n\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'actions') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <Button color={'secondary'}\n                            variant={'contained'}\n                            onClick={async () => {\n                                if (!loading) {\n                                    setLoading(true)\n                                    await axios.post(process.env.REACT_APP_ADMIN_ORDERS_UPDATE + ``,\n                                        {\n                                            orderId: row.id,\n                                            status: -1,\n                                        }, {\n                                            responseType: 'arraybuffer'\n                                        })\n                                        .then((r: AxiosResponse) => {\n\n                                        })\n                                        .catch(() => {\n                                            SnackBarUtils.error('Ошибка')\n                                        })\n                                        .finally(() => {\n                                            updateList()\n                                        })\n                                }\n                            }}\n                            disabled={row.status === -1}\n                    >\n                        Отказ\n                    </Button>\n                    <Button color={'default'}\n                            variant={'contained'}\n                            onClick={async () => {\n                                if (!loading) {\n                                    setLoading(true)\n                                    await axios.post(process.env.REACT_APP_ADMIN_ORDERS_UPDATE + ``,\n                                        {\n                                            orderId: row.id,\n                                            status: 1,\n                                        }, {\n                                            responseType: 'arraybuffer'\n                                        })\n                                        .then((r: AxiosResponse) => {\n\n                                        })\n                                        .catch(() => {\n                                            SnackBarUtils.error('Ошибка')\n                                        })\n                                        .finally(() => {\n                                            updateList()\n                                        })\n                                }\n                            }}\n                            disabled={row.status === 1}\n                    >\n                        Обработка\n                    </Button>\n                    <Button color={'primary'}\n                            variant={'contained'}\n                            onClick={async () => {\n                                if (!loading) {\n                                    setLoading(true)\n                                    await axios.post(process.env.REACT_APP_ADMIN_ORDERS_UPDATE + ``,\n                                        {\n                                            orderId: row.id,\n                                            status: 0,\n                                        }, {\n                                            responseType: 'arraybuffer'\n                                        })\n                                        .then((r: AxiosResponse) => {\n\n                                        })\n                                        .catch(() => {\n                                            SnackBarUtils.error('Ошибка')\n                                        })\n                                        .finally(() => {\n                                            updateList()\n                                        })\n                                }\n                            }}\n                            disabled={row.status === 0}\n                    >\n                        Принять\n                    </Button>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'userData') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <ModalStudentData userId={row.userId}/>\n                </Table.Cell>\n            )\n        }\n\n        return <Table.Cell {...cellProps} />;\n    })\n\n    return (\n        <div className={'Orders_list'}>\n            <HeaderBar/>\n\n            <Container className={'Root-container'}>\n                <Paper className={'Orders_list_table'} style={{position: 'relative', minHeight: '459px'}}>\n                    <div className={\"table-description\"}>\n                        <Typography variant={'h6'} className={'table-title'}>\n                            Список заказов\n                        </Typography>\n                        <Button color={'primary'}\n                                variant={'contained'}\n                                disabled={!filters?.length}\n                                onClick={() => {\n                                    setFiltersNeedReset(true)\n                                }}\n                        >\n                            Сброс фильтров\n                        </Button>\n                        <div className={'table-controls'}>\n                            <Link to={'/orders/archived'}>\n\n                                <Button color={'primary'}\n                                        variant={'contained'}\n                                        style={{\n                                            marginRight: '30px',\n                                        }}\n                                >\n                                    Архив\n                                </Button>\n                            </Link>\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        updateList()\n                                    }}\n                            >\n                                Обновить\n                            </Button>\n                        </div>\n                    </div>\n                    <DxGrid\n                        rows={rows}\n                        columns={columns}\n                        // getRowId={getRowId}\n                    >\n\n                        <Toolbar/>\n                        <FilteringState\n                            columnExtensions={filteringStateColumnExtensions}\n                            onFiltersChange={debouncedSetFilters}\n                        />\n                        <SortingState\n                            sorting={sorting}\n                            onSortingChange={onSortingChange}\n                            columnExtensions={sortingStateColumnExtensions}\n                        />\n                        <PagingState\n                            currentPage={page}\n                            onCurrentPageChange={setPage}\n                            pageSize={pageSize}\n                        />\n                        <CustomPaging\n                            totalCount={rowCount}\n                        />\n                        <Table\n                            cellComponent={Cell}\n                        />\n                        <TableColumnResizing\n                            defaultColumnWidths={columnsWidth}\n                        />\n                        <TableColumnVisibility\n                            defaultHiddenColumnNames={defaultHiddenColumnNames}\n                        />\n                        <TableHeaderRow\n                            showSortingControls\n                        />\n                        <TableFilterRow\n                            messages={filterRowMessages}\n                            editorComponent={(p: any) => (\n                                <DxCustomFilter\n                                    filtersNeedReset={filtersNeedReset}\n                                    setFiltersNeedReset={setFiltersNeedReset}\n                                    {...p}/>\n                            )}\n                        />\n                        <PagingPanel/>\n                        <ColumnChooser/>\n\n                    </DxGrid>\n                    {loading && <Loading/>}\n                </Paper>\n            </Container>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        editStudent: (userId: number, values: any, cb: Function) => {\n            dispatch(editStudent(userId, values, cb))\n        },\n        getOrdersList: (\n            limit: string | number,\n            offset: string | number,\n            page: string | number,\n            sort?: Sorting[],\n            filters?: Filter[],\n        ) => {\n            dispatch(getOrdersList(limit, offset, page, sort, filters))\n        },\n        getArchivedOrdersList: (\n            limit: string | number,\n            offset: string | number,\n            page: string | number,\n            sort?: Sorting[],\n            filters?: Filter[],\n        ) => {\n            dispatch(getArchivedOrdersList(limit, offset, page, sort, filters))\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Orders_list))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Archived_Students_list\\Archived_Students_list.tsx",["298","299","300","301"],"import React, {useCallback, useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {editStudent, exportStudents, getArchivedStudentsList} from \"../../../redux/actions/actionsAdmin\";\nimport Paper from '@material-ui/core/Paper';\nimport {Column, CustomPaging, EditingState, Filter, FilteringState, PagingState, Sorting, SortingState, TableColumnWidthInfo,} from '@devexpress/dx-react-grid';\nimport {\n    ColumnChooser,\n    Grid as DxGrid,\n    PagingPanel,\n    Table,\n    TableColumnResizing,\n    TableColumnVisibility,\n    TableEditColumn,\n    TableFilterRow,\n    TableHeaderRow,\n    Toolbar,\n} from '@devexpress/dx-react-grid-material-ui';\nimport {Loading} from '../../../additional_components/Loading/Loading';\nimport HeaderBar from '../../../additional_components/HeaderBar/HeaderBar';\nimport {Button, Container, Typography} from \"@material-ui/core\";\n\nimport './Archived_Students_list.scss'\nimport _ from \"lodash\";\nimport {getRowId, Popup, PopupEditing} from \"../../../additional_components/EditStudentColumn/EditStudentColumn\";\nimport StudentUserDataModal from \"../../../additional_components/ModalUserData/ModalUserData\";\nimport ModalOrders from \"../../../additional_components/ModalOrders/ModalOrders\";\nimport {getLocalDate} from \"../../../additional_components/Dates\";\nimport {DxCustomFilter} from \"../../../additional_components/DxCustomFilter\";\nimport {editColumnMessages, filterRowMessages} from \"../../../additional_components/DxGridLocaleConfig\";\n\nfunction Archived_Students_list(props: any) {\n    const [page, setPage] = useState<number>(0);\n    const [pageSize, setPageSize] = useState<number>(5);\n\n    const [rows, setRows] = useState<[]>([]);\n    const [rowCount, setRowCount] = useState<number>(0);\n\n    const [columns] = useState<Column[]>([\n        {name: 'userId', title: 'ID аккаунта'},\n        {name: 'kurs', title: 'Курс'},\n        {name: 'groupName', title: 'Группа'},\n        {name: 'formaObuch', title: 'Форма обучения'},\n        {name: 'surname', title: 'Фамилия'},\n        {name: 'name', title: 'Имя'},\n        {name: 'patronymic', title: 'Отчество'},\n        {name: 'gender', title: 'Пол'},\n        {name: 'birthday', title: 'Дата рождения'},\n        {name: 'diplomaId', title: 'Номер диплома'},\n        {name: 'prikaz', title: 'Зачислен по приказу (№)'},\n        {name: 'prikazDate', title: 'Дата зачисления'},\n        {name: 'startDate', title: 'Начало обучения'},\n        {name: 'finishDate', title: 'Конец обучения'},\n        {name: 'documentRequestsList', title: 'Заказы'},\n        {name: 'userData', title: 'Данные аккаунта'},\n    ])\n    const [columnsWidth] = useState<TableColumnWidthInfo[]>([\n        {columnName: 'userId', width: 160},\n        {columnName: 'kurs', width: 80},\n        {columnName: 'groupName', width: 100},\n        {columnName: 'formaObuch', width: 160},\n        {columnName: 'surname', width: 180},\n        {columnName: 'name', width: 180},\n        {columnName: 'patronymic', width: 180},\n        {columnName: 'gender', width: 100},\n        {columnName: 'birthday', width: 150},\n        {columnName: 'diplomaId', width: 160},\n        {columnName: 'prikaz', width: 160},\n        {columnName: 'prikazDate', width: 160},\n        {columnName: 'startDate', width: 160},\n        {columnName: 'finishDate', width: 160},\n        {columnName: 'documentRequestsList', width: 180},\n        {columnName: 'userData', width: 180},\n    ])\n\n\n    const [defaultHiddenColumnNames] = useState<string[]>([\n        'userId',\n        'formaObuch',\n        'prikaz',\n        'prikazDate',\n        'startDate',\n        'finishDate',\n        'userData',\n        'diplomaId',\n    ])\n    const [currentHiddenColumnNames, setCurrentHiddenColumnNames] = useState<string[]>(defaultHiddenColumnNames)\n\n    const [filters, setFilters] = useState<Filter[]>([]);\n    const [filtersNeedReset, setFiltersNeedReset] = useState<boolean>(false)\n    const [filteringStateColumnExtensions] = useState([\n        {columnName: 'userData', filteringEnabled: false},\n        {columnName: 'documentRequestsList', filteringEnabled: false},\n    ])\n\n    const [sorting, setSorting] = useState<Sorting[]>([]);\n    const [sortingStateColumnExtensions] = useState([\n        {columnName: 'userData', sortingEnabled: false},\n        {columnName: 'documentRequestsList', sortingEnabled: false},\n    ])\n\n    const [loading, setLoading] = useState<boolean>(true);\n\n    function updateList(): void {\n        props.getArchivedStudentsList(\n            page * pageSize,\n            pageSize,\n            page,\n            sorting,\n            filters,\n        )\n    }\n\n    //задержка перед фильтрацией\n    const debouncedSetFilters = useCallback(_.debounce((e) => {\n        setFilters(e)\n    }, 400), [])\n\n    //получать новый лист при изменении параметров\n    useEffect(() => {\n        updateList()\n        // console.log(page * pageSize,( page + 1) * pageSize);\n    }, [page, sorting, filters])\n\n    //обновить статус загрузки листа\n    useEffect(() => {\n        setLoading(props.Admin.archivedStudentsList.loading)\n    }, [props.Admin.archivedStudentsList.loading])\n\n    //обновить лист в компоненте\n    useEffect(() => {\n        setRows(props.Admin.archivedStudentsList.list)\n        setRowCount(props.Admin.archivedStudentsList.count)\n\n        //сброс страницы на 0 если лист маленький\n        if (props.Admin.archivedStudentsList.count <= pageSize && filters?.length) {\n            setPage(0)\n            // console.log(props.Admin.studentsList.count, pageSize);\n            // console.log(page);\n        }\n\n    }, [props.Admin.archivedStudentsList.list])\n\n    //кастомный хендлер сортинга для сброса сортировки на 3-е нажатие\n    const onSortingChange = (newColumnsSort: Array<any>) => {\n        let indexToRemove = -1;\n        newColumnsSort.forEach((column, index) => {\n            let columnToCheck = sorting.filter(\n                (c) => c.columnName === column.columnName\n            );\n\n            if (\n                columnToCheck.length > 0 &&\n                columnToCheck[0].direction !== column.direction &&\n                column.direction === \"asc\"\n            ) {\n                indexToRemove = index;\n            }\n        });\n        if (indexToRemove > -1) newColumnsSort.splice(indexToRemove, 1);\n        setSorting(newColumnsSort);\n    };\n\n    //отправить запрос на изменение данных студента\n    const commitChanges = ({changed}: any) => {\n        // let changedRows;\n        if (changed) {\n            // changedRows = rows.map((row: any) => (changed[row.id] ? {...row, ...changed[row.id]} : row));\n\n            const editedUserId: number = parseInt(Object.keys(changed)[0])\n            const editedData: any = changed[editedUserId]\n\n            if (editedData) {\n                props.editStudent(editedUserId, editedData, () => {\n                    updateList()\n                })\n            }\n        }\n    };\n\n    //компонент форматирования формы обучения\n    const FormaObuchComponent = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <span\n                >\n                    {row.formaObuch ? 'платная' : 'бюджетная'}\n                 </span>\n            </Table.Cell>\n        )\n    })\n\n    //компонент просмотра инфы о акке студента\n    const StudentLoginData = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <StudentUserDataModal userId={row.userId}/>\n            </Table.Cell>\n        )\n    })\n\n    const DocumentRequestsList = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        const studentName = `${row.surname} ${row.name} ${row.patronymic} `\n\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <ModalOrders studentName={studentName} userId={row.userId}/>\n            </Table.Cell>\n        )\n    })\n\n    //компаратор для специфичных колонок\n    const Cell = React.memo((cellProps: any) => {\n        const {column, row} = cellProps;\n\n        if (column.name === 'birthday') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.birthday)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'startDate') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.startDate)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'finishDate') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.finishDate)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'userData') {\n            return <StudentLoginData {...cellProps} />;\n        }\n\n        if (column.name === 'documentRequestsList') {\n            return <DocumentRequestsList {...cellProps} />;\n        }\n\n        if (column.name === 'formaObuch') {\n            return <FormaObuchComponent {...cellProps} />;\n        }\n\n        return <Table.Cell {...cellProps} />;\n    })\n\n    return (\n        <div className={'Students_list'}>\n\n            <HeaderBar/>\n\n            <Container className={'Root-container'}>\n                <Paper className={'Student_list_table'} style={{position: 'relative', minHeight: '459px'}}>\n                    <div className={\"table-description\"}>\n                        <Typography variant={'h6'} className={'table-title'}>\n                            Список студентов (архив)\n                        </Typography>\n                        <Button color={'primary'}\n                                variant={'contained'}\n                                disabled={!filters?.length}\n                                onClick={() => {\n                                    setFiltersNeedReset(true)\n                                }}\n                        >\n                            Сброс фильтров\n                        </Button>\n                        <div className={'table-controls'}>\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    style={{\n                                        marginRight: '30px',\n                                    }}\n                                    onClick={() => {\n                                        props.exportStudents(currentHiddenColumnNames, filters, 'archived')\n                                    }}\n                            >\n                                Экспорт\n                            </Button>\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        updateList()\n                                    }}\n                            >\n                                Обновить\n                            </Button>\n                        </div>\n                    </div>\n                    <DxGrid\n                        rows={rows}\n                        columns={columns}\n                        getRowId={getRowId}\n                    >\n                        <Toolbar/>\n                        <FilteringState\n                            columnExtensions={filteringStateColumnExtensions}\n                            onFiltersChange={debouncedSetFilters}\n                        />\n                        <SortingState\n                            sorting={sorting}\n                            onSortingChange={onSortingChange}\n                            columnExtensions={sortingStateColumnExtensions}\n                        />\n                        <PagingState\n                            currentPage={page}\n                            onCurrentPageChange={setPage}\n                            pageSize={pageSize}\n                        />\n                        <CustomPaging\n                            totalCount={rowCount}\n                        />\n                        <EditingState\n                            onCommitChanges={commitChanges}\n                        />\n\n                        <Table\n                            cellComponent={Cell}\n                        />\n                        <TableColumnResizing\n                            defaultColumnWidths={columnsWidth}\n                        />\n                        <TableColumnVisibility\n                            defaultHiddenColumnNames={defaultHiddenColumnNames}\n                            onHiddenColumnNamesChange={setCurrentHiddenColumnNames}\n\n                        />\n                        <TableHeaderRow\n                            showSortingControls\n                        />\n                        <TableEditColumn\n                            showEditCommand\n                            messages={editColumnMessages}\n                        />\n                        <PopupEditing popupComponent={Popup}/>\n                        <TableFilterRow\n                            messages={filterRowMessages}\n                            editorComponent={(p: any) => (\n                                <DxCustomFilter\n                                    filtersNeedReset={filtersNeedReset}\n                                    setFiltersNeedReset={setFiltersNeedReset}\n                                    {...p}/>\n                            )}\n                        />\n                        <PagingPanel/>\n                        <ColumnChooser/>\n\n                    </DxGrid>\n                    {loading && <Loading/>}\n                </Paper>\n            </Container>\n\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        editStudent: (userId: number, values: any, cb: Function) => {\n            dispatch(editStudent(userId, values, cb))\n        },\n        exportStudents: (restrictedColumns: any[], filters: any[], type?: string | undefined) => {\n            dispatch(exportStudents(restrictedColumns, filters, type))\n        },\n        getArchivedStudentsList: (\n            offset: string | number,\n            limit: string | number,\n            page: string | number,\n            sort?: Sorting[],\n            filters?: Filter[],\n        ) => {\n            dispatch(getArchivedStudentsList(offset, limit, page, sort, filters))\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Archived_Students_list))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Admin\\Students_list\\Students_list.tsx",["302","303","304","305"],"import React, {useCallback, useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {editStudent, exportStudents, getStudentsList} from \"../../../redux/actions/actionsAdmin\";\nimport Paper from '@material-ui/core/Paper';\nimport {Column, CustomPaging, EditingState, Filter, FilteringState, PagingState, Sorting, SortingState, TableColumnWidthInfo,} from '@devexpress/dx-react-grid';\nimport {\n    ColumnChooser,\n    Grid as DxGrid,\n    PagingPanel,\n    Table,\n    TableColumnResizing,\n    TableColumnVisibility,\n    TableEditColumn,\n    TableFilterRow,\n    TableHeaderRow,\n    Toolbar,\n} from '@devexpress/dx-react-grid-material-ui';\nimport {Loading} from '../../../additional_components/Loading/Loading';\nimport HeaderBar from '../../../additional_components/HeaderBar/HeaderBar';\nimport {Button, Container, Typography} from \"@material-ui/core\";\nimport './Students_list.scss'\nimport Link from \"../../../additional_components/HOC/ProtectedLink\";\nimport StudentUserDataModal from \"../../../additional_components/ModalUserData/ModalUserData\";\nimport {getRowId, Popup, PopupEditing} from '../../../additional_components/EditStudentColumn/EditStudentColumn';\nimport ModalOrders from \"../../../additional_components/ModalOrders/ModalOrders\";\nimport _ from \"lodash\";\nimport {getLocalDate} from \"../../../additional_components/Dates\";\nimport {DxCustomFilter} from '../../../additional_components/DxCustomFilter';\nimport {editColumnMessages, filterRowMessages} from \"../../../additional_components/DxGridLocaleConfig\";\n\nfunction Students_list(props: any) {\n    const [page, setPage] = useState<number>(0)\n    const [pageSize, setPageSize] = useState<number>(6)\n\n    const [rows, setRows] = useState<any>([])\n    const [rowCount, setRowCount] = useState<number>(0)\n\n    const [columns] = useState<Column[]>([\n        {name: 'userId', title: 'ID аккаунта'},\n        {name: 'kurs', title: 'Курс'},\n        {name: 'groupName', title: 'Группа'},\n        {name: 'formaObuch', title: 'Форма обучения'},\n        {name: 'surname', title: 'Фамилия'},\n        {name: 'name', title: 'Имя'},\n        {name: 'patronymic', title: 'Отчество'},\n        {name: 'gender', title: 'Пол'},\n        {name: 'birthday', title: 'Дата рождения'},\n        {name: 'age', title: 'Возраст'},\n        {name: 'diplomaId', title: 'Номер диплома'},\n        {name: 'prikaz', title: 'Зачислен по приказу (№)'},\n        {name: 'prikazDate', title: 'Дата зачисления'},\n        {name: 'startDate', title: 'Начало обучения'},\n        {name: 'finishDate', title: 'Конец обучения'},\n        {name: 'documentRequestsList', title: 'Заказы'},\n        {name: 'userData', title: 'Данные аккаунта'},\n    ])\n    const [columnsWidth] = useState<TableColumnWidthInfo[]>([\n        {columnName: 'userId', width: 160},\n        {columnName: 'kurs', width: 80},\n        {columnName: 'groupName', width: 100},\n        {columnName: 'formaObuch', width: 160},\n        {columnName: 'surname', width: 180},\n        {columnName: 'name', width: 180},\n        {columnName: 'patronymic', width: 180},\n        {columnName: 'gender', width: 100},\n        {columnName: 'birthday', width: 150},\n        {columnName: 'age', width: 120},\n        {columnName: 'diplomaId', width: 160},\n        {columnName: 'prikaz', width: 160},\n        {columnName: 'prikazDate', width: 160},\n        {columnName: 'startDate', width: 160},\n        {columnName: 'finishDate', width: 160},\n        {columnName: 'documentRequestsList', width: 180},\n        {columnName: 'userData', width: 180},\n    ])\n\n\n    const [defaultHiddenColumnNames] = useState<string[]>([\n        'userId',\n        'formaObuch',\n        'prikaz',\n        'prikazDate',\n        'startDate',\n        'finishDate',\n        'userData',\n        'diplomaId',\n    ])\n    const [currentHiddenColumnNames, setCurrentHiddenColumnNames] = useState<string[]>(defaultHiddenColumnNames)\n\n    const [filters, setFilters] = useState<Filter[]>([])\n    const [filtersNeedReset, setFiltersNeedReset] = useState<boolean>(false)\n    const [filteringStateColumnExtensions] = useState([\n        {columnName: 'userData', filteringEnabled: false},\n        {columnName: 'documentRequestsList', filteringEnabled: false},\n    ])\n\n    const [sorting, setSorting] = useState<Sorting[]>([])\n    const [sortingStateColumnExtensions] = useState([\n        {columnName: 'userData', sortingEnabled: false},\n        {columnName: 'documentRequestsList', sortingEnabled: false},\n    ])\n\n    const [loading, setLoading] = useState<boolean>(true)\n\n    //обновить список студентов\n    function updateList(): void {\n        props.getStudentsList(\n            pageSize,\n            page * pageSize,\n            page,\n            sorting,\n            filters,\n        )\n    }\n\n    //задержка перед фильтрацией\n    const debouncedSetFilters = useCallback(_.debounce((e) => {\n        setFilters(e)\n    }, 400), [])\n\n    //получать новый лист при изменении параметров\n    useEffect(() => {\n        updateList()\n\n        // console.log(page * pageSize,( page + 1) * pageSize);\n    }, [page, sorting, filters])\n\n    //обновить статус загрузки листа\n    useEffect(() => {\n        setLoading(props.Admin.studentsList.loading)\n\n    }, [props.Admin.studentsList.loading])\n\n    //обновить лист в компоненте\n    useEffect(() => {\n        setRows(props.Admin.studentsList.list)\n        setRowCount(props.Admin.studentsList.count)\n\n        //сброс страницы на 0 если лист маленький\n        if (props.Admin.studentsList.count <= pageSize && filters?.length) {\n            setPage(0)\n            // console.log(props.Admin.studentsList.count, pageSize);\n            // console.log(page);\n        }\n\n    }, [props.Admin.studentsList.list])\n\n    //кастомный хендлер сортинга для сброса сортировки на 3-е нажатие\n    const onSortingChange = (newColumnsSort: Array<any>) => {\n        let indexToRemove = -1;\n        newColumnsSort.forEach((column, index) => {\n            let columnToCheck = sorting.filter(\n                (c) => c.columnName === column.columnName\n            );\n\n            if (\n                columnToCheck.length > 0 &&\n                columnToCheck[0].direction !== column.direction &&\n                column.direction === \"asc\"\n            ) {\n                indexToRemove = index;\n            }\n        });\n        if (indexToRemove > -1) newColumnsSort.splice(indexToRemove, 1);\n        setSorting(newColumnsSort);\n    }\n\n    //отправить запрос на изменение данных студента\n    const commitChanges = ({changed}: any) => {\n        // let changedRows;\n        if (changed) {\n            // changedRows = rows.map((row: any) => (changed[row.id] ? {...row, ...changed[row.id]} : row));\n\n            const editedUserId: number = parseInt(Object.keys(changed)[0])\n            const editedData: any = changed[editedUserId]\n\n            // console.log(changed)\n\n            if (editedData) {\n                setLoading(true)\n                props.editStudent(editedUserId, editedData, () => {\n                    updateList()\n                })\n            }\n        }\n    };\n\n    //компонент форматирования формы обучения\n    const FormaObuchComponent = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <span\n                >\n                    {row.formaObuch ? 'платная' : 'бюджетная'}\n                 </span>\n            </Table.Cell>\n        )\n    })\n\n    //компонент просмотра инфы о акке студента\n    const StudentLoginData = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <StudentUserDataModal userId={row.userId}/>\n            </Table.Cell>\n        )\n    })\n\n    const DocumentRequestsList = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        const studentName = `${row.surname} ${row.name} ${row.patronymic} `\n\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <ModalOrders studentName={studentName} userId={row.userId}/>\n            </Table.Cell>\n        )\n    })\n\n\n    //компаратор для специфичных колонок\n    const Cell = React.memo((cellProps: any) => {\n        const {column, row} = cellProps;\n\n        if (column.name === 'birthday') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.birthday)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'startDate') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.startDate)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'finishDate') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.finishDate)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'userData') {\n            return <StudentLoginData {...cellProps} />;\n        }\n\n        if (column.name === 'documentRequestsList') {\n            return <DocumentRequestsList {...cellProps} />;\n        }\n\n        if (column.name === 'formaObuch') {\n            return <FormaObuchComponent {...cellProps} />;\n        }\n\n        return <Table.Cell {...cellProps} />;\n    })\n\n\n    return (\n        <div className={'Students_list'}>\n            <HeaderBar/>\n\n            <Container className={'Root-container'}>\n                <Paper className={'Student_list_table'} style={{position: 'relative', minHeight: '459px'}}>\n                    <div className={\"table-description\"}>\n                        <Typography variant={'h6'} className={'table-title'}>\n                            Список студентов\n                        </Typography>\n                        <Button color={'primary'}\n                                variant={'contained'}\n                                disabled={!filters?.length}\n                                onClick={() => {\n                                    setFiltersNeedReset(true)\n                                }}\n                        >\n                            Сброс фильтров\n                        </Button>\n                        <div className={'table-controls'}>\n                            <Link to={'/students/archived'}>\n\n                                <Button color={'primary'}\n                                        variant={'contained'}\n                                        style={{\n                                            marginRight: '30px',\n                                        }}\n                                >\n                                    Архив\n                                </Button>\n                            </Link>\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    style={{\n                                        marginRight: '30px',\n                                    }}\n                                    onClick={() => {\n                                        props.exportStudents(currentHiddenColumnNames, filters)\n                                    }}\n                            >\n                                Экспорт\n                            </Button>\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        updateList()\n                                    }}\n                            >\n                                Обновить\n                            </Button>\n                        </div>\n                    </div>\n                    <DxGrid\n                        rows={rows}\n                        columns={columns}\n                        getRowId={getRowId}\n                    >\n                        <Toolbar/>\n                        <FilteringState\n                            columnExtensions={filteringStateColumnExtensions}\n                            onFiltersChange={debouncedSetFilters}\n                        />\n                        <SortingState\n                            sorting={sorting}\n                            onSortingChange={onSortingChange}\n                            columnExtensions={sortingStateColumnExtensions}\n                        />\n                        <PagingState\n                            currentPage={page}\n                            onCurrentPageChange={setPage}\n                            pageSize={pageSize}\n                        />\n                        <CustomPaging\n                            totalCount={rowCount}\n                        />\n                        <EditingState\n                            onCommitChanges={commitChanges}\n                        />\n\n                        <Table\n                            cellComponent={Cell}\n                        />\n                        <TableColumnResizing\n                            defaultColumnWidths={columnsWidth}\n                        />\n                        <TableColumnVisibility\n                            defaultHiddenColumnNames={defaultHiddenColumnNames}\n                            onHiddenColumnNamesChange={setCurrentHiddenColumnNames}\n\n                        />\n                        <TableHeaderRow\n                            showSortingControls\n                        />\n                        <TableEditColumn\n                            showEditCommand\n                            messages={editColumnMessages}\n                        />\n                        <TableFilterRow\n                            messages={filterRowMessages}\n                            editorComponent={(p: any) => (\n                                <DxCustomFilter\n                                    filtersNeedReset={filtersNeedReset}\n                                    setFiltersNeedReset={setFiltersNeedReset}\n                                    {...p}/>\n                            )}\n                        />\n                        <PopupEditing popupComponent={Popup}/>\n                        <PagingPanel/>\n                        <ColumnChooser/>\n\n                    </DxGrid>\n                    {loading && <Loading/>}\n                </Paper>\n            </Container>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        editStudent: (userId: number, values: any, cb: Function) => {\n            dispatch(editStudent(userId, values, cb))\n        },\n        exportStudents: (restrictedColumns: any[], filters: any[], type?: string | undefined) => {\n            dispatch(exportStudents(restrictedColumns, filters, type))\n        },\n        getStudentsList: (\n            limit: string | number,\n            offset: string | number,\n            page: string | number,\n            sort?: Sorting[],\n            filters?: Filter[],\n        ) => {\n            dispatch(getStudentsList(limit, offset, page, sort, filters))\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(React.memo(Students_list)))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalStudentData\\ModalStudentData.tsx",["306","307","308"],"import React, {useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {Loading} from '../Loading/Loading';\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, FormGroup, Grid, InputLabel, Select, TextField} from \"@material-ui/core\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {SnackBarUtils} from \"../SnackBarUtils/SnackBarUtils\";\nimport {getLocalDate} from \"../Dates\";\n\nfunction StudentDataModal(props: any) {\n    const [open, setOpen] = useState<boolean>(false);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [student, setStudent] = useState<any>({})\n\n    const [groups, setGroups] = useState<any>([])\n    const [groupsLoading, setGroupsLoading] = useState<boolean>(true);\n\n    const userId: number = props.userId\n\n    function openDialog() {\n        setOpen(true)\n    }\n\n    function closeDialog() {\n        setOpen(false)\n    }\n\n    useEffect(() => {\n        if (open) {\n            setLoading(true)\n\n            axios.get(process.env.REACT_APP_ADMIN_STUDENT_GET + `?userId=${props.userId}`)\n                .then((res: AxiosResponse) => {\n                    setStudent(res.data.data)\n                    setLoading(false)\n                })\n                .catch(() => {\n                    SnackBarUtils.error('Ошибка загрузки данных студента')\n                    setOpen(false)\n                })\n\n            setGroups([])\n            setGroupsLoading(true)\n\n            axios.get(process.env.REACT_APP_ADMIN_STUDENT_EDIT_GETALL_GROUPS + ``)\n                .then((res: AxiosResponse) => {\n                    const _groups: Array<any> = res.data.data\n                    setGroups(_groups)\n                    setGroupsLoading(false)\n                })\n                .catch(() => {\n                    SnackBarUtils.error('Ошибка загрузки списка групп')\n                    setGroups(false)\n                    setGroupsLoading(false)\n                })\n        }\n    }, [open])\n\n    return (\n        <>\n            <Button color={'primary'}\n                    variant={'contained'}\n                    onClick={() => {\n                        openDialog()\n                    }}\n            >\n                Показать\n            </Button>\n            <Dialog\n                open={open}\n                maxWidth={'sm'}\n                fullWidth={true}\n                onClose={closeDialog}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Данные студента (только чтение)</DialogTitle>\n                <DialogContent>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} md={4}>\n                            <FormGroup>\n\n                                <TextField\n                                    margin=\"normal\"\n                                    name=\"surname\"\n                                    label=\"Фамилия\"\n                                    value={student.surname || 'Загрузка...'}\n                                />\n\n                                <TextField\n                                    margin=\"normal\"\n                                    name=\"name\"\n                                    label=\"Имя\"\n                                    value={student.name || 'Загрузка...'}\n                                />\n\n                                <TextField\n                                    margin=\"normal\"\n                                    name=\"patronymic\"\n                                    label=\"Отчество\"\n                                    value={student.patronymic || 'Загрузка...'}\n                                />\n\n                                <FormControl margin={'normal'}>\n                                    <InputLabel>Пол</InputLabel>\n                                    <Select\n                                        native\n                                        name={'gender'}\n                                        value={student.gender || ''}\n                                    >\n                                        <option aria-label=\"None\" value=\"\"/>\n                                        <option value={'мужской'}>Мужской</option>\n                                        <option value={'женский'}>Женский</option>\n                                    </Select>\n                                </FormControl>\n\n                            </FormGroup>\n                        </Grid>\n\n                        <Grid item xs={12} md={4}>\n                            <FormGroup>\n\n                                <FormControl margin={'normal'}>\n                                    <InputLabel>Форма обучения</InputLabel>\n                                    <Select\n                                        native\n                                        name={'formaObuch'}\n                                        value={student.formaObuch || ''}\n                                    >\n                                        <option value={0}>Бюджетная</option>\n                                        <option value={1}>Платная</option>\n                                    </Select>\n                                </FormControl>\n\n                                <FormControl margin={'normal'}>\n                                    <InputLabel>Группа</InputLabel>\n                                    <Select\n                                        native\n                                        name={'group'}\n                                        value={student.group}\n                                        disabled={groupsLoading || !groups?.length}\n                                    >\n                                        {\n                                            !groupsLoading\n                                                ?\n                                                groups?.length\n                                                    ? (\n                                                        <>\n                                                            {\n                                                                [1, 2, 3, 4].map((kurs) => {\n                                                                    return <optgroup key={kurs} label={`${kurs} курс`}>\n                                                                        {\n                                                                            groups.map((el: any, i: number, arr: Array<any>) => {\n                                                                                if (kurs === el.kurs) {\n                                                                                    return (\n                                                                                        <option key={el.id} value={el.id}>{el.groupName}</option>\n                                                                                    )\n                                                                                } else {\n\n                                                                                }\n                                                                            })\n                                                                        }\n                                                                    </optgroup>\n                                                                })\n                                                            }\n                                                        </>\n                                                    )\n\n                                                    : <option key={-2} value={-1}>Ошибка загрузки</option>\n                                                : <option key={-1} value={-1}>Загрузка...</option>\n                                        }\n                                    </Select>\n                                </FormControl>\n\n                                <TextField\n                                    margin=\"normal\"\n                                    name=\"diplomaId\"\n                                    label=\"Номер диплома\"\n                                    value={student.diplomaId || ''}\n                                    disabled={student.kurs !== 4}\n                                />\n\n                            </FormGroup>\n                        </Grid>\n\n                        <Grid item xs={12} md={4}>\n                            <FormGroup>\n\n                                <TextField\n                                    margin=\"normal\"\n                                    name=\"kurs\"\n                                    label=\"Курс\"\n                                    value={student.kurs || ''}\n                                />\n\n                                <TextField\n                                    margin=\"normal\"\n                                    name=\"prikazDate\"\n                                    label=\"Дата зачисления\"\n                                    value={student.prikazDate || ''}\n                                />\n\n                                <TextField\n                                    margin=\"normal\"\n                                    name=\"startDate\"\n                                    label=\"Год зачисления\"\n                                    value={getLocalDate(student.startDate) || ''}\n                                />\n\n                                <TextField\n                                    margin=\"normal\"\n                                    name=\"finishDate\"\n                                    label=\"Год выпуска\"\n                                    value={getLocalDate(student.finishDate) || ''}\n                                />\n\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={closeDialog} color=\"primary\">\n                        Закрыть\n                    </Button>\n                </DialogActions>\n                {loading && <Loading/>}\n            </Dialog>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(StudentDataModal))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalOrderPrepare\\ModalOrderPrepareSpravkaObObucheni.tsx",["309","310"],"import React, {useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {Loading} from '../Loading/Loading';\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, FormGroup, Grid, TextField} from \"@material-ui/core\";\nimport {logout} from \"../../redux/actions/actionsAuth\";\nimport axios, {AxiosResponse} from \"axios\";\nimport _ from \"lodash\";\nimport {SnackBarUtils} from \"../SnackBarUtils/SnackBarUtils\";\nimport ModalPreviewDocument from \"../ModalPreviewDocument/ModalPreviewDocument\";\n\nfunction PrepareOrder(props: any) {\n    const {row, updateList} = props\n\n    const [open, setOpen] = useState(false);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [loading, setLoading] = useState(true);\n\n    const [preparedData, setPreparedData] = useState<any>({\n        docType: '',\n        orderId: row.id,\n        outputDocName: '',\n        previewToken: '',\n        vars: {\n            \"Фамилия\": '',\n            \"Имя\": '',\n            \"Отчество\": '',\n            \"Курс\": -1,\n            \"Группа\": '',\n            \"ФормаОбучения\": '',\n            \"БюджетПлат\": '',\n            \"НачалоУчебы\": '',\n            \"КонецУчебы\": '',\n        },\n    })\n\n    function openDialog() {\n        setOpen(true)\n    }\n\n    function closeDialog() {\n        if (!isSubmitting) {\n            setOpen(false)\n        }\n    }\n\n    function handleSubmit() {\n        setLoading(true)\n\n        axios.post(process.env.REACT_APP_ADMIN_ORDER_FULLFILL_DOCUMENT + ``,\n            {\n                ...preparedData,\n                fullFilled: 1\n            })\n            .then((r: AxiosResponse) => {\n                setLoading(false)\n                updateList()\n            })\n            .catch(() => {\n                SnackBarUtils.error('Ошибка создания документа')\n                // setOpen(false)\n            })\n    }\n\n\n    useEffect(() => {\n        if (open) {\n            setLoading(true)\n\n            //получить данные для проверки\n            axios.get(process.env.REACT_APP_ADMIN_ORDER_GENERATE_DOCUMENT +\n                `?orderId=${row.id}&fullFilled=${row.fullFilled}`,\n            )\n                .then((r: AxiosResponse) => {\n                    setPreparedData(r.data.data)\n                    setLoading(false)\n                })\n                .catch(() => {\n                    SnackBarUtils.error('Ошибка получения данных')\n                    setOpen(false)\n                })\n        }\n\n    }, [open])\n\n    return (\n        <>\n            <Button color={'primary'}\n                    variant={'contained'}\n                    onClick={() => {\n                        openDialog()\n                    }}\n            >\n                Создать\n            </Button>\n            <Dialog\n                open={open}\n                maxWidth={'sm'}\n                fullWidth={true}\n                onClose={closeDialog}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <form onSubmit={(e: any) => {\n                    e.preventDefault()\n                    handleSubmit()\n                }}>\n                    <DialogTitle id=\"form-dialog-title\">Проверка данных</DialogTitle>\n                    <DialogContent>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} md={12}>\n                                {preparedData.previewToken?.length > 0\n                                    ? <ModalPreviewDocument\n                                        previewedURL={encodeURIComponent(process.env.REACT_APP_ADMIN_DOWNLOAD_PREVIEW +\n                                            `?orderId=${(preparedData.orderId)}&AccessToken=${(preparedData.previewToken)}`)}\n                                    />\n                                    : 'Ожидание деталей...'}\n                            </Grid>\n\n                            <Grid item xs={12} md={4}>\n                                <FormGroup>\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"Фамилия\"\n                                        label=\"Фамилия\"\n                                        value={preparedData.vars[\"Фамилия\"]}\n                                        onChange={(e) => {\n                                            if (e.target.value !== undefined) {\n                                                let _preparedData = _.cloneDeep(preparedData)\n                                                _preparedData.vars[\"Фамилия\"] = e.target.value\n                                                setPreparedData(_preparedData)\n                                            }\n                                        }}\n                                    />\n\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"Имя\"\n                                        label=\"Имя\"\n                                        value={preparedData.vars[\"Имя\"]}\n                                        onChange={(e) => {\n                                            if (e.target.value !== undefined) {\n                                                let _preparedData = _.cloneDeep(preparedData)\n                                                _preparedData.vars[\"Имя\"] = e.target.value\n                                                setPreparedData(_preparedData)\n                                            }\n                                        }}\n                                    />\n\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"Отчество\"\n                                        label=\"Отчество\"\n                                        value={preparedData.vars[\"Отчество\"]}\n                                        onChange={(e) => {\n                                            if (e.target.value !== undefined) {\n                                                let _preparedData = _.cloneDeep(preparedData)\n                                                _preparedData.vars[\"Отчество\"] = e.target.value\n                                                setPreparedData(_preparedData)\n                                            }\n                                        }}\n                                    />\n\n                                </FormGroup>\n                            </Grid>\n\n                            <Grid item xs={12} md={4}>\n                                <FormGroup>\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"Курс\"\n                                        label=\"Курс\"\n                                        type={'number'}\n                                        inputProps={{min: 1, max: 4}}\n                                        value={preparedData.vars[\"Курс\"]}\n                                        onChange={(e) => {\n                                            if (e.target.value !== undefined) {\n                                                if (parseInt(e.target.value) <= 4 && parseInt(e.target.value) >= 1) {\n                                                    let _preparedData = _.cloneDeep(preparedData)\n                                                    _preparedData.vars[\"Курс\"] = e.target.value\n                                                    setPreparedData(_preparedData)\n                                                }\n                                            }\n                                        }}\n                                    />\n\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"Группа\"\n                                        label=\"Группа\"\n                                        value={preparedData.vars[\"Группа\"]}\n                                        onChange={(e) => {\n                                            if (e.target.value !== undefined) {\n                                                let _preparedData = _.cloneDeep(preparedData)\n                                                _preparedData.vars[\"Группа\"] = e.target.value\n                                                setPreparedData(_preparedData)\n                                            }\n                                        }}\n                                    />\n\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"ФормаОбучения\"\n                                        label=\"Форма обучения\"\n                                        value={preparedData.vars[\"ФормаОбучения\"]}\n                                        onChange={(e) => {\n                                            if (e.target.value !== undefined) {\n                                                let _preparedData = _.cloneDeep(preparedData)\n                                                _preparedData.vars[\"ФормаОбучения\"] = e.target.value\n                                                setPreparedData(_preparedData)\n                                            }\n                                        }}\n                                    />\n\n                                </FormGroup>\n                            </Grid>\n\n                            <Grid item xs={12} md={4}>\n                                <FormGroup>\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"БюджетПлат\"\n                                        label=\"Бюджетно / Платно\"\n                                        value={preparedData.vars[\"БюджетПлат\"]}\n                                        onChange={(e) => {\n                                            if (e.target.value !== undefined) {\n                                                let _preparedData = _.cloneDeep(preparedData)\n                                                _preparedData.vars[\"БюджетПлат\"] = e.target.value\n                                                setPreparedData(_preparedData)\n                                            }\n                                        }}\n                                    />\n\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"НачалоУчебы\"\n                                        label=\"Начало учебы\"\n                                        value={preparedData.vars[\"НачалоУчебы\"]}\n                                        onChange={(e) => {\n                                            if (e.target.value !== undefined) {\n                                                let _preparedData = _.cloneDeep(preparedData)\n                                                _preparedData.vars[\"НачалоУчебы\"] = e.target.value\n                                                setPreparedData(_preparedData)\n                                            }\n                                        }}\n                                    />\n\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"КонецУчебы\"\n                                        label=\"Конец учебы\"\n                                        value={preparedData.vars[\"КонецУчебы\"]}\n                                        onChange={(e) => {\n                                            if (e.target.value !== undefined) {\n                                                let _preparedData = _.cloneDeep(preparedData)\n                                                _preparedData.vars[\"КонецУчебы\"] = e.target.value\n                                                setPreparedData(_preparedData)\n                                            }\n                                        }}\n                                    />\n\n                                </FormGroup>\n                            </Grid>\n\n                            <Grid item xs={12} md={12}>\n                                <FormGroup>\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"outputDocName\"\n                                        label=\"Название файла\"\n                                        value={preparedData[\"outputDocName\"]}\n                                        disabled={true}\n                                        onChange={(e) => {\n                                            if (e.target.value !== undefined) {\n                                                let _preparedData = _.cloneDeep(preparedData)\n                                                _preparedData[\"outputDocName\"] = e.target.value\n                                                setPreparedData(_preparedData)\n                                            }\n                                        }}\n                                    />\n                                </FormGroup>\n                            </Grid>\n\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={closeDialog} color=\"primary\">\n                            Отмена\n                        </Button>\n                        <Button type={'submit'} color=\"primary\">\n                            Сохранить\n                        </Button>\n                    </DialogActions>\n                </form>\n                {loading && <Loading/>}\n            </Dialog>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        logout: () => {\n            dispatch(logout());\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(PrepareOrder))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Student\\Order_docs\\Order_docs.tsx",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\HOC\\requireAuth.tsx",["311","312","313"],"import React, {ReactComponentElement, useEffect} from \"react\";\nimport {Redirect} from \"react-router\";\nimport {tokenCheck} from \"../../redux/actions/actionsAuth\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router-dom\";\n\nexport default function (ComposedComponent: any): any {\n     function Authenticate(props: any) {\n        // useEffect(() => {\n        //     props.tokenCheck();\n        //     // eslint-disable-next-line\n        // },[]);\n\n        return props.isAuthenticated ? ComposedComponent : <Redirect to={'/login'}/>\n    }\n\n    const mapStateToProps = (state: any) => {\n        return {\n            isAuthenticated: state.Auth.isAuthenticated,\n        }\n    };\n    const mapDispatchToProps = (dispatch: any) => {\n        return {\n            tokenCheck: (cb: Function) => {\n                dispatch(tokenCheck(cb));\n            },\n        }\n    };\n    return connect(mapStateToProps, mapDispatchToProps)(withRouter(Authenticate));\n}","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\HOC\\alreadyAuthed.tsx",["314","315","316"],"import React, {ReactComponentElement, useEffect} from \"react\";\nimport {Redirect} from \"react-router\";\nimport {tokenCheck} from \"../../redux/actions/actionsAuth\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router-dom\";\n\nexport default function (ComposedComponent: any): any {\n    function Authenticate(props: any) {\n        // useEffect(() => {\n        //     props.tokenCheck();\n        //     // eslint-disable-next-line\n        // },[]);\n        return props.isAuthenticated ? <Redirect to={'/'}/> : ComposedComponent\n    }\n\n    const mapStateToProps = (state: any) => {\n        return {\n            isAuthenticated: state.Auth.isAuthenticated,\n        }\n    };\n    const mapDispatchToProps = (dispatch: any) => {\n        return {\n            tokenCheck: () => {\n                dispatch(tokenCheck());\n            },\n        }\n    };\n    return connect(mapStateToProps, mapDispatchToProps)(withRouter(Authenticate));\n}","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\lk\\lk.tsx",["317","318","319","320"],"import React, {useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport './lk.scss'\nimport {Button, Container, Grid, Paper, Typography} from '@material-ui/core'\nimport {ordersGet, userInfoGet} from \"../../redux/actions/actionsLk\";\nimport {getLocalDate, getLocalPlainDateTime} from '../../additional_components/Dates';\nimport HeaderBar from \"../../additional_components/HeaderBar/HeaderBar\";\nimport {cancelOrder} from \"../../redux/actions/actionsOrders\";\nimport {Column, CustomPaging, PagingState, Sorting, SortingState, TableColumnWidthInfo} from \"@devexpress/dx-react-grid\";\nimport {Grid as DxGrid, PagingPanel, Table, TableColumnResizing, TableHeaderRow} from \"@devexpress/dx-react-grid-material-ui\";\nimport {Loading} from \"../../additional_components/Loading/Loading\";\nimport ModalOrderComment from \"../../additional_components/ModalOrderComment/ModalOrderComment\";\n\nfunction Lk(props: any) {\n    let _isMounted = false\n\n    const [userInfoLoading, setUserInfoLoading] = useState(true)\n    const [orderListLoading, setOrderListLoading] = useState(true)\n\n    const [rows, setRows] = useState<any[]>([])\n    const [rowCount, setRowCount] = useState<number>(0)\n\n    const [columns] = useState<Column[]>([\n        {name: 'id', title: 'Номер'},\n        {name: 'title', title: 'Документ'},\n        {name: 'status', title: 'Статус'},\n        {name: 'createdAt', title: 'Дата заказа'},\n        {name: 'comment', title: 'Комментарий'},\n        {name: 'actions', title: 'Действия'},\n    ])\n    const [columnsWidth] = useState<TableColumnWidthInfo[]>([\n        {columnName: 'id', width: 120},\n        {columnName: 'title', width: 200},\n        {columnName: 'status', width: 140},\n        {columnName: 'createdAt', width: 180},\n        {columnName: 'comment', width: 135},\n        {columnName: 'actions', width: 160},\n    ])\n\n    const [sorting, setSorting] = useState<Sorting[]>([])\n    const [sortingStateColumnExtensions] = useState([\n        {columnName: 'actions', sortingEnabled: false},\n    ])\n\n    const [page, setPage] = useState<number>(0)\n    const [pageSize, setPageSize] = useState<number>(6)\n\n    function updateUserInfo() {\n        props.userInfoGet(() => {\n            if (_isMounted) {\n                setUserInfoLoading(false)\n            }\n        })\n    }\n\n    function updateOrderList() {\n        setOrderListLoading(true)\n        if (props.User.role === 'admin') {\n            props.ordersGet(\n                -1,\n                -1,\n                -1,\n                [],\n                () => {\n                    setOrderListLoading(false)\n                }\n            )\n        } else if (props.User.role === 'student') {\n            props.ordersGet(\n                pageSize,\n                page * pageSize,\n                page,\n                sorting,\n                () => {\n                    setOrderListLoading(false)\n                }\n            )\n        }\n    }\n\n    const onSortingChange = (newColumnsSort: Array<any>) => {\n        let indexToRemove = -1;\n        newColumnsSort.forEach((column, index) => {\n            let columnToCheck = sorting.filter(\n                (c) => c.columnName === column.columnName\n            );\n\n            if (\n                columnToCheck.length > 0 &&\n                columnToCheck[0].direction !== column.direction &&\n                column.direction === \"asc\"\n            ) {\n                indexToRemove = index;\n            }\n        });\n        if (indexToRemove > -1) newColumnsSort.splice(indexToRemove, 1);\n        setSorting(newColumnsSort);\n    }\n\n    // console.log(page * pageSize,( page + 1) * pageSize);\n\n    useEffect(() => {\n        _isMounted = true\n\n        setUserInfoLoading(true)\n        setOrderListLoading(true)\n        updateUserInfo()\n\n        return () => {\n            _isMounted = false\n        }\n    }, [])\n\n    //обновление заказа при листании и init\n    useEffect(() => {\n        if (props.User.role && _isMounted) {\n            updateOrderList()\n        }\n    }, [props.User.role, page, pageSize, sorting])\n\n    useEffect(() => {\n        setRows(props.User.orders.orders)\n        setRowCount(props.User.orders.ordersCount)\n    }, [props.User.orders.orders])\n\n    const handleCancelOrder = (orderId: any) => {\n        props.cancelSpravkaObObuchenii(orderId, () => {\n            updateOrderList()\n        })\n    }\n\n    const Cell = React.memo((cellProps: any) => {\n        const {column, row} = cellProps;\n\n        if (column.name === 'createdAt') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalPlainDateTime(row.createdAt)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'comment' && row.comment) {\n            return (\n                <Table.Cell {...cellProps}>\n                    <ModalOrderComment comment={row.comment.toString()}/>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'status') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>{\n                        row.status === 0\n                            ? 'Готово'\n                            : row.status === 1 ? 'В обработке' : row.status === -1 ? 'Отклонено' : 'Ошибка'}</span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'actions') {\n            if (row.status === 1) {\n                return (\n                    <Table.Cell {...cellProps}>\n                        <Button color={'secondary'}\n                                variant={'contained'}\n                                onClick={() => {\n                                    setOrderListLoading(true)\n                                    handleCancelOrder(row.id)\n                                }}\n                        >\n                            Отмена\n                        </Button>\n                    </Table.Cell>\n                )\n            }\n        }\n\n        return <Table.Cell {...cellProps} />;\n    })\n\n    return (\n        <div>\n            <HeaderBar/>\n\n            <Container className={'Root-container'}>\n                <Grid container spacing={3}>\n                    <Grid item md={4} xs={12}>\n                        <Paper elevation={3} className={'PaperRelative'}>\n                            <div className={'StudentInfo'}>\n\n                                {\n                                    props.User.name\n                                        ? (\n                                            <Typography variant={'body1'}>\n                                                ФИО: {props.User.surname} {props.User.name} {props.User.patronymic}\n                                            </Typography>\n                                        )\n                                        : ''\n                                }\n\n\n                                {\n                                    props.User.gender\n                                        ? (\n                                            <Typography variant={'body1'}>\n                                                Пол: {props.User.gender}\n                                            </Typography>\n                                        )\n                                        : ''\n                                }\n\n\n                                {\n                                    props.User.birthday\n                                        ? (\n                                            <Typography variant={'body1'}>\n                                                Дата рождения: {getLocalDate(props.User.birthday)}\n                                            </Typography>\n                                        )\n                                        : ''\n                                }\n\n\n                                {\n                                    props.User.formaObuch !== ''\n                                        ? props.User.formaObuch === 0\n                                        ? (\n                                            <Typography variant={'body1'}>\n                                                Форма обучения: бюджетная\n                                            </Typography>\n                                        )\n                                        : (\n                                            <Typography variant={'body1'}>\n                                                Форма обучения: платная\n                                            </Typography>\n                                        )\n                                        : ''\n                                }\n\n                                {\n                                    props.User.groupName\n                                        ? (\n                                            <Typography variant={'body1'}>\n                                                Группа: {props.User.groupName}\n                                            </Typography>\n                                        )\n                                        : ''\n                                }\n\n                                {\n                                    props.User.role\n                                        ? (\n                                            <Typography variant={'body1'}>\n                                                Статус: {props.User.role === 'admin' ? 'Администратор' : 'Студент'}\n                                            </Typography>\n                                        )\n                                        : ''\n                                }\n\n                            </div>\n                            {userInfoLoading && <Loading/>}\n                        </Paper>\n                    </Grid>\n                    <Grid item md={8} xs={12}>\n                        <Paper elevation={3} className={'PaperRelative'}>\n                            {\n                                props.User.role === 'student'\n                                    ? (\n                                        <>\n                                            <div className={\"table-description\"}>\n                                                <Typography variant={'h6'}>\n                                                    Список заказов\n                                                </Typography>\n                                                <Button color={'primary'}\n                                                        variant={'contained'}\n                                                        onClick={() => {\n                                                            setOrderListLoading(true)\n                                                            updateOrderList()\n                                                        }}\n                                                >\n                                                    Обновить\n                                                </Button>\n                                            </div>\n                                            <DxGrid\n                                                rows={rows}\n                                                columns={columns}\n                                            >\n                                                <SortingState\n                                                    sorting={sorting}\n                                                    onSortingChange={onSortingChange}\n                                                    columnExtensions={sortingStateColumnExtensions}\n                                                />\n                                                <PagingState\n                                                    currentPage={page}\n                                                    onCurrentPageChange={setPage}\n                                                    pageSize={pageSize}\n                                                />\n                                                <CustomPaging\n                                                    totalCount={rowCount}\n                                                />\n                                                <Table\n                                                    cellComponent={Cell}\n                                                />\n                                                <TableColumnResizing\n                                                    defaultColumnWidths={columnsWidth}\n                                                />\n                                                <TableHeaderRow\n                                                    showSortingControls\n                                                />\n                                                <PagingPanel/>\n                                            </DxGrid>\n                                        </>\n                                    )\n                                    : ''\n                            }\n                            {\n                                props.User.role === 'admin'\n                                    ? (\n                                        <>\n\n                                            <div className={'ZakazInfo'}>\n                                                <div className={\"table-description\"}>\n                                                    <Typography variant={'h6'}>\n                                                        Сведения о заказах\n                                                    </Typography>\n                                                    <Button color={'primary'}\n                                                            variant={'contained'}\n                                                            onClick={() => {\n                                                                setOrderListLoading(true)\n                                                                updateOrderList()\n                                                            }}\n                                                    >\n                                                        Обновить\n                                                    </Button>\n                                                </div>\n                                                <div className={'ZakazTable'}>\n                                                    <Container className={'admin-zakaz-info'}>\n                                                        <Typography variant={'body1'} className={'zakaz-info-item'}>\n                                                            В обработке: {\n                                                            rows?.length\n                                                                ? rows[0].pending !== null ? rows[0].pending : 0\n                                                                : 'Загрузка...'\n                                                        }\n                                                        </Typography>\n                                                        <Typography variant={'body1'} className={'zakaz-info-item'}>\n                                                            Завершенных: {\n                                                            rows?.length\n                                                                ? rows[0].successful !== null ? rows[0].successful : 0\n                                                                : 'Загрузка...'\n                                                        }\n                                                        </Typography>\n                                                        <Typography variant={'body1'} className={'zakaz-info-item'}>\n                                                            Отклоненных: {\n                                                            rows?.length\n                                                                ? rows[0].canceled !== null ? rows[0].canceled : 0\n                                                                : 'Загрузка...'\n                                                        }\n                                                        </Typography>\n                                                        <Typography variant={'body1'} className={'zakaz-info-item'}>\n                                                            Всего заказов: {\n                                                            rows?.length\n                                                                ? rows[0].total\n                                                                : 'Загрузка...'\n                                                        }\n                                                        </Typography>\n                                                    </Container>\n                                                </div>\n                                            </div>\n                                        </>\n                                    )\n                                    : ''\n                            }\n                            {orderListLoading && <Loading/>}\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        userInfoGet: (cb?: Function) => {\n            dispatch(userInfoGet(cb))\n        },\n        ordersGet: (limit: number, offset: number, page: number, sorting: Sorting[], cb?: Function) => {\n            dispatch(ordersGet(limit, offset, page, sorting, cb))\n        },\n        cancelSpravkaObObuchenii: (orderId: string | number, cb?: Function) => {\n            dispatch(cancelOrder(orderId, cb))\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Lk))\n\n","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\auth\\login\\login.tsx",["321"],"import React, {useEffect} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport './login.scss'\nimport {Formik} from \"formik\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField} from '@material-ui/core'\nimport {login} from \"../../../redux/actions/actionsAuth\";\nimport {SnackBarUtils} from \"../../../additional_components/SnackBarUtils/SnackBarUtils\";\n\nfunction Login(props: any) {\n    let isMounted = false\n\n    useEffect(() => {\n        isMounted = true\n        return () => {\n            isMounted = false\n        }\n    }, [])\n\n    return (\n        <div className={''}>\n\n            <Dialog open={true}\n                    aria-labelledby={'login-form'}\n            >\n                <DialogTitle id={'login-form'}>Вход в личный кабинет</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>Система для заказа документов в учебной части.</DialogContentText>\n                    <DialogContentText>Данные для входа можно узнать в учебной части</DialogContentText>\n\n                    <Formik\n                        initialValues={{\n                            username: '',\n                            password: ''\n                        }}\n                        validate={(values) => {\n                            let errors: any = {}\n\n                            if (!values.username) {\n                                // console.log(values.username);\n                            }\n                            if (!values.password) {\n                                //\n                            }\n\n                            return errors\n                        }}\n                        onSubmit={(values, actions) => {\n                            if (!values.username || !values.password) {\n                                SnackBarUtils.warning('Не введен логин или пароль', {\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'center',\n                                    }\n                                })\n\n                                actions.setSubmitting(false);\n\n                            } else {\n                                actions.setSubmitting(true);\n                                const username = values.username\n                                const password = values.password\n\n                                props.login(username.trim().toLowerCase(), password, () => {\n                                    if (isMounted) {\n                                        actions.setSubmitting(false);\n                                    }\n                                })\n                            }\n                        }}\n                    >\n                        {fprops => (\n                            <form onSubmit={fprops.handleSubmit}>\n                                {fprops.errors.username && fprops.touched.username && <div>{fprops.errors.username}</div>}\n                                <TextField margin={'dense'}\n                                           label={'Логин'}\n                                           type={'text'}\n                                           fullWidth\n                                           onChange={fprops.handleChange}\n                                           onBlur={fprops.handleBlur}\n                                           value={fprops.values.username}\n                                           name=\"username\"\n                                />\n                                <TextField margin={'dense'}\n                                           label={'Пароль'}\n                                           type={'password'}\n                                           fullWidth\n                                           onChange={fprops.handleChange}\n                                           onBlur={fprops.handleBlur}\n                                           value={fprops.values.password}\n                                           name=\"password\"\n                                />\n                                {/*{props.errors.username && <div id=\"feedback\">{props.errors.username}</div>}*/}\n                                <DialogActions>\n                                    <Button type={'submit'} onClick={(e) => {\n                                        if (fprops.isSubmitting) {\n                                            e.preventDefault()\n                                        }\n                                    }}>\n                                        Войти\n                                    </Button>\n                                </DialogActions>\n                            </form>\n                        )}\n                    </Formik>\n                </DialogContent>\n            </Dialog>\n\n\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        isAuthenticated: state.Auth.isAuthenticated\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        login: (username: string, password: string, cb: Function) => {\n            dispatch(login(username, password, cb));\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Login))\n\n\n","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\HOC\\ProtectedLink.tsx",["322"],"import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport {logout, tokenCheck} from \"../../redux/actions/actionsAuth\";\nimport {AxiosResponse} from \"axios\";\n\nfunction ProtectedLink({component: Component, ...props}: any) {\n    //chooses function to run as callback after authcheck\n    function action(res: AxiosResponse) {\n        switch (props.action) {\n            case 'logout':\n                return logout();\n            case 'noAuth':\n                return noAuth();\n            default:\n                return requiredAuth(res);\n        }\n    }\n\n    //routes for authed users\n    function requiredAuth(res: any) {\n        if (res.status === 200) {\n            props.history.push(props.to);\n        } else {\n            // props.notification('warning', 'Для доступа к этой функции требуется авторизация');\n            props.history.push('/login')\n        }\n    }\n\n    // do not let enter if user is authed\n    function alreadyAuthed(response: any) {\n        if (response.status === 200) {\n            props.history.push('/');\n        } else {\n            props.history.push(props.to);\n        }\n    }\n\n    function logout() {\n        props.logout((res: AxiosResponse) => {\n            callback(res)\n        });\n        if (!!props.to) {\n            props.history.push(props.to)\n        }\n\n\n    }\n\n    function callback(res: AxiosResponse) {\n        if (!!props.onClick) {\n            props.onClick(res);\n        } else {\n            return false\n        }\n    }\n\n    //no auth needed for route\n    function noAuth() {\n        // props.tokenCheck();\n        props.history.push(props.to)\n    }\n\n    return (\n        <Link to={props.to ? props.to : ''}\n              className={props.className ? 'ProtectedLink ' + props.className : 'ProtectedLink'}\n              onClick={e => {\n                  e.preventDefault();\n\n                  props.tokenCheck((res: AxiosResponse) => {\n                      action(res)\n                  });\n\n\n              }}\n        >\n            {props.children}\n        </Link>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        isAuthenticated: state.Auth.isAuthenticated\n    }\n};\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        tokenCheck: (cb: Function) => {\n            dispatch(tokenCheck(cb));\n        },\n        logout: (cb: Function) => {\n            dispatch(logout(cb));\n        }\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ProtectedLink));\n","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\redux\\actions\\actionsOrders.ts",["323","324"],"import axios, {AxiosResponse} from \"axios\"\nimport {tokenCheck} from \"./actionsAuth\";\nimport {SnackBarUtils} from \"../../additional_components/SnackBarUtils/SnackBarUtils\"\nimport {Filter, Sorting} from \"@devexpress/dx-react-grid\";\n\n//все запросы включают токен\naxios.defaults.withCredentials = true\n\nexport function orderSpravkaObObuchenii(count: number, comment: string | undefined, cb?: Function | undefined): any {\n    return async (dispatch: any) => {\n        return await axios.post(process.env.REACT_APP_ORDER_CREATE_SPRAVKA_OB_OBUCHENII + '',\n            {\n                count: count,\n                comment: comment,\n                type: 'справка_об_обучении',\n            })\n            .then((res) => {\n                SnackBarUtils.success('Заявка отправлена')\n\n                if (cb) {\n                    cb(res)\n                }\n            })\n            .catch(e => {\n                try {\n                    let responseMsg = e.response.data.msg\n                    let responseData = e.response.data.data\n\n\n                    switch (responseMsg) {\n                        case 'Order limit reached':\n                            SnackBarUtils.error('Достигнут лимит заказов \"Справка с места обучения\"')\n                            break\n                        case 'Order count is more than can order':\n                            SnackBarUtils.error(`Вы заказываете справок больше чем разрешено (осталось ${responseData.left})`)\n                            break\n                        default:\n                            SnackBarUtils.error('Попробуйте повторить операцию позже')\n                    }\n                } catch (e) {\n                    SnackBarUtils.error('Попробуйте повторить операцию позже')\n                }\n                //check if tokens expired already\n                dispatch(tokenCheck())\n\n                if (cb) {\n                    cb()\n                }\n            })\n    }\n}\n\nexport function cancelOrder(orderId: string | number, cb?: Function | undefined): any {\n    return async (dispatch: any) => {\n        return await axios.delete(process.env.REACT_APP_ORDER_CANCEL + `?orderId=${orderId}`,\n        )\n            .then((res) => {\n                SnackBarUtils.success('Заказ отменен')\n\n                if (cb) {\n                    cb(res)\n                }\n            })\n            .catch(e => {\n                const res = e.response\n                //check if tokens expired already\n                dispatch(tokenCheck())\n                SnackBarUtils.error('Попытайтесь отменить заказ позднее')\n\n                if (cb) {\n                    cb(res)\n                }\n            })\n    }\n}\n\nexport function getOrdersListToRedux(res: AxiosResponse): object {\n    return {\n        type: \"ORDERS_LIST_GET\",\n        payload: res\n    }\n}\n\nexport function getOrdersListLoadingStateToRedux(loading: boolean): object {\n    return {\n        type: \"ORDERS_LIST_LOADING_STATE\",\n        payload: loading\n    }\n}\n\nexport function getOrdersList(\n    limit: string | number,\n    offset: string | number,\n    page: string | number,\n    sort?: Sorting[],\n    filters?: Filter[],\n): any {\n    return async (dispatch: any) => {\n        dispatch(getOrdersListLoadingStateToRedux(true))\n        return await axios.post(process.env.REACT_APP_ADMIN_ORDERS_LIST + ``,\n            {\n                offset: offset,\n                limit: limit,\n                page: page,\n                sort: sort,\n                filters: filters,\n            }\n        )\n            .then((res) => {\n                dispatch(getOrdersListToRedux(res))\n            })\n            .catch(e => {\n                const res = e.response\n                //check if tokens expired already\n                dispatch(tokenCheck())\n                SnackBarUtils.error('Ошибка загрузки списка')\n\n            })\n            .finally(() => {\n                dispatch(getOrdersListLoadingStateToRedux(false))\n            })\n    }\n}\n\nexport function getArchivedOrdersListToRedux(res: AxiosResponse): object {\n    return {\n        type: \"ARCHIVED_ORDERS_LIST_GET\",\n        payload: res\n    }\n}\n\nexport function getArchivedOrdersListLoadingStateToRedux(loading: boolean): object {\n    return {\n        type: \"ARCHIVED_ORDERS_LIST_LOADING_STATE\",\n        payload: loading\n    }\n}\n\nexport function getArchivedOrdersList(\n    limit: string | number,\n    offset: string | number,\n    page: string | number,\n    sort?: Sorting[],\n    filters?: Filter[],\n): any {\n    return async (dispatch: any) => {\n        dispatch(getArchivedOrdersListLoadingStateToRedux(true))\n        return await axios.post(process.env.REACT_APP_ADMIN_ORDERS_LIST_ARCHIVED + ``,\n            {\n                offset: offset,\n                limit: limit,\n                page: page,\n                sort: sort,\n                filters: filters,\n            }\n        )\n            .then((res) => {\n                dispatch(getArchivedOrdersListToRedux(res))\n            })\n            .catch(e => {\n                const res = e.response\n                //check if tokens expired already\n                dispatch(tokenCheck())\n                SnackBarUtils.error('Ошибка загрузки списка')\n\n            })\n            .finally(() => {\n                dispatch(getArchivedOrdersListLoadingStateToRedux(false))\n            })\n    }\n}\n","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalOrderComment\\ModalOrderComment.tsx",[],"C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalPreviewDocument\\ModalPreviewDocument.tsx",["325"],"import React, {useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid} from \"@material-ui/core\";\n\nfunction PrepareOrder(props: any) {\n    const previewedURL: string = props.previewedURL\n\n    const [open, setOpen] = useState(false);\n    const [link, setLink] = useState(`https://docs.google.com/viewer?embedded=true&url=${(previewedURL)}`);\n    // console.log(previewedURL)\n    function openDialog() {\n        setOpen(true)\n    }\n\n    function closeDialog() {\n        setOpen(false)\n    }\n\n    return (\n        <>\n            <Button color={'primary'}\n                    variant={'contained'}\n                    onClick={() => {\n                        openDialog()\n                    }}\n            >\n                Предпросмотр\n            </Button>\n            <Dialog\n                open={open}\n                maxWidth={'lg'}\n                fullWidth={true}\n                onClose={closeDialog}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Предпросмотр документа</DialogTitle>\n                <DialogContent>\n                    <Grid container spacing={2}>\n\n                        <Grid item xs={12} md={12}>\n                            <iframe\n                                width={'100%'}\n                                height={'600px'}\n                                src={link}\n                                frameBorder=\"0\"\n                            >\n                            </iframe>\n                        </Grid>\n\n                        <Grid item xs={12} md={12}>\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        setLink(link + ' ')\n                                    }}\n                            >\n                                Обновить\n                            </Button>\n                        </Grid>\n\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={closeDialog} color=\"primary\">\n                        Отмена\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {}\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(PrepareOrder))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\EditGroupColumn\\EditGroupColumn.tsx",["326","327","328"],"//ctrl+c ctrl+v material-ui.com editing rows\nimport React, {useEffect, useRef, useState} from \"react\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {SnackBarUtils} from \"../SnackBarUtils/SnackBarUtils\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, FormGroup, Grid, InputLabel, Select, TextField} from \"@material-ui/core\";\nimport {Plugin, Template, TemplateConnector, TemplatePlaceholder} from \"@devexpress/dx-react-core\";\nimport {DatePicker} from \"@material-ui/pickers\";\n\nexport const getRowId = (row: any) => row.id\n\nexport const Popup = React.memo(({\n                                     row,\n                                     onChange,\n                                     onApplyChanges,\n                                     onCancelChanges,\n                                     open,\n                                 }: any) => {\n    const [facultetLoading, setFacultetLoading] = useState<boolean>(true);\n    const [facultetList, setFacultetList] = useState<any[]>();\n    const facultetRef: any = useRef();\n\n    const [kurs, setKurs] = useState<number>();\n    const [groupName, setGroupName] = useState<number>();\n\n\n    useEffect(() => {\n        if (open) {\n            setKurs(row.kurs)\n            setGroupName(row.groupName)\n            axios.get(process.env.REACT_APP_ADMIN_FACULTETS_GET + ``)\n                .then((res: AxiosResponse) => {\n                    setFacultetList(res.data.data)\n                    setFacultetLoading(false)\n                    if (facultetRef) {\n                        if (facultetRef?.current?.querySelector('select')) {\n                            if (row.facultet !== facultetRef?.current.querySelector('select').value) {\n                                facultetRef.current.querySelector('select').value = row.facultet\n                            }\n                        }\n                    }\n                })\n                .catch((e) => {\n                    console.log(e)\n                    SnackBarUtils.error('Ошибка загрузки отделений')\n                    setFacultetLoading(false)\n                })\n        }\n    }, [open])\n\n    return (\n        <Dialog\n            open={open}\n            fullWidth={true}\n            maxWidth={'md'}\n            onClose={onCancelChanges}\n            aria-labelledby=\"form-dialog-title\"\n        >\n            <DialogTitle id=\"form-dialog-title\">Редактирование группы {groupName}</DialogTitle>\n            <DialogContent>\n                <Grid container spacing={3}>\n\n                    <Grid item xs={12} md={6}>\n                        <FormGroup>\n\n                            <TextField\n                                margin=\"normal\"\n                                name=\"kurs\"\n                                label=\"Курс\"\n                                type={'number'}\n                                inputProps={{min: 1, max: 4}}\n                                value={kurs}\n                                onChange={(e: any) => {\n                                    const value = e.target.value\n                                    if (parseInt(value) <= 4 && parseInt(value) >= 1 || value === '') {\n                                        setKurs(value)\n                                        onChange(e)\n                                    } else {\n                                        e.preventDefault()\n                                    }\n                                }}\n                            />\n\n                            <FormControl margin={'normal'}>\n                                <InputLabel>Статус группы</InputLabel>\n                                <Select\n                                    native\n                                    name=\"inProgress\"\n                                    defaultValue={row.inProgress}\n                                    onChange={onChange}\n                                >\n                                    <option value={1}>Учится</option>\n                                    <option value={0}>Выпущена</option>\n                                </Select>\n                            </FormControl>\n\n                            <TextField\n                                margin=\"normal\"\n                                name=\"groupName\"\n                                label=\"Название\"\n                                value={row.groupName || ''}\n                                onChange={onChange}\n                            />\n\n                            <FormControl margin={'normal'}>\n                                <InputLabel>Очная/заочная</InputLabel>\n                                <Select\n                                    native\n                                    name=\"groupType\"\n                                    defaultValue={row.groupType}\n                                    onChange={onChange}\n                                >\n                                    <option value={0}>Очная</option>\n                                    <option value={1}>Заочная</option>\n                                </Select>\n                            </FormControl>\n\n                        </FormGroup>\n                    </Grid>\n\n                    <Grid item xs={12} md={6}>\n                        <FormGroup>\n                            <FormControl margin={'normal'}>\n                                <InputLabel>Факультет</InputLabel>\n                                <Select\n                                    native\n                                    name={'facultet'}\n                                    defaultValue={row.facultet}\n                                    ref={facultetRef}\n                                    disabled={facultetLoading || !facultetList?.length}\n                                    onChange={onChange}\n                                >\n                                    {\n                                        !facultetLoading\n                                            ?\n                                            facultetList?.length\n                                                ? (\n                                                    facultetList.map((el: any, i: number, arr: Array<any>) => {\n                                                        return (\n                                                            <option key={el.id} value={el.facultetName}>{el.facultetName}</option>\n                                                        )\n                                                    })\n                                                )\n\n                                                : <option key={-2} value={-1}>Ошибка загрузки</option>\n                                            : <option key={-1} value={-1}>Загрузка...</option>\n                                    }\n                                </Select>\n                            </FormControl>\n\n\n                            <DatePicker\n                                margin={'normal'}\n                                name={'startDate'}\n                                label=\"Дата зачисления\"\n                                format=\"yyyy-MM-dd\"\n                                value={row.startDate}\n                                cancelLabel={'отмена'}\n                                onChange={(e: any) => {\n                                    onChange({\n                                        target: {\n                                            name: 'startDate',\n                                            value: new Date(e).getTime(),\n                                        }\n                                    })\n                                }}\n                            />\n\n                            <DatePicker\n                                margin={'normal'}\n                                name={'finishDate'}\n                                label=\"Дата выпуска\"\n                                format=\"yyyy-MM-dd\"\n                                value={row.finishDate}\n                                cancelLabel={'отмена'}\n                                onChange={(e: any) => {\n                                    onChange({\n                                        target: {\n                                            name: 'finishDate',\n                                            value: new Date(e).getTime(),\n                                        }\n                                    })\n                                }}\n                            />\n                        </FormGroup>\n                    </Grid>\n\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onCancelChanges} color=\"primary\">\n                    Закрыть\n                </Button>\n                <Button onClick={onApplyChanges} color=\"primary\">\n                    Сохранить\n                </Button>\n            </DialogActions>\n        </Dialog>)\n})\n\nexport const PopupEditing = React.memo(({popupComponent: Popup}: any) => (\n    <Plugin>\n        <Template name=\"popupEditing\">\n            <TemplateConnector>\n                {(\n                    {\n                        rows,\n                        getRowId,\n                        addedRows,\n                        editingRowIds,\n                        createRowChange,\n                        rowChanges,\n                    },\n                    {\n                        changeRow, changeAddedRow, commitChangedRows, commitAddedRows,\n                        stopEditRows, cancelAddedRows, cancelChangedRows,\n                    },\n                ) => {\n                    const isNew = addedRows.length > 0;\n                    let editedRow: any;\n                    let rowId: any;\n                    if (isNew) {\n                        rowId = 0;\n                        editedRow = addedRows[rowId];\n                    } else {\n                        [rowId] = editingRowIds;\n                        const targetRow = rows.filter((row: any) => getRowId(row) === rowId)[0];\n                        editedRow = {...targetRow, ...rowChanges[rowId]};\n                    }\n\n                    const processValueChange = ({target: {name, value}}: any) => {\n                        const changeArgs = {\n                            rowId,\n                            change: createRowChange(editedRow, value, name),\n                        };\n                        if (isNew) {\n                            changeAddedRow(changeArgs);\n                        } else {\n                            changeRow(changeArgs);\n                        }\n                    };\n                    const rowIds = isNew ? [0] : editingRowIds;\n                    const applyChanges = () => {\n                        if (isNew) {\n                            commitAddedRows({rowIds});\n                        } else {\n                            stopEditRows({rowIds});\n                            commitChangedRows({rowIds});\n                        }\n                    };\n                    const cancelChanges = () => {\n                        if (isNew) {\n                            cancelAddedRows({rowIds});\n                        } else {\n                            stopEditRows({rowIds});\n                            cancelChangedRows({rowIds});\n                        }\n                    };\n\n                    const open = editingRowIds.length > 0 || isNew;\n\n                    return (\n                        <Popup\n                            open={open}\n                            row={editedRow}\n                            onChange={processValueChange}\n                            onApplyChanges={applyChanges}\n                            onCancelChanges={cancelChanges}\n                        />\n                    );\n                }}\n            </TemplateConnector>\n        </Template>\n        <Template name=\"root\">\n            <TemplatePlaceholder/>\n            <TemplatePlaceholder name=\"popupEditing\"/>\n        </Template>\n    </Plugin>\n))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalStudents\\ModalStudents.tsx",["329","330","331","332","333","334","335"],"import React, {useCallback, useEffect, useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router\"\nimport {Loading} from '../Loading/Loading';\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, Typography} from \"@material-ui/core\";\nimport {\n    ColumnChooser,\n    Grid as DxGrid,\n    PagingPanel,\n    Table,\n    TableColumnResizing,\n    TableColumnVisibility,\n    TableEditColumn,\n    TableFilterRow,\n    TableHeaderRow,\n    Toolbar\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport {Column, CustomPaging, EditingState, Filter, FilteringState, PagingState, Sorting, SortingState, TableColumnWidthInfo} from \"@devexpress/dx-react-grid\";\nimport {getLocalDate} from \"../Dates\";\nimport axios from \"axios\";\nimport {SnackBarUtils} from \"../SnackBarUtils/SnackBarUtils\";\nimport {getRowId, Popup, PopupEditing} from \"../EditStudentColumn/EditStudentColumn\";\nimport _ from \"lodash\";\nimport StudentUserDataModal from \"../ModalUserData/ModalUserData\";\nimport ModalOrders from \"../ModalOrders/ModalOrders\";\nimport {editStudent, exportStudents, exportStudentsWithCredentials} from \"../../redux/actions/actionsAdmin\";\nimport ModalPrikazZachislenie from \"../ModalPrikazZachislenie/ModalPrikazZachislenie\";\nimport {DxCustomFilter} from \"../DxCustomFilter\";\nimport {editColumnMessages, filterRowMessages} from \"../DxGridLocaleConfig\";\n\nfunction ModalStudents(props: any) {\n    const [groupName, setGroupName] = useState<string>('')\n\n    const [open, setOpen] = useState<boolean>(false)\n\n    const [page, setPage] = useState<number>(0)\n    const [pageSize, setPageSize] = useState<number>(6)\n\n    const [rows, setRows] = useState<any>([])\n    const [rowCount, setRowCount] = useState<number>(0)\n\n    const [columns] = useState<Column[]>([\n        {name: 'userId', title: 'ID аккаунта'},\n        {name: 'kurs', title: 'Курс'},\n        {name: 'groupName', title: 'Группа'},\n        {name: 'formaObuch', title: 'Форма обучения'},\n        {name: 'surname', title: 'Фамилия'},\n        {name: 'name', title: 'Имя'},\n        {name: 'patronymic', title: 'Отчество'},\n        {name: 'gender', title: 'Пол'},\n        {name: 'birthday', title: 'Дата рождения'},\n        {name: 'age', title: 'Возраст'},\n        {name: 'diplomaId', title: 'Номер диплома'},\n        {name: 'prikaz', title: 'Зачислен по приказу (№)'},\n        {name: 'prikazDate', title: 'Дата зачисления'},\n        {name: 'startDate', title: 'Начало обучения'},\n        {name: 'finishDate', title: 'Конец обучения'},\n        {name: 'documentRequestsList', title: 'Заказы'},\n        {name: 'userData', title: 'Данные аккаунта'},\n    ])\n    const [columnsWidth] = useState<TableColumnWidthInfo[]>([\n        {columnName: 'userId', width: 160},\n        {columnName: 'kurs', width: 80},\n        {columnName: 'groupName', width: 100},\n        {columnName: 'formaObuch', width: 160},\n        {columnName: 'surname', width: 180},\n        {columnName: 'name', width: 180},\n        {columnName: 'patronymic', width: 180},\n        {columnName: 'gender', width: 100},\n        {columnName: 'birthday', width: 150},\n        {columnName: 'age', width: 150},\n        {columnName: 'diplomaId', width: 160},\n        {columnName: 'prikaz', width: 160},\n        {columnName: 'prikazDate', width: 160},\n        {columnName: 'startDate', width: 160},\n        {columnName: 'finishDate', width: 160},\n        {columnName: 'documentRequestsList', width: 180},\n        {columnName: 'userData', width: 180},\n    ])\n\n\n    const [defaultHiddenColumnNames] = useState<string[]>([\n        'userId',\n        'groupName',\n        'formaObuch',\n        'prikaz',\n        'prikazDate',\n        'startDate',\n        'finishDate',\n        'userData',\n        'diplomaId',\n    ])\n    const [currentHiddenColumnNames, setCurrentHiddenColumnNames] = useState<string[]>(defaultHiddenColumnNames)\n\n    const [defaultFilters] = useState<Filter[]>([{\n        columnName: 'groupName',\n        operation: 'contains',\n        value: props.groupName,\n    }])\n    const [filters, setFilters] = useState<Filter[]>(defaultFilters)\n    const [filtersNeedReset, setFiltersNeedReset] = useState<boolean>(false)\n    const [filteringStateColumnExtensions] = useState([\n        {columnName: 'groupName', filteringEnabled: false},\n        {columnName: 'userData', filteringEnabled: false},\n        {columnName: 'documentRequestsList', filteringEnabled: false},\n    ])\n\n    const [sorting, setSorting] = useState<Sorting[]>([])\n    const [sortingStateColumnExtensions] = useState([\n        {columnName: 'groupName', sortingEnabled: false},\n        {columnName: 'userData', sortingEnabled: false},\n        {columnName: 'documentRequestsList', sortingEnabled: false},\n    ])\n\n    const [loading, setLoading] = useState<boolean>(true)\n\n    function openDialog() {\n        setOpen(true)\n    }\n\n    function closeDialog() {\n        setOpen(false)\n    }\n\n    //обновить список студентов\n    function updateList(): void {\n\n        setLoading(true)\n\n        axios.post(process.env.REACT_APP_ADMIN_STUDENTS_LIST_GET + ``,\n            {\n                offset: page * pageSize,\n                limit: pageSize,\n                page: page,\n                sort: sorting,\n                filters: filters,\n                ignoreInProgress: props.ignoreInProgress,\n            }\n        )\n            .then((res) => {\n                setRows(res.data.data.students)\n                setRowCount(res.data.data.studentsCount)\n                setLoading(false)\n            })\n            .catch(e => {\n                const res = e.response\n                //check if tokens expired already\n                SnackBarUtils.error('Ошибка загрузки списка')\n\n            })\n    }\n\n    //задержка перед фильтрацией\n    const debouncedSetFilters = useCallback(_.debounce((e) => {\n        setFilters([...e, ...defaultFilters])\n    }, 400), [])\n\n    //получать новый лист при изменении параметров\n    useEffect(() => {\n        if (open) {\n            updateList()\n        }\n\n        // console.log(page * pageSize,( page + 1) * pageSize);\n    }, [page, sorting, filters, open])\n\n    //обновить лист в компоненте\n    useEffect(() => {\n        //сброс страницы на 0 если лист маленький\n        if (rowCount <= pageSize && filters?.length && open) {\n            setPage(0)\n            // console.log(props.Admin.studentsList.count, pageSize);\n            // console.log(page);\n        }\n\n    }, [rows])\n\n    //кастомный хендлер сортинга для сброса сортировки на 3-е нажатие\n    const onSortingChange = (newColumnsSort: Array<any>) => {\n        let indexToRemove = -1;\n        newColumnsSort.forEach((column, index) => {\n            let columnToCheck = sorting.filter(\n                (c) => c.columnName === column.columnName\n            );\n\n            if (\n                columnToCheck.length > 0 &&\n                columnToCheck[0].direction !== column.direction &&\n                column.direction === \"asc\"\n            ) {\n                indexToRemove = index;\n            }\n        });\n        if (indexToRemove > -1) newColumnsSort.splice(indexToRemove, 1);\n        setSorting(newColumnsSort);\n    }\n\n    //отправить запрос на изменение данных студента\n    const commitChanges = ({changed}: any) => {\n        // let changedRows;\n        if (changed) {\n            // changedRows = rows.map((row: any) => (changed[row.id] ? {...row, ...changed[row.id]} : row));\n\n            const editedUserId: number = parseInt(Object.keys(changed)[0])\n            const editedData: any = changed[editedUserId]\n\n            // console.log(changed)\n\n            if (editedData) {\n                setLoading(true)\n                props.editStudent(editedUserId, editedData, () => {\n                    updateList()\n                })\n            }\n        }\n    };\n\n    //компонент форматирования формы обучения\n    const FormaObuchComponent = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <span\n                >\n                    {row.formaObuch ? 'платная' : 'бюджетная'}\n                 </span>\n            </Table.Cell>\n        )\n    })\n\n    //компонент просмотра инфы о акке студента\n    const StudentLoginData = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <StudentUserDataModal userId={row.userId}/>\n            </Table.Cell>\n        )\n    })\n\n    const DocumentRequestsList = React.memo(({value, style, row, column, tableRow, ...restProps}: any) => {\n        const studentName = `${row.surname} ${row.name} ${row.patronymic} `\n\n        return (\n            <Table.Cell\n                {...restProps}\n            >\n                <ModalOrders studentName={studentName} userId={row.userId}/>\n            </Table.Cell>\n        )\n    })\n\n    //компаратор для специфичных колонок\n    const Cell = React.memo((cellProps: any) => {\n        const {column, row} = cellProps;\n\n        if (column.name === 'birthday') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.birthday)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'startDate') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.startDate)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'finishDate') {\n            return (\n                <Table.Cell {...cellProps}>\n                    <span>\n                        {getLocalDate(row.finishDate)}\n                    </span>\n                </Table.Cell>\n            )\n        }\n\n        if (column.name === 'userData') {\n            return <StudentLoginData {...cellProps} />;\n        }\n\n        if (column.name === 'documentRequestsList') {\n            return <DocumentRequestsList {...cellProps} />;\n        }\n\n        if (column.name === 'formaObuch') {\n            return <FormaObuchComponent {...cellProps} />;\n        }\n\n        return <Table.Cell {...cellProps} />;\n    })\n\n    return (\n        <>\n            <Button color={'primary'}\n                    variant={'contained'}\n                    onClick={() => {\n                        openDialog()\n                    }}\n            >\n                Показать\n            </Button>\n            <Dialog\n                open={open}\n                maxWidth={'lg'}\n                fullWidth={true}\n                onClose={closeDialog}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\" style={{padding: '16px 24px 0 24px'}}>\n                    <div className={\"table-description\"}>\n                        <Typography variant={'h6'}>\n                            Студенты группы {props.groupName}\n                        </Typography>\n                        <div className={'table-controls'}>\n\n                            {\n                                props.groupId !== undefined\n                                    ? <>\n                                        <ModalPrikazZachislenie\n                                            groupId={props.groupId}\n                                            groupName={props.groupName}\n                                            updateList={() => {\n                                                updateList()\n                                            }}\n                                        />\n\n                                        <Button color={'primary'}\n                                                variant={'contained'}\n                                                style={{marginRight: '25px'}}\n                                                onClick={() => {\n                                                    if (props.archived) {\n                                                        props.exportStudents(currentHiddenColumnNames, filters, 'archived')\n                                                    } else {\n                                                        props.exportStudents(currentHiddenColumnNames, filters)\n                                                    }\n                                                }}\n                                        >\n                                            Экспорт\n                                        </Button>\n\n                                        <Button color={'primary'}\n                                                variant={'contained'}\n                                                style={{marginRight: '25px'}}\n                                                onClick={() => {\n                                                    if (props.archived) {\n                                                        props.exportStudentsWithCredentials(currentHiddenColumnNames, filters, 'archived')\n                                                    } else {\n                                                        props.exportStudentsWithCredentials(currentHiddenColumnNames, filters)\n                                                    }\n\n                                                }}\n                                        >\n                                            Экспорт данных для входа\n                                        </Button></>\n                                    : ''\n                            }\n\n\n                            <Button color={'primary'}\n                                    variant={'contained'}\n                                    onClick={() => {\n                                        updateList()\n                                    }}\n                            >\n                                Обновить\n                            </Button>\n                        </div>\n                    </div>\n                </DialogTitle>\n                <DialogContent style={{padding: '0'}}>\n                    <DxGrid\n                        rows={rows}\n                        columns={columns}\n                        getRowId={getRowId}\n                    >\n                        <Toolbar/>\n                        <FilteringState\n                            columnExtensions={filteringStateColumnExtensions}\n                            onFiltersChange={debouncedSetFilters}\n                        />\n                        <SortingState\n                            sorting={sorting}\n                            onSortingChange={onSortingChange}\n                            columnExtensions={sortingStateColumnExtensions}\n                        />\n                        <PagingState\n                            currentPage={page}\n                            onCurrentPageChange={setPage}\n                            pageSize={pageSize}\n                        />\n                        <CustomPaging\n                            totalCount={rowCount}\n                        />\n                        <EditingState\n                            onCommitChanges={commitChanges}\n                        />\n\n                        <Table\n                            cellComponent={Cell}\n                        />\n                        <TableColumnResizing\n                            defaultColumnWidths={columnsWidth}\n                        />\n                        <TableColumnVisibility\n                            defaultHiddenColumnNames={defaultHiddenColumnNames}\n                            onHiddenColumnNamesChange={setCurrentHiddenColumnNames}\n\n                        />\n                        <TableHeaderRow\n                            showSortingControls\n                        />\n                        <TableEditColumn\n                            showEditCommand\n                            messages={editColumnMessages}\n                        />\n                        <PopupEditing popupComponent={Popup}/>\n                        <TableFilterRow\n                            messages={filterRowMessages}\n                            editorComponent={(p: any) => (\n                                <DxCustomFilter\n                                    filtersNeedReset={filtersNeedReset}\n                                    setFiltersNeedReset={setFiltersNeedReset}\n                                    {...p}/>\n                            )}\n                        />\n                        <PagingPanel/>\n                        <ColumnChooser/>\n\n                    </DxGrid>\n                    {loading && <Loading/>}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={closeDialog} color=\"primary\">\n                        Закрыть\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        Auth: state.Auth,\n        Admin: state.Admin,\n        User: state.User\n    }\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        editStudent: (userId: number, values: any, cb: Function) => {\n            dispatch(editStudent(userId, values, cb))\n        },\n        exportStudentsWithCredentials: (restrictedColumns: any[], filters: any[], type?: string | undefined) => {\n            dispatch(exportStudentsWithCredentials(restrictedColumns, filters, type))\n        },\n        exportStudents: (restrictedColumns: any[], filters: any[], type?: string | undefined) => {\n            dispatch(exportStudents(restrictedColumns, filters, type))\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ModalStudents))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\additional_components\\ModalGroupCreate\\ModalGroupCreate.tsx",["336","337"],"import React, {useEffect, useState} from 'react'\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, FormGroup, Grid, InputLabel, Select, TextField} from \"@material-ui/core\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {SnackBarUtils} from \"../SnackBarUtils/SnackBarUtils\";\nimport {Loading} from \"../Loading/Loading\";\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {DatePicker} from \"@material-ui/pickers\";\n\nfunction ModalGroupCreate(props: any) {\n    const [open, setOpen] = useState<boolean>(false);\n    const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n\n    const [facultetLoading, setFacultetLoading] = useState<boolean>(true);\n    const [facultetList, setFacultetList] = useState<any[]>();\n\n    const [kurs, setKurs] = useState<number>(1);\n    const [groupName, setGroupName] = useState<string>('');\n    const [groupType, setGroupType] = useState<number>(0);\n    const [inProgress, setInProgress] = useState<number>(1);\n    const [startDate, setStartDate] = useState<Date>(new Date());\n    const [finishDate, setFinishDate] = useState<Date>(new Date());\n    const [facultet, setFacultet] = useState<string>('');\n\n    function openDialog() {\n        setOpen(true)\n    }\n\n    function closeDialog() {\n        if (!isSubmitting) {\n            setOpen(false)\n        }\n    }\n\n    function handleSubmit() {\n        if (!isSubmitting) {\n            if (\n                groupName !== '' &&\n                facultet !== ''\n            ) {\n                setIsSubmitting(true)\n\n                axios.post(process.env.REACT_APP_ADMIN_GROUPS_CREATE + ``, {\n                    kurs: kurs,\n                    groupName: groupName,\n                    groupType: groupType,\n                    inProgress: inProgress,\n                    facultet: facultet,\n                    startDate: startDate,\n                    finishDate: finishDate,\n                })\n                    .then((res: AxiosResponse) => {\n                        setFacultetList(res.data.data)\n                        setFacultetLoading(false)\n                        setOpen(false)\n                        SnackBarUtils.success(`Группа ${groupName} создана`)\n                        props.updateList()\n                    })\n                    .catch(() => {\n                        SnackBarUtils.error('Ошибка создания группы')\n                        setIsSubmitting(false)\n                        setFacultetLoading(false)\n                    })\n            } else {\n                SnackBarUtils.warning('Поля не заполнены')\n\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (open) {\n\n            //подгрузка факультетов\n            axios.get(process.env.REACT_APP_ADMIN_FACULTETS_GET + ``)\n                .then((res: AxiosResponse) => {\n                    setFacultetList(res.data.data)\n                    setFacultetLoading(false)\n                })\n                .catch(() => {\n                    SnackBarUtils.error('Ошибка загрузки отделений')\n                    setFacultetLoading(false)\n                })\n        }\n    }, [open])\n\n    return (\n        <>\n            <Button color={'primary'}\n                    variant={'contained'}\n                    style={{\n                        marginRight: '30px',\n                    }}\n                    onClick={() => {\n                        openDialog()\n                    }}\n            >\n                Создать\n            </Button>\n\n            <Dialog\n                open={open}\n                fullWidth={true}\n                maxWidth={'md'}\n                onClose={closeDialog}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <form action=\"\" onSubmit={(e: any) => {\n                    e.preventDefault()\n                    handleSubmit()\n                }}>\n\n                    <DialogTitle id=\"form-dialog-title\">Создание группы</DialogTitle>\n                    <DialogContent>\n                        <Grid container spacing={3}>\n\n                            <Grid item xs={12} md={6}>\n                                <FormGroup>\n\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"kurs\"\n                                        label=\"Курс\"\n                                        type={'number'}\n                                        inputProps={{min: 1, max: 4}}\n                                        value={kurs}\n                                        onChange={(e: any) => {\n                                            const value = e.target.value\n                                            if (parseInt(value) <= 4 && parseInt(value) >= 1 || value === '') {\n                                                setKurs(value)\n                                            } else {\n                                                e.preventDefault()\n                                            }\n                                        }}\n                                    />\n\n                                    <FormControl margin={'normal'}>\n                                        <InputLabel>Статус группы</InputLabel>\n                                        <Select\n                                            native\n                                            name=\"inProgress\"\n                                            defaultValue={1}\n                                            onChange={(e: any) => {\n                                                setInProgress(e.target.value)\n                                            }}\n                                        >\n                                            <option value={1}>Учится</option>\n                                            <option value={0}>Выпущена</option>\n                                        </Select>\n                                    </FormControl>\n\n                                    <TextField\n                                        margin=\"normal\"\n                                        name=\"groupName\"\n                                        label=\"Название\"\n                                        onChange={(e: any) => {\n                                            setGroupName(e.target.value)\n                                        }}\n                                    />\n\n                                    <FormControl margin={'normal'}>\n                                        <InputLabel>Очная/заочная</InputLabel>\n                                        <Select\n                                            native\n                                            name=\"groupType\"\n                                            defaultValue={0}\n                                            onChange={(e: any) => {\n                                                setGroupType(e.target.value)\n                                            }}\n                                        >\n                                            <option value={0}>Очная</option>\n                                            <option value={1}>Заочная</option>\n                                        </Select>\n                                    </FormControl>\n\n                                </FormGroup>\n                            </Grid>\n\n                            <Grid item xs={12} md={6}>\n                                <FormGroup>\n                                    <FormControl margin={'normal'}>\n                                        <InputLabel>Факультет</InputLabel>\n                                        <Select\n                                            native\n                                            name={'facultet'}\n                                            value={facultet}\n                                            disabled={facultetLoading || !facultetList?.length}\n                                            onChange={(e: any) => {\n                                                setFacultet(e.target.value)\n                                            }}\n                                        >\n                                            {\n                                                !facultetLoading\n                                                    ?\n                                                    facultetList?.length\n                                                        ? (<>\n\n                                                                <option aria-label=\"None\" value=\"\"/>\n                                                                {\n                                                                    facultetList.map((el: any, i: number, arr: Array<any>) => {\n                                                                        return (\n                                                                            <option key={el.id} value={el.facultetName}>{el.facultetName}</option>\n                                                                        )\n                                                                    })\n                                                                }\n                                                            </>\n                                                        )\n\n                                                        : <option key={-2} value={-1}>Ошибка загрузки</option>\n                                                    : <option key={-1} value={-1}>Загрузка...</option>\n                                            }\n                                        </Select>\n                                    </FormControl>\n\n                                    <DatePicker\n                                        margin={'normal'}\n                                        label=\"Дата зачисления\"\n                                        format=\"yyyy-MM-dd\"\n                                        value={startDate}\n                                        cancelLabel={'отмена'}\n                                        onChange={(e: any) => {\n                                            setStartDate(e)\n                                        }}\n                                    />\n\n                                    <DatePicker\n                                        margin={'normal'}\n                                        label=\"Дата выпуска\"\n                                        format=\"yyyy-MM-dd\"\n                                        value={finishDate}\n                                        cancelLabel={'отмена'}\n                                        onChange={(e: any) => {\n                                            setFinishDate(e)\n                                        }}\n                                    />\n\n                                </FormGroup>\n                            </Grid>\n\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={closeDialog} color=\"primary\">\n                            Закрыть\n                        </Button>\n                        <Button type={'submit'} color=\"primary\">\n                            Сохранить\n                        </Button>\n                    </DialogActions>\n                    {!isSubmitting || <Loading/>}\n                </form>\n            </Dialog>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {}\n}\nconst mapDispatchToProps = (dispatch: any) => {\n    return {}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ModalGroupCreate))","C:\\Users\\Vadim\\Desktop\\Projects\\doc-system\\front\\src\\pages\\Student\\Order_docs\\OrderCards.tsx",[],{"ruleId":"338","replacedBy":"339"},{"ruleId":"340","replacedBy":"341"},{"ruleId":"338","replacedBy":"339"},{"ruleId":"340","replacedBy":"341"},{"ruleId":"342","severity":1,"message":"343","line":99,"column":21,"nodeType":"344","messageId":"345","endLine":99,"endColumn":32},{"ruleId":"342","severity":1,"message":"346","line":100,"column":21,"nodeType":"344","messageId":"345","endLine":100,"endColumn":33},{"ruleId":"347","severity":1,"message":"348","line":27,"column":8,"nodeType":"349","endLine":27,"endColumn":10,"suggestions":"350"},{"ruleId":"351","severity":1,"message":"352","line":43,"column":49,"nodeType":"353","messageId":"354","endLine":43,"endColumn":73},{"ruleId":"351","severity":1,"message":"355","line":55,"column":49,"nodeType":"353","messageId":"354","endLine":55,"endColumn":76},{"ruleId":"351","severity":1,"message":"356","line":59,"column":49,"nodeType":"353","messageId":"354","endLine":59,"endColumn":85},{"ruleId":"351","severity":1,"message":"357","line":63,"column":49,"nodeType":"353","messageId":"354","endLine":63,"endColumn":74},{"ruleId":"351","severity":1,"message":"358","line":67,"column":49,"nodeType":"353","messageId":"354","endLine":67,"endColumn":83},{"ruleId":"351","severity":1,"message":"359","line":75,"column":49,"nodeType":"353","messageId":"354","endLine":75,"endColumn":74},{"ruleId":"351","severity":1,"message":"360","line":79,"column":49,"nodeType":"353","messageId":"354","endLine":79,"endColumn":78},{"ruleId":"342","severity":1,"message":"361","line":21,"column":22,"nodeType":"344","messageId":"345","endLine":21,"endColumn":33},{"ruleId":"342","severity":1,"message":"362","line":43,"column":12,"nodeType":"344","messageId":"345","endLine":43,"endColumn":36},{"ruleId":"347","severity":1,"message":"363","line":72,"column":33,"nodeType":"344","endLine":72,"endColumn":44},{"ruleId":"347","severity":1,"message":"364","line":80,"column":8,"nodeType":"349","endLine":80,"endColumn":32,"suggestions":"365"},{"ruleId":"347","severity":1,"message":"366","line":99,"column":8,"nodeType":"349","endLine":99,"endColumn":41,"suggestions":"367"},{"ruleId":"342","severity":1,"message":"361","line":33,"column":22,"nodeType":"344","messageId":"345","endLine":33,"endColumn":33},{"ruleId":"342","severity":1,"message":"362","line":63,"column":12,"nodeType":"344","messageId":"345","endLine":63,"endColumn":36},{"ruleId":"347","severity":1,"message":"363","line":92,"column":33,"nodeType":"344","endLine":92,"endColumn":44},{"ruleId":"347","severity":1,"message":"364","line":100,"column":8,"nodeType":"349","endLine":100,"endColumn":32,"suggestions":"368"},{"ruleId":"347","severity":1,"message":"369","line":119,"column":8,"nodeType":"349","endLine":119,"endColumn":37,"suggestions":"370"},{"ruleId":"347","severity":1,"message":"371","line":23,"column":8,"nodeType":"349","endLine":23,"endColumn":26,"suggestions":"372"},{"ruleId":"342","severity":1,"message":"361","line":36,"column":22,"nodeType":"344","messageId":"345","endLine":36,"endColumn":33},{"ruleId":"342","severity":1,"message":"373","line":135,"column":23,"nodeType":"344","messageId":"345","endLine":135,"endColumn":26},{"ruleId":"347","severity":1,"message":"363","line":143,"column":33,"nodeType":"344","endLine":143,"endColumn":44},{"ruleId":"347","severity":1,"message":"364","line":154,"column":8,"nodeType":"349","endLine":154,"endColumn":38,"suggestions":"374"},{"ruleId":"347","severity":1,"message":"375","line":165,"column":8,"nodeType":"349","endLine":165,"endColumn":14,"suggestions":"376"},{"ruleId":"347","severity":1,"message":"377","line":51,"column":8,"nodeType":"349","endLine":51,"endColumn":29,"suggestions":"378"},{"ruleId":"342","severity":1,"message":"373","line":112,"column":23,"nodeType":"344","messageId":"345","endLine":112,"endColumn":26},{"ruleId":"342","severity":1,"message":"373","line":146,"column":23,"nodeType":"344","messageId":"345","endLine":146,"endColumn":26},{"ruleId":"342","severity":1,"message":"373","line":180,"column":23,"nodeType":"344","messageId":"345","endLine":180,"endColumn":26},{"ruleId":"342","severity":1,"message":"373","line":209,"column":23,"nodeType":"344","messageId":"345","endLine":209,"endColumn":26},{"ruleId":"342","severity":1,"message":"373","line":243,"column":23,"nodeType":"344","messageId":"345","endLine":243,"endColumn":26},{"ruleId":"342","severity":1,"message":"361","line":34,"column":22,"nodeType":"344","messageId":"345","endLine":34,"endColumn":33},{"ruleId":"342","severity":1,"message":"362","line":89,"column":12,"nodeType":"344","messageId":"345","endLine":89,"endColumn":36},{"ruleId":"342","severity":1,"message":"373","line":136,"column":23,"nodeType":"344","messageId":"345","endLine":136,"endColumn":26},{"ruleId":"347","severity":1,"message":"363","line":144,"column":33,"nodeType":"344","endLine":144,"endColumn":44},{"ruleId":"347","severity":1,"message":"364","line":155,"column":8,"nodeType":"349","endLine":155,"endColumn":38,"suggestions":"379"},{"ruleId":"347","severity":1,"message":"375","line":166,"column":8,"nodeType":"349","endLine":166,"endColumn":14,"suggestions":"380"},{"ruleId":"347","severity":1,"message":"381","line":172,"column":8,"nodeType":"349","endLine":172,"endColumn":19,"suggestions":"382"},{"ruleId":"342","severity":1,"message":"373","line":76,"column":27,"nodeType":"344","messageId":"345","endLine":76,"endColumn":30},{"ruleId":"342","severity":1,"message":"361","line":21,"column":22,"nodeType":"344","messageId":"345","endLine":21,"endColumn":33},{"ruleId":"342","severity":1,"message":"383","line":44,"column":12,"nodeType":"344","messageId":"345","endLine":44,"endColumn":36},{"ruleId":"342","severity":1,"message":"384","line":52,"column":12,"nodeType":"344","messageId":"345","endLine":52,"endColumn":19},{"ruleId":"342","severity":1,"message":"385","line":52,"column":21,"nodeType":"344","messageId":"345","endLine":52,"endColumn":31},{"ruleId":"342","severity":1,"message":"386","line":53,"column":12,"nodeType":"344","messageId":"345","endLine":53,"endColumn":42},{"ruleId":"347","severity":1,"message":"364","line":100,"column":8,"nodeType":"349","endLine":100,"endColumn":39,"suggestions":"387"},{"ruleId":"342","severity":1,"message":"388","line":13,"column":26,"nodeType":"344","messageId":"345","endLine":13,"endColumn":41},{"ruleId":"347","severity":1,"message":"389","line":77,"column":8,"nodeType":"349","endLine":77,"endColumn":14,"suggestions":"390"},{"ruleId":"347","severity":1,"message":"391","line":40,"column":8,"nodeType":"349","endLine":40,"endColumn":14,"suggestions":"392"},{"ruleId":"393","severity":1,"message":"394","line":132,"column":122,"nodeType":"395","messageId":"396","endLine":132,"endColumn":124},{"ruleId":"347","severity":1,"message":"377","line":34,"column":8,"nodeType":"349","endLine":34,"endColumn":10,"suggestions":"397"},{"ruleId":"342","severity":1,"message":"361","line":33,"column":22,"nodeType":"344","messageId":"345","endLine":33,"endColumn":33},{"ruleId":"342","severity":1,"message":"362","line":67,"column":12,"nodeType":"344","messageId":"345","endLine":67,"endColumn":36},{"ruleId":"347","severity":1,"message":"363","line":96,"column":33,"nodeType":"344","endLine":96,"endColumn":44},{"ruleId":"347","severity":1,"message":"364","line":104,"column":8,"nodeType":"349","endLine":104,"endColumn":32,"suggestions":"398"},{"ruleId":"347","severity":1,"message":"399","line":123,"column":8,"nodeType":"349","endLine":123,"endColumn":37,"suggestions":"400"},{"ruleId":"342","severity":1,"message":"361","line":25,"column":22,"nodeType":"344","messageId":"345","endLine":25,"endColumn":33},{"ruleId":"347","severity":1,"message":"363","line":86,"column":33,"nodeType":"344","endLine":86,"endColumn":44},{"ruleId":"347","severity":1,"message":"364","line":95,"column":8,"nodeType":"349","endLine":95,"endColumn":32,"suggestions":"401"},{"ruleId":"347","severity":1,"message":"402","line":114,"column":8,"nodeType":"349","endLine":114,"endColumn":45,"suggestions":"403"},{"ruleId":"342","severity":1,"message":"361","line":27,"column":22,"nodeType":"344","messageId":"345","endLine":27,"endColumn":33},{"ruleId":"347","severity":1,"message":"363","line":93,"column":33,"nodeType":"344","endLine":93,"endColumn":44},{"ruleId":"347","severity":1,"message":"364","line":101,"column":8,"nodeType":"349","endLine":101,"endColumn":32,"suggestions":"404"},{"ruleId":"347","severity":1,"message":"405","line":120,"column":8,"nodeType":"349","endLine":120,"endColumn":37,"suggestions":"406"},{"ruleId":"342","severity":1,"message":"361","line":34,"column":22,"nodeType":"344","messageId":"345","endLine":34,"endColumn":33},{"ruleId":"347","severity":1,"message":"363","line":115,"column":33,"nodeType":"344","endLine":115,"endColumn":44},{"ruleId":"347","severity":1,"message":"364","line":123,"column":8,"nodeType":"349","endLine":123,"endColumn":32,"suggestions":"407"},{"ruleId":"347","severity":1,"message":"408","line":142,"column":8,"nodeType":"349","endLine":142,"endColumn":47,"suggestions":"409"},{"ruleId":"342","severity":1,"message":"361","line":34,"column":22,"nodeType":"344","messageId":"345","endLine":34,"endColumn":33},{"ruleId":"347","severity":1,"message":"363","line":118,"column":33,"nodeType":"344","endLine":118,"endColumn":44},{"ruleId":"347","severity":1,"message":"364","line":127,"column":8,"nodeType":"349","endLine":127,"endColumn":32,"suggestions":"410"},{"ruleId":"347","severity":1,"message":"411","line":147,"column":8,"nodeType":"349","endLine":147,"endColumn":39,"suggestions":"412"},{"ruleId":"342","severity":1,"message":"413","line":18,"column":11,"nodeType":"344","messageId":"345","endLine":18,"endColumn":25},{"ruleId":"347","severity":1,"message":"389","line":57,"column":8,"nodeType":"349","endLine":57,"endColumn":14,"suggestions":"414"},{"ruleId":"393","severity":1,"message":"394","line":152,"column":126,"nodeType":"395","messageId":"396","endLine":152,"endColumn":128},{"ruleId":"342","severity":1,"message":"388","line":16,"column":26,"nodeType":"344","messageId":"345","endLine":16,"endColumn":41},{"ruleId":"347","severity":1,"message":"415","line":84,"column":8,"nodeType":"349","endLine":84,"endColumn":14,"suggestions":"416"},{"ruleId":"342","severity":1,"message":"417","line":1,"column":16,"nodeType":"344","messageId":"345","endLine":1,"endColumn":37},{"ruleId":"342","severity":1,"message":"418","line":1,"column":39,"nodeType":"344","messageId":"345","endLine":1,"endColumn":48},{"ruleId":"419","severity":1,"message":"420","line":7,"column":1,"nodeType":"421","endLine":30,"endColumn":2},{"ruleId":"342","severity":1,"message":"417","line":1,"column":16,"nodeType":"344","messageId":"345","endLine":1,"endColumn":37},{"ruleId":"342","severity":1,"message":"418","line":1,"column":39,"nodeType":"344","messageId":"345","endLine":1,"endColumn":48},{"ruleId":"419","severity":1,"message":"420","line":7,"column":1,"nodeType":"421","endLine":29,"endColumn":2},{"ruleId":"342","severity":1,"message":"361","line":47,"column":22,"nodeType":"344","messageId":"345","endLine":47,"endColumn":33},{"ruleId":"347","severity":1,"message":"422","line":104,"column":22,"nodeType":"423","endLine":104,"endColumn":26},{"ruleId":"347","severity":1,"message":"424","line":120,"column":8,"nodeType":"349","endLine":120,"endColumn":50,"suggestions":"425"},{"ruleId":"347","severity":1,"message":"426","line":125,"column":8,"nodeType":"349","endLine":125,"endColumn":34,"suggestions":"427"},{"ruleId":"347","severity":1,"message":"428","line":14,"column":21,"nodeType":"423","endLine":14,"endColumn":25},{"ruleId":"342","severity":1,"message":"429","line":31,"column":14,"nodeType":"344","messageId":"345","endLine":31,"endColumn":27},{"ruleId":"342","severity":1,"message":"373","line":113,"column":23,"nodeType":"344","messageId":"345","endLine":113,"endColumn":26},{"ruleId":"342","severity":1,"message":"373","line":161,"column":23,"nodeType":"344","messageId":"345","endLine":161,"endColumn":26},{"ruleId":"430","severity":1,"message":"431","line":42,"column":29,"nodeType":"353","endLine":47,"endColumn":30},{"ruleId":"347","severity":1,"message":"432","line":48,"column":8,"nodeType":"349","endLine":48,"endColumn":14,"suggestions":"433"},{"ruleId":"434","severity":1,"message":"435","line":74,"column":62,"nodeType":"436","messageId":"437","endLine":74,"endColumn":64},{"ruleId":"434","severity":1,"message":"435","line":74,"column":86,"nodeType":"436","messageId":"437","endLine":74,"endColumn":88},{"ruleId":"342","severity":1,"message":"438","line":32,"column":12,"nodeType":"344","messageId":"345","endLine":32,"endColumn":21},{"ruleId":"342","severity":1,"message":"439","line":32,"column":23,"nodeType":"344","messageId":"345","endLine":32,"endColumn":35},{"ruleId":"342","severity":1,"message":"361","line":37,"column":22,"nodeType":"344","messageId":"345","endLine":37,"endColumn":33},{"ruleId":"342","severity":1,"message":"373","line":146,"column":23,"nodeType":"344","messageId":"345","endLine":146,"endColumn":26},{"ruleId":"347","severity":1,"message":"363","line":154,"column":33,"nodeType":"344","endLine":154,"endColumn":44},{"ruleId":"347","severity":1,"message":"364","line":165,"column":8,"nodeType":"349","endLine":165,"endColumn":38,"suggestions":"440"},{"ruleId":"347","severity":1,"message":"375","line":176,"column":8,"nodeType":"349","endLine":176,"endColumn":14,"suggestions":"441"},{"ruleId":"434","severity":1,"message":"435","line":129,"column":70,"nodeType":"436","messageId":"437","endLine":129,"endColumn":72},{"ruleId":"434","severity":1,"message":"435","line":129,"column":94,"nodeType":"436","messageId":"437","endLine":129,"endColumn":96},"no-native-reassign",["442"],"no-negated-in-lhs",["443"],"@typescript-eslint/no-unused-vars","'responseMsg' is assigned a value but never used.","Identifier","unusedVar","'responseData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["444"],"react/jsx-pascal-case","Imported JSX component Order_docs must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component Students_list must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Archived_Students_list must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Orders_list must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Archived_Orders_list must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Prikaz_list must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Moderators_list must be in PascalCase or SCREAMING_SNAKE_CASE","'setPageSize' is assigned a value but never used.","'currentHiddenColumnNames' is assigned a value but never used.","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useEffect has a missing dependency: 'updateList'. Either include it or remove the dependency array.",["445"],"React Hook useEffect has missing dependencies: 'filters?.length', 'pageSize', and 'props.Admin.moderatorsList.count'. Either include them or remove the dependency array. If 'setRowCount' needs the current value of 'props.Admin.moderatorsList.count', you can also switch to useReducer instead of useState and read 'props.Admin.moderatorsList.count' in the reducer.",["446"],["447"],"React Hook useEffect has missing dependencies: 'filters?.length', 'pageSize', and 'props.Admin.prikazList.count'. Either include them or remove the dependency array. If 'setRowCount' needs the current value of 'props.Admin.prikazList.count', you can also switch to useReducer instead of useState and read 'props.Admin.prikazList.count' in the reducer.",["448"],"React Hook useEffect has missing dependencies: 'onChange' and 'setFiltersNeedReset'. Either include them or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["449"],"'res' is assigned a value but never used.",["450"],"React Hook useEffect has missing dependencies: 'filters?.length', 'open', 'pageSize', and 'rowCount'. Either include them or remove the dependency array.",["451"],"React Hook useEffect has a missing dependency: 'open'. Either include it or remove the dependency array.",["452"],["453"],["454"],"React Hook useEffect has missing dependencies: 'open' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["455"],"'defaultHiddenColumnNames' is assigned a value but never used.","'filters' is assigned a value but never used.","'setFilters' is assigned a value but never used.","'filteringStateColumnExtensions' is assigned a value but never used.",["456"],"'setIsSubmitting' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.userId'. Either include it or remove the dependency array.",["457"],"React Hook useEffect has missing dependencies: 'row.name', 'row.patronymic', and 'row.surname'. Either include them or remove the dependency array. If 'setStudent' needs the current value of 'row.surname', you can also switch to useReducer instead of useState and read 'row.surname' in the reducer.",["458"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["459"],["460"],"React Hook useEffect has missing dependencies: 'filters?.length', 'pageSize', and 'props.Admin.groupsList.count'. Either include them or remove the dependency array. If 'setRowCount' needs the current value of 'props.Admin.groupsList.count', you can also switch to useReducer instead of useState and read 'props.Admin.groupsList.count' in the reducer.",["461"],["462"],"React Hook useEffect has missing dependencies: 'filters?.length', 'pageSize', and 'props.Admin.archivedOrdersList.count'. Either include them or remove the dependency array. If 'setRowCount' needs the current value of 'props.Admin.archivedOrdersList.count', you can also switch to useReducer instead of useState and read 'props.Admin.archivedOrdersList.count' in the reducer.",["463"],["464"],"React Hook useEffect has missing dependencies: 'filters?.length', 'pageSize', and 'props.Admin.ordersList.count'. Either include them or remove the dependency array. If 'setRowCount' needs the current value of 'props.Admin.ordersList.count', you can also switch to useReducer instead of useState and read 'props.Admin.ordersList.count' in the reducer.",["465"],["466"],"React Hook useEffect has missing dependencies: 'filters?.length', 'pageSize', and 'props.Admin.archivedStudentsList.count'. Either include them or remove the dependency array. If 'setRowCount' needs the current value of 'props.Admin.archivedStudentsList.count', you can also switch to useReducer instead of useState and read 'props.Admin.archivedStudentsList.count' in the reducer.",["467"],["468"],"React Hook useEffect has missing dependencies: 'filters?.length', 'pageSize', and 'props.Admin.studentsList.count'. Either include them or remove the dependency array. If 'setRowCount' needs the current value of 'props.Admin.studentsList.count', you can also switch to useReducer instead of useState and read 'props.Admin.studentsList.count' in the reducer.",["469"],"'userId' is assigned a value but never used.",["470"],"React Hook useEffect has missing dependencies: 'row.fullFilled' and 'row.id'. Either include them or remove the dependency array.",["471"],"'ReactComponentElement' is defined but never used.","'useEffect' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","Assignments to the '_isMounted' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","React Hook useEffect has missing dependencies: '_isMounted' and 'updateOrderList'. Either include them or remove the dependency array.",["472"],"React Hook useEffect has a missing dependency: 'props.User.orders.ordersCount'. Either include it or remove the dependency array. If 'setRowCount' needs the current value of 'props.User.orders.ordersCount', you can also switch to useReducer instead of useState and read 'props.User.orders.ordersCount' in the reducer.",["473"],"Assignments to the 'isMounted' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'alreadyAuthed' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","React Hook useEffect has missing dependencies: 'row.facultet', 'row.groupName', and 'row.kurs'. Either include them or remove the dependency array. If 'setKurs' needs the current value of 'row.kurs', you can also switch to useReducer instead of useState and read 'row.kurs' in the reducer.",["474"],"no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'groupName' is assigned a value but never used.","'setGroupName' is assigned a value but never used.",["475"],["476"],"no-global-assign","no-unsafe-negation",{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},{"desc":"479","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},{"desc":"492","fix":"493"},{"desc":"488","fix":"494"},{"desc":"490","fix":"495"},{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"479","fix":"506"},{"desc":"507","fix":"508"},{"desc":"479","fix":"509"},{"desc":"510","fix":"511"},{"desc":"479","fix":"512"},{"desc":"513","fix":"514"},{"desc":"479","fix":"515"},{"desc":"516","fix":"517"},{"desc":"479","fix":"518"},{"desc":"519","fix":"520"},{"desc":"500","fix":"521"},{"desc":"522","fix":"523"},{"desc":"524","fix":"525"},{"desc":"526","fix":"527"},{"desc":"528","fix":"529"},{"desc":"488","fix":"530"},{"desc":"490","fix":"531"},"Update the dependencies array to be: [props]",{"range":"532","text":"533"},"Update the dependencies array to be: [page, sorting, filters, updateList]",{"range":"534","text":"535"},"Update the dependencies array to be: [filters?.length, pageSize, props.Admin.moderatorsList.count, props.Admin.moderatorsList.list]",{"range":"536","text":"537"},{"range":"538","text":"535"},"Update the dependencies array to be: [filters?.length, pageSize, props.Admin.prikazList.count, props.Admin.prikazList.list]",{"range":"539","text":"540"},"Update the dependencies array to be: [filtersNeedReset, onChange, setFiltersNeedReset]",{"range":"541","text":"542"},"Update the dependencies array to be: [page, sorting, filters, open, updateList]",{"range":"543","text":"544"},"Update the dependencies array to be: [filters?.length, open, pageSize, rowCount, rows]",{"range":"545","text":"546"},"Update the dependencies array to be: [open, selectedStudentsIds]",{"range":"547","text":"548"},{"range":"549","text":"544"},{"range":"550","text":"546"},"Update the dependencies array to be: [open, props, selection]",{"range":"551","text":"552"},"Update the dependencies array to be: [open, page, pageSize, sorting, updateList]",{"range":"553","text":"554"},"Update the dependencies array to be: [open, props.userId]",{"range":"555","text":"556"},"Update the dependencies array to be: [open, row.name, row.patronymic, row.surname]",{"range":"557","text":"558"},"Update the dependencies array to be: [open]",{"range":"559","text":"560"},{"range":"561","text":"535"},"Update the dependencies array to be: [filters?.length, pageSize, props.Admin.groupsList.count, props.Admin.groupsList.list]",{"range":"562","text":"563"},{"range":"564","text":"535"},"Update the dependencies array to be: [filters?.length, pageSize, props.Admin.archivedOrdersList.count, props.Admin.archivedOrdersList.list]",{"range":"565","text":"566"},{"range":"567","text":"535"},"Update the dependencies array to be: [filters?.length, pageSize, props.Admin.ordersList.count, props.Admin.ordersList.list]",{"range":"568","text":"569"},{"range":"570","text":"535"},"Update the dependencies array to be: [filters?.length, pageSize, props.Admin.archivedStudentsList.count, props.Admin.archivedStudentsList.list]",{"range":"571","text":"572"},{"range":"573","text":"535"},"Update the dependencies array to be: [filters?.length, pageSize, props.Admin.studentsList.count, props.Admin.studentsList.list]",{"range":"574","text":"575"},{"range":"576","text":"556"},"Update the dependencies array to be: [open, row.fullFilled, row.id]",{"range":"577","text":"578"},"Update the dependencies array to be: [props.User.role, page, pageSize, sorting, _isMounted, updateOrderList]",{"range":"579","text":"580"},"Update the dependencies array to be: [props.User.orders.orders, props.User.orders.ordersCount]",{"range":"581","text":"582"},"Update the dependencies array to be: [open, row.facultet, row.groupName, row.kurs]",{"range":"583","text":"584"},{"range":"585","text":"544"},{"range":"586","text":"546"},[1212,1214],"[props]",[3395,3419],"[page, sorting, filters, updateList]",[4015,4048],"[filters?.length, pageSize, props.Admin.moderatorsList.count, props.Admin.moderatorsList.list]",[3906,3930],[4506,4535],"[filters?.length, pageSize, props.Admin.prikazList.count, props.Admin.prikazList.list]",[707,725],"[filtersNeedReset, onChange, setFiltersNeedReset]",[5728,5758],"[page, sorting, filters, open, updateList]",[6074,6080],"[filters?.length, open, pageSize, rowCount, rows]",[2049,2070],"[open, selectedStudentsIds]",[5548,5578],[5894,5900],[6006,6017],"[open, props, selection]",[3580,3611],"[open, page, pageSize, sorting, updateList]",[2908,2914],"[open, props.userId]",[1780,1786],"[open, row.name, row.patronymic, row.surname]",[964,966],"[open]",[4134,4158],[4734,4763],"[filters?.length, pageSize, props.Admin.groupsList.count, props.Admin.groupsList.list]",[4044,4068],[4684,4721],"[filters?.length, pageSize, props.Admin.archivedOrdersList.count, props.Admin.archivedOrdersList.list]",[4413,4437],[5013,5042],"[filters?.length, pageSize, props.Admin.ordersList.count, props.Admin.ordersList.list]",[4926,4950],[5576,5615],"[filters?.length, pageSize, props.Admin.archivedStudentsList.count, props.Admin.archivedStudentsList.list]",[5069,5093],[5680,5711],"[filters?.length, pageSize, props.Admin.studentsList.count, props.Admin.studentsList.list]",[2006,2012],[2481,2487],"[open, row.fullFilled, row.id]",[4030,4072],"[props.User.role, page, pageSize, sorting, _isMounted, updateOrderList]",[4197,4223],"[props.User.orders.orders, props.User.orders.ordersCount]",[2123,2129],"[open, row.facultet, row.groupName, row.kurs]",[6057,6087],[6403,6409]]